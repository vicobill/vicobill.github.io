syntax = "proto2";

package msg;

import "gogo/gogo.proto";
import "msg_def_inner.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.gostring_all) = true;

option (gogoproto.populate_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unsafe_marshaler_all) = false;
option (gogoproto.unsafe_unmarshaler_all) = false;

message SS_SessionUserState{
     uint64 user_service_id = 10;
     uint64 room_service_id = 11;
     uint64 match_service_id = 12;
     RPC_SessionUserState data = 13;
}

message SS_SetUserStateRsp{
     bool ok = 1;
     SS_SessionUserState state = 2;
}

message SS_SubUserStateReq{
     uint64 user_id = 1;
    repeated uint64 users = 2;
}

message SS_UnSubUserStateReq{
     uint64 user_id = 1;
}

message SS_SessionUserLogin{
     RPC_UserIdentify user = 1;
     uint64 user_service_id = 2;
}


// 请求Session上玩家人数
message SS_ReqOnlineUserNum {
}
message SS_ReturnOnlineUserNum {
     uint32 num = 1;
}

message SS_ReqAllChatUser {
     uint32 page_index = 1;
     uint32 page_size = 2;
}
message SS_ReturnAllChatUser {
    repeated uint64 user_ids = 1;            // 取得玩家ID
     uint32 num = 2;                 // 人数的总数量
}

message SS_GetUserServiceID {
     uint64 service = 1;
    repeated uint64 user_ids = 2;            // 取得玩家ID
}
message SS_UserServiceID {
     uint64 user_id = 1;
     uint64 service_id = 2;            // 取得玩家ID
}
message SS_GetUserServiceID_Reply {
     uint64 service = 1;
    repeated SS_UserServiceID datas = 2;
}

message SS_RoomState {
     uint64 room_id = 1;
     uint64 service_id = 2;
    repeated uint64 team_a = 3;
    repeated uint64 team_b = 4;
}

message SS_UserBeginGame {
     RPC_UserIdentify user = 1;
     uint64 room_id = 2;
}

service SessionService {
    rpc LoginSessionService(RPC_LoginReq) returns (RPC_LoginReply);
    rpc GetUserServiceID(SS_GetUserServiceID) returns (SS_GetUserServiceID_Reply);

    //获取用户状态
    rpc GetSessionUserState(RPC_UserIdentify) returns (SS_SessionUserState);

    //用户登入
    rpc UserLogin(SS_SessionUserLogin) returns (SS_SetUserStateRsp);
    //用户登出
    rpc UserLogout(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    rpc UserLogoutDirectly(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    //用户加入组队
    rpc UserJoinTeam(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    rpc UserJoinTeamDirectly(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    // 用户加入组队为准备好
    rpc UserChangeReadyState(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    //用户开始匹配
    rpc UserBeginMatch(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    rpc UserBeginMatchDirectly(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    //用户离开组队
    rpc UserLeaveTeam(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    //用户取消匹配
    rpc UserCancelMatch(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    rpc UserCancelPrepareGame(RPC_UserIdentify) returns (SS_SetUserStateRsp);

    //用户开始游戏
    rpc UserBeginGame(SS_UserBeginGame) returns (SS_SetUserStateRsp);
    //结束游戏
    rpc UserFinishGame(RPC_UserIdentify) returns (SS_SetUserStateRsp);
    //等待游戏开始
    rpc UserPrepareGame(RPC_UserIdentify) returns (SS_SetUserStateRsp);

    //注册订阅玩家信息
    rpc SubUserState(SS_SubUserStateReq) returns (RPC_ReturnCode);
    rpc UnSubUserState(SS_UnSubUserStateReq) returns (RPC_ReturnCode);
    //用户开始游戏
    rpc UserBeginGameDirectly(SS_UserBeginGame) returns (SS_SetUserStateRsp);
    //直接设置等待游戏开始
    rpc UserPrepareGameDirectly(RPC_UserIdentify) returns (SS_SetUserStateRsp);

    // 请求聊天的所有人
    rpc ReqOnlineUserNum(SS_ReqOnlineUserNum) returns (SS_ReturnOnlineUserNum);
    rpc ReqAllChatUser(SS_ReqAllChatUser) returns (SS_ReturnAllChatUser);

    // 同步玩家系统设置状态
    rpc SysUserSystemSetting(RPC_ExpandBaseUserData) returns(RPC_ReturnCode);

    // 设置游戏房间状态
    rpc SetRoomState(SS_RoomState) returns(RPC_ReturnCode);
}
