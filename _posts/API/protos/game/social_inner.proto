syntax = "proto2";

package msg;

import "gogo/gogo.proto";

import "msg_def_inner.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.gostring_all) = true;

option (gogoproto.populate_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unsafe_marshaler_all) = false;
option (gogoproto.unsafe_unmarshaler_all) = false;


//用户社交数据
message SS_UserSocialData{
     RPC_SocialUserData data = 1;
    repeated uint32 update_id = 2;          // 更新社交玩家的某项数据
     string nick_name = 3;          // 别名
}

//Follow请求
message SS_FollowReq{
     RPC_UserIdentify user_a = 1;
     RPC_UserIdentify user_b = 2;
}

//Follow返回
message SS_FollowReturn{
}

message SS_UserLogin{
     RPC_UserIdentify user = 1;
}

//请求粉丝列表
message SS_ReqFollowList{
     RPC_UserIdentify user = 1;
     bool click = 2; // 是否点击社交
     uint64 page_index = 11;
	 uint64 page_size = 12;
	 uint64 require_type = 13; // 3是最近
     uint32 sort_type = 14;	// 排序类型，默认0是按在线状态，1是按关注时间，2是按段位
     uint32 show_type = 15; // 显示位置
}
message SS_FollowUserData{
     SS_UserSocialData user = 1;
     bool online = 2;
     RPC_SocialNumData social_num = 3;
     bool friend = 4;
     RPC_RecentNews recent_news = 5;		// 人物最新动态
     bool new_follow_me = 6;                // 是否新关注的
     uint32 state = 7;
     string nick_name = 8;                  // 别名
     RPC_SortListExtraData sort_extra_data = 9;
}
message SS_ReturnFollowList{
     SS_ReqFollowList request = 1;
     uint64 total_count = 2; 
    repeated SS_FollowUserData datas = 3;
     RPC_SocialNumData social_num = 4;      //请求人自己的关注列表
     uint64 new_follow_me_num = 5;          // 新关注我的人数
}

// 记录最近组队玩家
message SS_RecordRecentlyContactList {
    repeated uint64 user_ids = 3;
}

// 记录最近组队玩家返回信息
message SS_RecordRecentlyContactListReturn {

}

message SS_RspRecentlyContactList {
     SS_UserSocialData user = 1;
     bool online = 2;
}

// 获取玩家社会关系数量
message SS_GetSocialNumReq {
     uint64 user_id = 1;
}
message SS_GetSocialNumRsp {
     uint64 user_id = 1;
     RPC_SocialNumData social_num = 2;
}

// 请求新的粉丝数量
message SS_ReqNewFollowMeNum {
     uint64 user_id = 1;
}

// 请求排行榜数据，使用的是社交数据
message SS_ReqRankData {
     uint64 user_id = 1; // 请求ID
     uint64 begin = 2;
     uint64 end = 3;
     uint32 sort_type = 4; //排行榜类型
}

message SS_RspRankData {
     SS_ReqRankData request = 1;
    repeated RPC_SocialUserData user_data = 2;
     uint64 my_rank = 3;
     RPC_SocialUserData user_sort_data = 4;
}

message SS_SyncUserState {
     uint64 user_id = 1;
     uint32 state = 2;
}

// 请求关注列表
message SS_ReqUserFollowList {
     uint64 user_id = 1;
}
// 返回关注列表
message SS_RspUserFollowList {
     uint64 user_id = 1;
    repeated RPC_BaseUserData user_data = 2;
}

// 设置他们nickname
message SS_SetClearOtherNickName {
     uint64 user_id = 1;
     uint64 other_id = 2;
	 string nick_name = 3;
     uint32 request_type = 4; //1是设置修改玩家昵称，2是去掉玩家昵称
}

// 更新排行榜数据
message SS_UpdateSortExtraData {
     uint64 user_id = 1;
     RPC_SortListExtraData data = 2;
}

// 同步玩家Session的State
message SS_SyncUserSessionState {
     uint64 user_id = 1;
     uint32 state = 2;
}

// 社交关系请求
message SS_ReqRelationship {
     uint64 user_id = 1;
     uint64 other_id = 2;
     uint64 require_type = 3;
     bool result = 4;
}

// 返回社会关系
message SS_ReponseRelationship {
     SS_ReqRelationship data = 1;
}

// 询问A--->B
message SS_ReqRspYesOrNo {
     RPC_ExpandBaseUserData user_a = 1;
     RPC_ExpandBaseUserData user_b = 2;
     uint32 ask_type = 3;
     bool request = 4;
     bool answer = 5; //回应
     bool session_join = 6;
     bool match_join = 7;
}
message SS_ReturnReqRspYesOrNo {
     SS_ReqRspYesOrNo data = 1;
     RPC_SessionUserState state = 2;
     uint64 ret_code = 3;
}

// 点赞
message SS_GivePraiseToSomebody {
     uint64 user_id = 1;
     uint64 other_id = 2;
     bool same_team = 3;
     uint32 match_type = 4;
}

// 登陆返回
message SS_RspLogin {
     RPC_SocialProfileData data = 1;
}

// 举报
message SS_ReportPassiveUser {
     uint64 user_id = 1;
     uint64 other_id = 2;
	 uint32 reason1st = 3;
	 uint32 reason2nd = 4;
	 uint32 reason3rd = 5;
	 uint32 reason4th = 6;
	 string text = 7;
     float score = 8;
     uint32 not_move_round = 9; // 挂机回合
     uint32 match_type = 10;
}

service SocialService {
    rpc LoginService(RPC_LoginReq) returns (RPC_ReturnCode);
    
    rpc UserLoginService(SS_UserLogin) returns (SS_RspLogin);
    rpc UserLogoutService(SS_UserLogin) returns (RPC_ReturnCode);

    //更新我的社交信息
    rpc UpdateMySocialData(SS_UserSocialData) returns (RPC_ReturnCode);
    //更新排行榜其他数据
    rpc UpdateMySortExtraData(SS_UpdateSortExtraData) returns (RPC_ReturnCode);
    //获取我的社交信息
    rpc GetMySocialData(RPC_UserIdentify) returns (SS_UserSocialData);
    //关注某人
    rpc FollowSomebody(SS_FollowReq) returns (SS_FollowReturn);
    //取消关注某人
    rpc CancelFollowSomebody(SS_FollowReq) returns (SS_FollowReturn);
    //请求粉丝列表
    rpc ReqFollowList(SS_ReqFollowList) returns (SS_ReturnFollowList);
    // 记录最近组队玩家
    rpc RecordRecentlyContactList(SS_RecordRecentlyContactList) returns (SS_RecordRecentlyContactListReturn);
    // 获取玩家社会关系数量
    rpc GetSocialNum(SS_GetSocialNumReq) returns (SS_GetSocialNumRsp);
    // 请求新的粉丝数量
    rpc ReqNewFollowMeNum(SS_ReqNewFollowMeNum) returns (RPC_ReturnCode);
    // 同步玩家的状态
    rpc SyncUserState(SS_SyncUserState) returns(RPC_ReturnCode);
    // 请求玩家列表
    rpc ReqUserFollowList(SS_ReqUserFollowList) returns(SS_RspUserFollowList);
    // 设置他们别名
    rpc SetClearOtherNickName(SS_SetClearOtherNickName) returns(RPC_ReturnCode);
    // 同步玩家Session的State
    rpc SyncUserSessionState(SS_SyncUserSessionState) returns(RPC_ReturnCode);

    // 请求排行榜
    rpc ReqRankData(SS_ReqRankData) returns(SS_RspRankData);
    // 请求排行榜关系
    rpc ReponseRelationship(SS_ReqRelationship) returns(SS_ReponseRelationship);
    // 询问A-B
    rpc ReqRspYesOrNo(SS_ReqRspYesOrNo) returns(SS_ReturnReqRspYesOrNo);
    // 点赞
    rpc GivePraiseToSomebody(SS_GivePraiseToSomebody) returns(RPC_ReturnCode);
    // 举报
    rpc ReportPassiveUser(SS_ReportPassiveUser) returns(RPC_ReturnCode);
}

