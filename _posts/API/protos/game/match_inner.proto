syntax = "proto2";

package msg;

import "gogo/gogo.proto";
import "msg_def_inner.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.gostring_all) = true;

option (gogoproto.populate_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unsafe_marshaler_all) = false;
option (gogoproto.unsafe_unmarshaler_all) = false;

message MS_ReturnCode{
}

message MS_MatchTeamData{
	 uint64 team_size = 2;
	 uint64 leader = 3;
	 uint32 room_kind = 5; // 房间类型
	 bool not_double_confirm = 6;
	 uint32 match_type = 7;
	repeated RPC_ExpandBaseUserData data = 8; // 集体玩家信息
}

//请求匹配房间
message MS_MatchReq{
	 RPC_UserIdentify user = 1;
	 bool team = 2;
	 RPC_UserData user_data = 3;
	 uint32 hero_id = 5;    //试玩的英雄ID
	 RPC_UserData other_user_data = 6;  //1v1匹配玩家信息
	 uint32 match_type = 7;	// 0是对战，1是天梯，2是娱乐模式，3是人机对战
	 uint32 skin_id = 8; // 皮肤ID	
}
message MS_MatchRsp{
	 MS_MatchReq request = 1;
	 MS_MatchTeamData data = 2;
	 bool has_team = 3;
	 uint32 room_kind = 4;
}

//请求加入匹配队列
message MS_JoinMatchTeamReq{
	 RPC_UserIdentify user = 1;	//请求角色
	 uint64 join_id = 2;	//队伍ID
	 RPC_UserData user_data = 3;
}
message MS_JoinMatchTeamReponse{
	 bool join_ok=1;
}

//离开匹配队伍
message MS_LeaveMatchTeamReq{
	 uint64 user_id = 1;	//请求角色
	 bool kick = 2;
	 uint64 kick_id = 3; 		//移除的时候，被踢玩家
}
message MS_LeaveMatchTeamRsp{
	 bool flag = 1; // 返回标志
}

//请求开始队伍匹配
message MS_BeginMatchTeamReq{
	 uint64 user_id = 1;	//请求角色
	 uint32 match_type = 2;	//匹配类型
	 uint32 extra_data = 3; //其他数据
}
message MS_BeginMatchTeamRsp{
}

//取消匹配
message MS_CancelMatchReq{
	 uint64 user_id = 1;	//请求角色
}
message MS_CancelMatchRespnse{
}

message MS_SelectHeroReq {
	 uint64 user_id = 1;
	 uint64 hero_id = 2;
	 uint64 skin_id = 3;
}
message MS_SelectHeroRsp {
	 uint64 hero_id = 1;
	 uint64 skin_id = 2;
}

message MS_SelectSealReq{
	 uint64 user_id = 1;
	 uint64 page_id = 2;
}
message MS_SelectSealRsp {
	 uint64 user_id = 1;
	 uint64 page_id = 2;
}

message MS_ReadyGameReq {
	 uint64 user_id = 1;
	 bool ready = 2;
}
message MS_ReadyGameRsp {
	 bool ready = 1;
}

// 剔除玩家出队伍
message MS_GetRidOfOneUserReq {
	 uint64 user_id = 1;  // 队长ID
	 uint64 other_id = 2; // 被拒绝的玩家ID
}
message MS_GetRidOfOneUserRsp {
	 uint64 response_value = 1;  // 回应
}

//申请组队信息
message MS_TeamDataReq{
	 uint64 user_id = 1;
	 uint64 room_id = 2;
	 uint32 extra_data = 3; // 人机对战，难易模式
}
message MS_TeamDataRsp{
	 MS_MatchTeamData data = 1;
}

// 更改玩家准备状态
message MS_ChangeReadyStateReq{
	 uint64 user_id = 1;
	 bool ready = 2;
}
message MS_ChangeReadyStateRsp{
}

// 请求选择英雄玩家
message MS_WaitingUserReq {
	 uint64 user_id = 1;
}
message MS_WaitingUserRsp {
	repeated uint64 user_id = 1;
}

// 二次确认
message MS_DoubleConfirm {
	 uint64 user_id = 1;
}

message MS_ReqUserDoubleConfirm {
	 uint64 user_id = 1;
	 bool flag = 2;
}
message MS_RspUserDoubleConfirm {
	 uint64 time = 1;
}

// 更改匹配模式
message MS_ChangeMatchType {
	 uint64 user_id = 1;
	 uint32 match_type = 2;
}

// 更换队伍的位置
message MS_ChangeTeamPosition {
	 uint64 user_id = 1; // 玩家ID
	 uint32 des_pos = 2; // 目标位置
	 uint64 des_user_id = 3; // 目标玩家
}

// 增加电脑
message MS_AddOneRobot {
	 uint64 user_id = 1; // 玩家ID
	 uint32 up_down = 2; //1是上面一排，down是下面一排
}

// 获取位置上玩家信息
message MS_ReqUserInPos {
	 uint64 user_id = 1;
	 uint32 pos = 2;
	 uint64 other_id = 3;
	 bool ok = 4;
}

// 返回位置上的玩家
message MS_RspUserInPos {
	 MS_ReqUserInPos data = 1;
}

// 选择英雄的时候，请求玩家的匹配模式
message MS_ReqUserMatchType {
	 uint64 user_id = 1;
	 uint32 match_type = 2;
	 uint32 ret_code = 3;
}
// 返回玩家的匹配模式
message MS_ReponseUserMatchType {
	 MS_ReqUserMatchType data = 1;
}

// 选择英雄的时候，请求玩家选择的英雄
message MS_ReqUserSelectHeroID {
	 uint64 user_id = 1;
	 uint64 hero_id = 2;
}
// 返回选择的英雄
message MS_RspUserSelectHeroID {
	 MS_ReqUserSelectHeroID data = 1;
}


service MatchService {
    rpc LoginService(RPC_LoginReq) returns (RPC_ReturnCode);

	//玩家登录MactchService
	rpc UserLoginMatchService(RPC_UserIdentify) returns (RPC_ReturnCode);
	//玩家登出MactchService
	rpc UserLogoutMatchService(RPC_UserIdentify) returns (RPC_ReturnCode);
	//请求匹配房间
	rpc MatchReq(MS_MatchReq) returns (MS_MatchRsp);
	//更改人机匹配模式
	rpc ChangeMatchType(MS_ChangeMatchType) returns (RPC_ReturnCode);
	//请求加入匹配队列
	rpc JoinMatchTeam(MS_JoinMatchTeamReq) returns (MS_JoinMatchTeamReponse);
	//离开匹配队伍
	rpc LeaveMatchTeam(MS_LeaveMatchTeamReq) returns (MS_LeaveMatchTeamRsp);
	//请求开始队伍匹配
	rpc BeginMatchTeam(MS_BeginMatchTeamReq) returns (MS_BeginMatchTeamRsp);
	//请求开始玩家自定义队伍匹配
	rpc BeginUserDefinedMatchTeam(MS_BeginMatchTeamReq) returns (RPC_ReturnCode);
	//取消匹配
	rpc CancelMatch(MS_CancelMatchReq) returns (MS_CancelMatchRespnse);
	//请求进入技能引导房间
	rpc ReqEnterIntoSkillGuide(MS_MatchReq) returns (MS_MatchRsp);
	//试玩英雄
	rpc HaveATry(MS_MatchReq) returns(MS_MatchRsp);
	//1v1PK
	rpc OneVsOne(MS_MatchReq) returns(MS_MatchRsp);
	//机器人打机器人
	rpc RobotVsRobot(MS_MatchReq) returns(MS_MatchRsp);

	//判断用户是不是在匹配中
	rpc CheckUserMatching(RPC_UserIdentify) returns(RPC_ReturnCode);

	//选择英雄
	rpc SelectHero(MS_SelectHeroReq) returns (MS_SelectHeroRsp);
	//选择符文
	rpc SelectSeal(MS_SelectSealReq) returns (MS_SelectSealRsp);
	//设置准备状态
	rpc SetReadyGame(MS_ReadyGameReq) returns (MS_ReadyGameRsp);
	//取得玩家组队信息
	rpc GetTeamData(MS_TeamDataReq) returns (MS_TeamDataRsp);
	//更改玩家准备状态
	rpc ChangeReadyState(MS_ChangeReadyStateReq) returns (MS_ChangeReadyStateRsp);
	//取得选择英雄的组队成员
	rpc GetWaitingRoomUser(MS_WaitingUserReq) returns (MS_WaitingUserRsp);
	//二次确认
	rpc DoubleConfirm(MS_DoubleConfirm) returns (RPC_ReturnCode);
	//获取玩家二次确认状态
	rpc ReqUserDoubleConfirm(MS_ReqUserDoubleConfirm) returns(MS_RspUserDoubleConfirm);
	//更改组队位置
	rpc ChangeTeamPosition(MS_ChangeTeamPosition) returns (RPC_ReturnCode);
	//增加一个机器人
	rpc AddOneRobot(MS_AddOneRobot) returns (RPC_ReturnCode);
	// 获取位置上玩家信息呢
	rpc ReqUserInPos(MS_ReqUserInPos) returns (MS_RspUserInPos);
	// 选择英雄的时候，请求玩家的匹配模式
	rpc ReqUserMatchType(MS_ReqUserMatchType) returns (MS_ReponseUserMatchType);
	// 选择英雄的时候，请求玩家选择的英雄
	rpc ReqUserSelectHeroID(MS_ReqUserSelectHeroID) returns (MS_RspUserSelectHeroID);
}

