import "Building.proto";
import "BaseType.proto";
import "item.proto";
import "Player.proto";
package msg;

//================================ 结构定义 =====================================
//国家
message CountryPoint
{
	 uint32 id	 	= 1; //唯一编号
	 uint32 posx 		= 2; //坐标x
	 uint32 posy 		= 3; //坐标y
}

//资源点(地图概况)
message ResourcePoint
{
	 uint32 id	 		= 1; //唯一编号
	 uint32 tid	 		= 2; //类型编号
	 uint32 level			= 3; //npc等级
	 uint32 posx 			= 4; //坐标x
	 uint32 posy 			= 5; //坐标y
	 uint32 owner			= 6; //占领者id
	 string ownername		= 7; //占领者名字
	 uint32 last_produce_time	= 8; //最后被占领时间
	 uint32 num                     = 9; //当前生产的资源量
         uint32 mine_itemid             = 10; //当前生产的道具id
	 uint32 npc_hp                  = 11; //npc当前血
         uint32 looter                  = 12; //抢夺者id
         string lootername              = 13; // 抢夺者名字
	 uint32 mine_state              = 14; //矿点状态 0未生产 1已经开始生产 2生产完毕
}

//玩家家园
message UserHomePoint
{
	 uint32 id		= 1; //玩家角色id
	 string name		= 2; //玩家姓名
	 uint32 level		= 3; //等级
	 uint32 posx		= 4; //玩家家园坐标x
	 uint32 posy		= 5; //玩家家园坐标y
	 uint32 state		= 6; //攻击等状态
	 uint32	familyid	= 7; //所在家族id, 0为不在家族
	 uint32 profession 	= 8; //所属种族
}

//家族祠堂
message FamilyTemplePoint
{
	 uint32	id		= 1; //家族id
	 string name		= 2; //家族名字
	 uint32	level		= 3; //等级
	 uint32 posx		= 4; //x
	 uint32 posy		= 5; //y
	 uint32 curhp		= 6; //curhp
	 uint32 station_num	= 7; //驻扎人数
	 uint32 protect_time	= 8; //保护时间
	 uint32 state		= 9; //修理等状态
}

//家族营地
message FamilyCampPoint
{
	 uint32	id		= 1; //家族id
	 string name		= 2; //家族名字
	 uint32	level		= 3; //等级
	 uint32 posx		= 4; //x
	 uint32 posy		= 5; //y
	 uint32 curhp		= 6; //curhp
	 uint32 station_num	= 7; //驻扎人数
	 uint32 state		= 8; //修理等状态
	 uint32 groom_food	= 9; //马车粮食
	 uint32 groom_silver	= 10; //马车银币
	 uint32 groom_level	= 11; //马车级别
}

//掉落物品
message ItemEntityInfo
{
	 uint32 id		= 1; //对象id
	 uint32 itemid		= 2; //物品id
	 uint32 itemnum		= 3; //物品数量
	 uint32 posx		= 4; //x
	 uint32 posy		= 5; //y
	 uint32 ownerid		= 6; //拥有者
	 uint32 state		= 7; //物品状态
	 uint32 droptime	= 8; //掉落时间
	 uint32 itemquality		= 9;	//掉落物品的品质
}

//马车对象
message HorseEntityInfo
{
	 ItemEntityInfo item	= 1;
	 uint32 food		= 2; //马车粮食
	 uint32 silver		= 3; //马车银币
	 uint32 level		= 4; //马车级别
}

//玩家基本信息
message EntityBasicInfo
{
	 uint32 charid			= 1;
	 uint32 posx			= 2; //x
	 uint32 posy			= 3; //y
	// uint32 hp			= 4;
	// uint32 max_hp			= 5;
	 string name			= 6;
	// uint32 sex			= 7;
	// uint32 face			= 8; //角色外观id
	 uint32 level			= 9;
	 uint32 bagcapacity		= 10; //包裹的百分比容量*100，银子或粮食的最大值
	//repeated GameConsume win_get		= 11; //UI显示获胜的资源奖励
	 uint32	familyid		= 12; //所在家族id, 0为不在家族
	 string familyname		= 13; //家族名字
	// uint32 state			= 14; //家族医生，马车，工具等等头衔状态
	// uint32	countryid		= 15; //国家信息
	 uint32  buildcharid  = 16;   //当前进入的建筑ID	
	 uint32  xposbuild    = 17;	//当前进入的建筑位置坐标x	
	 uint32  yposbuild    = 18;  //当前进入的建筑位置坐标y
	 uint32  profression  = 19;  //职业
}

//类型1小兵2人物3国王4建筑5BOSS6召唤7卫兵8NPC9资源点10资源点怪物11地上物品13场景家园14场景家族16场景家族营地17马车
message SceneEntityData
{
	 uint32 type			= 1; //类型
	 EntityBasicInfo player		= 2; //玩家2
	// FamilyCampPoint camp		= 3; //营帐16
	// FamilyTemplePoint temple	= 4; //祠堂14
	 UserHomePoint home		= 5; //家园13
	 ResourcePoint resource		= 6; //资源9
	 ItemEntityInfo item		= 7; //物品11
	// HorseEntityInfo horse		= 8; //马车17
}

//对象整体更新方式，MSG_PlayerPeekSceneEntity_CS的查询
message MSG_EntityUpdateAttribute_SC
{
	 SceneEntityData entity		= 1;
}

// 主动返回周围数据，MSG_PlayerWatchPos_CS的查询
message MSG_EyeLookatPosition_SC
{
	repeated SceneEntityData entity		= 1; //场景物件
}

//---------------------------------- entity属性更新 --------------------------------------
//客户端entity属性更新 
message MSG_SendEntityAttribute_SC
{
	 uint32 entitytype	= 1; //对象类型
	 uint32 entityid	= 2; //玩家entityid，现在是charid，以后会修改为场景中对象id 
	repeated PlayeAttribute info	= 3; //entity属性集合
}
//---------------------------------- 查看信息 --------------------------------------
//请求家园信息
message MSG_PlayerHomeData_CS
{
	 uint32 charid				= 1; //玩家角色id
}
//返回
message MSG_PlayerHomeData_SC
{
	 uint32 charid				= 1; //玩家角色id,核对作用
	repeated BuildingData builddata	 	= 2; //玩家建筑信息
	 uint32 is_home             = 3; //玩家是否在家 0在家，1不在家
	 uint32  hp                 = 4;
	 string  name               = 5;
	 uint32  sex                = 6;
	 uint32  level              = 7;
	repeated GameConsume consume        = 8; //资源奖励
	 EntityAttribute attr       = 9; //战斗属性
	 uint32  familyid           = 10; //家族id
}

//侦查家园
message MSG_PlayerDetectHome_CS
{
	 uint32 charid				= 1; //玩家角色id
}

//返回侦查结果
message MSG_PlayerDetectHome_SC
{
	 uint32 result              = 1; //0,成功 1，失败
	 uint32 sub_hp              = 2; //失败扣血，界面掉血显示
}
//----------------------------------  攻打   --------------------------------------
//请求发送攻打家园消息
message MSG_ReqAttackPlayerHome_CS
{
	 uint32 charid		= 1; //防御者角色id
}
//返回
message MSG_RetAttackPlayerHome_SC
{
	 uint32 result		= 1; //0成功 1失败 2数据错误 3相同家园
	 uint32 charid          = 2; //防御者
	 uint32 att_hp          = 3; //进攻者剩余HP
}
// 服务器端广播攻打消息
message MSG_NotifyAttackPlayerHome_SC
{
	 uint32 entityid 	= 1; //玩家entityid，现在是charid，以后会修改为场景中对象id
	 uint32 charid		= 2; //防御者角色id
}
//请求发送攻打家园消息结果
message MSG_PlayerHomeAttackResult_CS
{
	 uint32 charid		= 1; //防御者角色id
	 uint32 result 		= 2; //战斗结果 0失败 1胜利
	 uint32 att_hp		= 3; //攻打者剩余血量
	 uint32 def_hp	    = 4; //防御者剩余血量
}
//广播攻打家园结果
message MSG_NotifyPlayerHomeAttackResult_SC
{
	 uint32 entityid 	= 1; //玩家entityid，现在是charid，以后会修改为场景中对象id
	 uint32 charid		= 2; //防御者角色id
	 uint32 result 		= 3; //战斗结果 0失败 1胜利
}
//返回攻打者消息,胜者的奖励为增加，败者的奖励为减少
message MSG_PlayerHomeAttackResult_SC
{
	 uint32 result 		    	= 1; //战斗结果 0胜利 1失败
	repeated GameConsume consume 	    = 2; //资源奖励 获胜加入背包
	repeated PlayeAttribute att_attr	= 3; //攻打者剩余血量
}
//返回防御者信息
message MSG_PlayerHomeDefenseResult_SC
{
	 uint32 result 			   = 1; //战斗结果 0胜利 1失败
	 uint32 charid			   = 2; //攻打者id
	 string name			   = 3; //攻打者姓名
	repeated GameConsume consume 	   = 4; //资源奖励 获胜加入背包
	repeated PlayeAttribute def_attr   = 5; //防御者剩余血量
}

//----------------------------------回家离家-----------------------------------------

message MSG_NotifyPlayerHomeState_CS
{
	 uint32   state     =  1;  //0：回家； 1：离家
}
// 必须在场景中才会广播
message MSG_NotifyPlayerHomeState_SC
{
	 uint32 entityid 	=  1; //玩家entityid，现在是charid，以后会修改为场景中对象id
	 uint32   state     =  2;  //0：回家； 1：离家
}
//================================ 资源点相关 =====================================

//------------------------------- 抢夺 -----------------------------------

//请求能够抢夺的资源信息
message MSG_LootResourcePointInfo_CS
{
	 uint32 point_id = 1;
}
message MSG_LootResourcePointInfo_SC
{
	 uint32 point_id             = 1; //资源点
	 uint32 result   	     = 2; //0能够抢夺 1不能抢夺 
	 uint32 lootnum              = 3; //能够抢夺的数量(金币,装备,道具)
	 uint32 itemid 		     = 4; //生产的道具id
	 ResourcePoint data          = 5; //资源点信息
}
//请求抢夺
message MSG_LootResourcePoint_CS
{
	 uint32 type            = 1; //1抢夺，2占领 3打怪 4请求开始生产
	 uint32 point_id	= 2; //资源点id
}
//返回
message MSG_LootResourcePoint_SC
{
	 uint32 point_id 	= 1; //资源点id
         uint32 type            = 2; //1抢夺，2占领 3打怪 4请求开始生产
	 uint32 result 		= 3; //0胜利 1占领满次数 2占领失败
	 uint32 producenum      = 4; //抢夺获得的数量(金币,装备,道具)
        repeated uint32 equips          = 5; //抢夺获得装备
         uint32 itemid          = 6; //获得的道具id
         uint32 att_id          = 7; //攻击者id
         ResourcePoint data     = 8; //资源点信息
		 uint32 npc_subhp		= 9;	//资源点的伤血值
		 uint32  att_subhp		= 10;	//人的伤血值
	 uint32 cur_npc_id  	= 11;//result==18时 返回需要打的NPC
}
//收取资源
message MSG_CollectResource_CS
{
	 uint32 point_id	= 1; //资源点id
}
//返回
message MSG_ColletcResource_SC
{
	 uint32 point_id 	= 1; //资源点id
	 uint32 result 		= 2; //0收取成功
	 uint32 producenum      = 3; //采收获得的数量(金币,道具,装备)
        repeated uint32 equips          = 4; //采收获得的装备
         uint32 itemid          = 5; //产生的道具id
}
// 放弃
message MSG_AbandonResourcePoint_CS
{
	 uint32 point_id	= 1; //资源点id
}
// 返回
message MSG_AbandonResourcePoint_SC
{
	 uint32 point_id	= 1; //资源点id
	 uint32 result		= 2; //返回结果 0 成功 1 失败
}
//查看玩家占领的资源点信息列表
message MSG_WatchResourceInfo_CS
{
}
message ResourceInfo
{
	 uint32  point_id   = 1; //资源点id
	 uint32  xpos       = 2;
	 uint32  ypos       = 3;
	 uint32  tid        = 4; //资源点tid
}
//返回资源点信息
message MSG_WatchResourceInfo_SC
{
	repeated ResourceInfo   resource_info = 1;
}
//================================ 真人PK 相关 PVP================================

//------------------------------- 查看信息 -----------------------------------
//请求玩家基本信息
message MSG_PlayerBasicInfo_CS
{
	 uint32 charid = 1;
}

//返回玩家基本信息
message MSG_PlayerBasicInfo_SC
{
	 uint32  charid 		= 1;
	 uint32  hp     		= 2;
	 uint32  max_hp         = 3;
	 string  name   	    = 4;
	 uint32  sex   			= 5;
	 uint32  face   		= 6; //角色外观id
	 uint32  level  		= 7;
	 uint32  bagcapacity	= 9; //包裹的百分比容量*100，银子或粮食的最大值
	repeated GameConsume win_get  	= 10; //UI显示获胜的资源奖励
	 uint32  familyid		= 11; //所在家族id, 0为不在家族
	 uint32  countryid		= 12; //国家id
}

message MSG_PlayerDetailInfo_CS
{
	 uint32 charid	= 1; //玩家id, 赋值，填0
}
//返回玩家信息
message MSG_PlayerDetailInfo_SC
{

}

//---------------------------------攻击 -----------------------------------
//请求攻击
message MSG_AttackPlayer_CS
{
	 uint32 charid	= 1; //玩家id, 赋值，填0
}

//返回结果
message MSG_AttackPlayer_SC
{
	 uint32 state 		= 1; //0胜利 1失败 2内部错误 3 目标已死亡 4 距离超过限制 5 对方不在地图上 6对方不在线 7 有人死掉
	 uint32 current_hp  = 2; //胜利时剩余的血量,失败时为0
	repeated GameConsume  money	= 3; //成功后返回抢夺对方随身包裹的金钱 , 获胜加入背包
	repeated ItemBaseInfo items	= 4; //成功后返回抢夺对方随身包裹的道具
	 uint32	att_subhp = 5;	//攻击者减少的血量
	 uint32 def_subhp = 6;    //防御者减少的血量
}

//转发给被打玩家
message MSG_AttackedByOther_SC
{
	 uint32 entityid 	= 1; //玩家entityid，现在是charid，以后会修改为场景中对象id
	 uint32 state 		= 2; //0胜利 1失败
	 uint32 current_hp  = 3; //胜利时剩余的血量,失败时为0
	repeated GameConsume  money	= 4; //成功后返回抢夺对方随身包裹的金钱 , 获胜加入背包
	repeated ItemBaseInfo items	= 5; //成功后返回抢夺对方随身包裹的道具 
	 uint32 charid		= 6; //攻打者角色id
	 uint32	att_subhp = 7;	//攻击者减少的血量
	 uint32 def_subhp = 8;    //防御者减少的血量
}

//客户端发送死亡回家消息
message MSG_ReqGoHomeAfterDead_CS
{
	 uint32 type = 1;  //1回家 2原地复活
}
//返回
message MSG_RetGoHomeAfterDead_SC
{
	 uint32 result = 1; //0成功 1失败
	 uint32 type   = 2; //1回家 原地复活
}

//转发给被打玩家
message MSG_EntityAttackedByOther_SC
{	
	 uint32 attackerid	= 1; //攻打者角色id
	 uint32 defenderid 	= 2; //被攻击的玩家
	 uint32 state 		= 3; //0胜利 1失败	
}

message MSG_RetAttackChangeHP_SC
{
	 uint64 attackerid  = 1; //攻打者角色id
	 uint32 attackertype = 2;	//攻打者类型
	 uint64 defenderid  = 3; //被攻击的玩家
	 uint32 defendertype  = 4; //被攻击的玩家
	 uint32 curhp	= 5;	//被攻击者当前血量
	 uint32 subhp	= 6;	//被攻击者扣除的血量
}

//---------------------------------------------------------------------------
//---------------------------------进出场景 -----------------------------------
//Entity进入场景
message MSG_EntityEnterScene_SC
{
	 SceneEntityData entity		= 1;
}
// 离开场景
message MSG_EntityLeaveScene_SC
{
	 uint32 type				= 1; //类型
	 uint32 entityid			= 2; //玩家各个对象的ID
	 uint32 areaid				= 3; //区域ID
}
//---------------------------------------------------------------------------



//--------------------------------------------------------------------------
//---------------------------------家园副本---------------------------------
//请求可进入副本
message MSG_ReqEnterableEntity_CS
{
	 uint32 entityid		= 1; //可进入的建筑id
}
//返回
message MSG_RetEnterableEntity_SC
{
	 uint32 result		= 1; //0 正常 1.进入失败
}

//离开进入副本
message MSG_ReqLeaveEntity_CS
{
	 uint32 entityid		= 1; //可进入的建筑id
}
//返回
message MSG_RetLeaveEntity_SC
{
	 uint32 result		= 1; //0 正常 1.离开失败 2.主角未上阵英雄
}
//--------------------------------------------------------------------------

//世界公告 全部玩家
message MSG_RetWorldNotice_SC
{
	 string content 	= 1; //公告内容
	 uint32 time            = 2; //时间
}
//保存打开过的界面
message MSG_ReqFirstTimeOpenUI_CS
{
	 uint32 uiid            = 1; //界面id
}
//打开过的界面
message MSG_RetFirstTimeOpenUI_SC
{
	repeated uint32 uiid            = 1; //界面id
}
//返回可以打的NPC 
message MSG_RetAttackedNpc_SC
{
	repeated uint32 npcid           = 1; //npcid临界 同种颜色 小于等于可以打
}

