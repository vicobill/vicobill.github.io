syntax = "proto3";

package flare.game;

import "Building.proto";
import "Army.proto";
import "BaseType.proto";
import "item.proto";


// 玩家基本信息
message PlayerInfoData
{
	 string		name		 = 1;	//主角名称
	 uint32		accid	 	 = 2;	//账号id
	 uint32		vip			 = 3;	//vip等级
	 uint32   	charid 		 = 4;	//角色id
	 uint32     sex          = 5;   //性别  0:未定义，1:男，2:女
	 uint32     face         = 6;   //头像
	 uint32     xpos         = 7;   //坐标x
	 uint32     ypos         = 8;   //坐标y
	 uint32 	state		 = 9;  //玩家所在位置 0 不在大本营 1 在大本营
	 uint32     is_home      = 10;  //玩家是否在家园  0：在家园 1：不在家园
	 uint32     profression  = 11;  //职业 
	 uint32		familyid	 = 12;	//家族id
	 uint32 	familyduty	 = 13;	//家族职业
	 uint32 	countryid	 = 14; 	//国家id
	 uint32     buildcharid  = 15;   //当前进入的建筑ID
	 uint32     xposbuild    = 16; 	//当前进入的建筑位置坐标x
	 uint32     yposbuild    = 17;  //当前进入的建筑位置坐标y
	 uint32     bfamilysign  = 18;  //当日是否家族签到  
}

//基础属性
message PlayerBaseData
{
   	 uint32		level			= 1;	//等级
	 uint64		exp				= 2;	//经验
	 uint64		next_exp		= 3;	//升级所需经验
	 uint32		score			= 4;	//勋章值
	 string		guideid			= 5;	//新手引导id
	 uint32 	max_hp			= 6;	//最大血量
	 uint32     cur_hp          = 7;    //当前血
	 uint32 	attack			= 8;	//攻击力
	 uint32 	attack_speed	= 9;	//攻击速度
	 uint32 	move_speed		= 10;	//移动速度
	 uint32     stage_cost      = 11;   //关卡费用
	repeated GameConsume	   bag_info	= 13;	//随身包裹资源
	 uint32		bag_max_food    = 14;   //背包粮食上限
	 uint32		bag_max_silver  = 15;   //背包银子上限
	 uint32		bag_max_item    = 16;   //背包道具上限
	 uint32		family_drug		= 17;	//家族药量
	 uint32		family_tool		= 18;	//家族工具耐久度
	 uint32		role_level		= 19;	//角色等级
	 uint64		role_exp		= 20;	//角色经验
	 uint32 	cost       = 21; //打造值
	 uint32 	repuvalue      = 22; //威望值
	 uint32 	activepoint    = 23; //体力值

}

//玩家数据
message PlayerMainData
{
	 PlayerBaseData		basedata = 1;	//基础属性
	 PlayerInfoData		infodata = 2;	//主角信息
}

//家园信息
message PlayerHomeBase
{
	 uint32     charid			= 1;	//charid  (client: 1-3可不用处理)
	 string		nickname		= 2;	//名字
	 uint32     level	   	    = 3;	//等级
	 uint32		xhome			= 4;	//家园坐标x
	 uint32		yhome			= 5;	//家园坐标y
	 uint32     silver_protect	= 6;	//银子保护
	 uint32     food_protect	= 7;   //粮食保护
	repeated GameConsume 	   info 	= 8; 	//仓库资源
}

message PlayerHomeData
{
	 PlayerHomeBase		charhome	= 1;	//基本数据
	repeated BuildingData		builddata	= 2;	//建筑数据
	repeated ItemBaseInfo		items		= 3;	//物品
}

//请求玩家数据
message MSG_PlayerMainData_CS
{
	 uint32					playerid  = 1;	
	 uint32					mode	  = 2; //1:回基地, 2:攻打玩家, 3:访问玩家
}
//返回玩家数据
message MSG_PlayerMainData_SC
{
	 PlayerMainData 		maindata  = 1;	//玩家数据
	repeated BuildingData	   		builddata = 2;	//建筑数据
	repeated ArmyData	   			armydata  = 3;	//兵种等级
	repeated TrainQueue				queuedata = 4;	//训练队列信息
}
//返回玩家家园数据
message MSG_PlayerHomeMainData_SC
{
	 PlayerHomeData			homedata	= 1;
}

//玩家属性
message PlayeAttribute
{
	 uint32 type 	= 1; // 属性类型
	 uint32 value 	= 2; // 属性值
}
//返回客户端自己玩家改变的属性集合
message MSG_SendPlayerAttribute_SC
{
	 uint32 entityid 	= 1; //玩家entityid，现在是charid，以后会修改为场景中对象id 
	repeated PlayeAttribute  info = 2; //玩家属性集合
}

//请求发送玩家血量
message MSG_PlayerCurHp_CS
{
	 uint32 cur_hp	= 1; //当前血量
}
message MSG_PlayerCurHp_SC
{
	 uint32 result	= 1; //0成功 1失败
}

//----剧情相关字段---
message OperaField
{
	 string opera_type 	= 1; 
	 uint32 value	 	= 2;
}

//请求修改剧情字段
message MSG_ReqChangeOperaField_CS
{
	repeated OperaField fields = 1;
}
//返回
message MSG_RetChangeOperaField_SC
{
	 uint32 result = 1; //0成功 1失败
}

//请求剧情相关字段
message MSG_ReqOperaField_CS
{
}
//返回
message MSG_RetOperaField_SC
{
	repeated OperaField fields = 1;
}
//-------------------------------

//-------------------回血相关
//请求改变主角状态
message MSG_PlayerRoleState_CS
{
	 uint32 state	= 1; //改变玩家当前状态 0.不在回血状态 1.在回血状态
}
//返回
message MSG_PlayerRoleState_SC
{
	 uint32 result	= 1; //0成功 1失败
}

//请求立即完成回血
message MSG_PlayerImmediatelyRecovery_CS
{
}
//返回立即完成回血
message MSG_PlayerImmediatelyRecovery_SC
{
	 uint32 result	= 1; //0成功 1失败
}

//客户端上线请求回血相关字段
message MSG_ReqPlayerHpAffairChange_CS
{
}
//发送回血变化,上线和tick发生变化时向客户端推送
message MSG_RetPlayerHpAffairChange_SC
{
	 uint32 cur_hp 		= 1; //当前血量
	 uint32	speed  		= 2; //回血速度 
	 uint32 is_recovery	= 3; //是否在回血  0不在回血，1在回血
}

//完成回血
message MSG_PlayerFinishRecovery_CS
{
}
//返回完成回血 //失败再返回 MSG_RetPlayerHpAffairChange_SC
message MSG_PlayerFinishRecovery_SC
{
	 uint32 result	= 1; //0成功 1失败	
}
//----------------------------------------------------------------------------------------

//购买资源
message MSG_PlayerBuyResource_CS
{
	 uint32					type   	  = 1;	//购买资源类型 1金币 2木材
	 uint32					gemnum	  = 2; 	//消耗钻石数
}
//返回购买资源
message MSG_PlayerBuyResource_SC
{

}
//随机姓名
message MSG_PlayerCreateRandName_SC
{
    repeated string  malename = 1;            //随机10个男性名字
    repeated string  femalename = 2;          //随机10个女性名字
}

// 属性结构
message EntityAttribute
{
	 int32 curhp 				= 1;		//0当前生命，在运算过程中，可能是HP最大值改变，而当前值并不改变，所以让HP多一个属性
	 int32 hp 					= 2;		//1生命
	 int32 attack 				= 3;		//2攻击
	 int32 defense 				= 4;		//3防御
	 int32 movespeed			= 5;		//4移动速度
	 int32 attackspeed			= 6;		//5攻击速度
	 int32 crit					= 7;		//6暴击
	 int32 hit					= 8;		//7命中
	 int32 dodge				= 9;		//8闪避
	 int32 swordhurtadd			= 10;		//9刀伤害增加
	 int32 swordhurtreduce		= 11;		//10刀伤害减免
	 int32 spearhurtadd			= 12;		//11枪伤害增加
	 int32 spearhurtreduce		= 13;		//12枪伤害减免
	 int32 arrowhurtadd			= 14;		//13箭伤害增加
	 int32 arrowhurtreduce		= 15;		//14箭伤害减免
	 int32 attmin				= 16;		//最小物理攻击攻击
	 int32 attmax				= 17;		//最大物理攻击攻击
	 int32 str					= 18;		//力量
	 int32 inte					= 19;		//智力
	 int32 dex					= 20;		//敏捷
	 int32 spi				    = 21;		//精神
	 int32 con					= 22;		//体质
	 int32 pdefence				= 23;		//物防
	 int32 mdefence				= 24;		//魔防
	 int32 mattmin				= 25;		//最小魔法攻击
	 int32 mattmax				= 26;		//最大魔法攻击
}
// 向客户端同步战斗属性消息
message MSG_NotifyBattleAttribute_SC
{
	 EntityAttribute attr			= 1;	//战斗属性
	 uint32  heroid 				= 2;	//英雄的唯一id
}

// 给玩家发送提示信息
message MSG_SendReportInfo_SC
{
     uint32  type       = 1;  //type=1 右边公告,2 中间公告,3...
     string  content    = 2;  //公告内容
}

//*********************************战斗统计*****************************

//请求战斗统计
message MSG_ReqFightCalc_CS
{
}

message FightCalc
{
     uint32       id            = 1;  //玩家id
     string       name          = 2;  //玩家姓名
     uint32       num           = 3;  //攻击次数
     uint32       success_num   = 4;  //成功次数
     uint32       food          = 5;  //掠夺资源
     uint32       silver        = 6;
}
//返回战斗统计
message MSG_ReturnFightCalc_SC
{
    repeated FightCalc   def_fight_calc =  1; //被击统计 
    repeated FightCalc   att_fight_calc =  2; //进攻统计
}
//**********************************************************************
////////////////////////////////坐标收藏/////////////////////////////////////

message PosCollectInfo
{
     uint32     type          = 1;  // 收藏类型 1,常用 2，朋友，3，敌人 
     uint32     xpos          = 2;
     uint32     ypos          = 3;
     string     posname       = 4;
     uint32     posid         = 5;
}
//客户端请求收藏,编辑坐标
message MSG_PlayerPosCollect_CS
{
     uint32         type        = 1; //1，收藏  2，编辑
     PosCollectInfo     pos_collect = 2;
}

//是否收藏，编辑成功
message MSG_PlayerPosCollect_SC
{
     uint32    result = 1; //0,收藏成功 1,编辑成功 2，编辑失败 3 ,收藏坐标重复  4,收藏失败，达到上限
     uint32    posid  = 2; //收藏成功返回posid
}
//请求坐标列表
message MSG_ReqPosCollectList_CS
{
}

//返回坐标列表
message MSG_ReqPosCollectList_SC
{
    repeated PosCollectInfo    pos_collect = 1;
}

//删除坐标
message MSG_RemovePosCollect_CS
{
     uint32    posid = 1;
}

//返回删除坐标结果
message MSG_RemovePosCollect_SC
{
     uint32    result = 1; //0,成功 1，失败
}

//操作失败返回提示消息
message MSG_FailMessage_SC
{
	 string   message = 1;
}

//查看其他玩家信息
//装备信息
message stOtherEquipInfo
{
	 uint32 equipid    = 1;
	 uint32 durability = 2;
	 uint32 quality    = 3;
}
message MSG_WatchOtherInfo_CS
{
	 uint32 charid = 1;
}
message MSG_WatchOtherInfo_SC
{
	 uint32           charid             = 1;
	 string           name               = 2;
	 uint32           sex                = 3;
	 uint32           level              = 4;
	 uint32           cur_hp             = 5;
	 uint32           face               = 6;
	repeated stOtherEquipInfo cur_equip_info     = 7;
	repeated stOtherEquipInfo second_equip_info  = 8;
	 uint32           countryid          = 9;
}


//=========游戏意见相关==========
//玩家提交建议
message MSG_ReqSubmitSuggestion_CS
{
	 string suggestion	= 1; //意见字段
}
message MSG_RetSubmitSuggestion_SC
{
	 uint32 result = 1; //0 成功 1失败
}

//返回人物角色等级信息
message MSG_RoleAutoExp_SC 
{
	 uint32 rolelevel = 1; //人物等级
	 uint64 roleexp = 2;	//人物经验
}

//角色请求升级
message MSG_ReqUpgradeRoleLevel_CS
{
}

//角色选择职业
message MSG_ReqProfression_CS
{
	 uint32 profression = 1; //角色职业
}

//返回选职业是否成功
message MSG_RetProfression_SC
{
	 uint32 result = 1; //0 成功  1 失败
}

//返回主基地升级杀怪数量
message MSG_RetNextLevelMonster_SC
{
	 uint32 npcid 		= 1;       //需要杀的NPC
	 uint32 num   		= 2;       //已经杀的数量
	 uint32 need_num        = 3;       //需要杀的数量
	 uint32 level           = 4;       //当前等级
}

//广播其他玩家自己复活
message MSG_NotifyPlayerRelive_SC
{
	 uint32           charid             = 1; //复活的玩家
	 uint32           cur_hp             = 2; //复活后的现在血量
	 uint32           max_hp             = 3; //复活后的最大血量
}

//请求快速购买道具
message MSG_ReqQuickBuy_CS
{
	 uint32 type          = 1;   //购买的类型 1道具
	 uint32 itemid        = 2;   //购买的道具id
	 uint32 num           = 3;   //购买的数量
	 uint32 silver 	      = 4;   //花费的金币
	 uint32 gold          = 5;   //花费的钻石
}

//返回快速购买
message MSG_RetQuickBuy_SC
{
	 uint32 result        = 1;   //返回结果 0成功 1数据错误，配置错误等等,2金币或钻石不够,3仓库满
	 uint32 type          = 2;   //快速购买的类型
}

message defence_step_info
{
	 uint64 defheroid = 1;	//防御英雄id
	 uint32 defsubhp = 2;	//防御者本次血量减少
	 uint32 defremainhp = 3;//防御者剩余血量
}

//攻击每一回合信息
message attack_step_info
{
	 uint64 attheroid = 1;	//攻击者的英雄id(唯一id)
	 uint32 attskillid = 2;	//攻击者使用技能
	
	 uint64 defheroid = 3;	//防御英雄id
	 uint32 defsubhp = 4;	//防御者本次血量减少
	 uint32 defremainhp = 5;//防御者剩余血量

	 uint32  order = 6;		//属于第几回合攻击
	 uint32  type  = 7;		//type=0是原来默认攻击，type=1是技能攻击，type=2是治疗
	 uint32  isattacker = 8; // 0是自己，1是敌方发动

	repeated defence_step_info defence_info = 9;	// 防守者信息
}

//英雄攻击阵容
message hero_fight_power
{
	 uint32 heroid = 1;
	 string heroname = 2;
	 uint32 maxfight = 3;
	 uint32 minfight = 4;
	 uint32 curhp = 5;
	 uint32 battlepos = 6;
	 uint32 maxhp = 7;
	 uint32 id = 8;
	 uint32 level = 9;
}

//攻击胜利方获得的奖励
message attack_win_award
{
	 uint32 objectid = 1;	//道具id
	 uint32 objectnum = 2;	//道具数量
	 uint32 level = 3;		//道具等级
}

//攻击战报信息
message MSG_AttackBattleReport_SC
{
		 uint64 attid = 1;			//攻击者角色id
		 string attname = 2;		//攻击者角色名
		 uint32 attprofession = 3;	//攻击者职业
		repeated hero_fight_power attherofight = 4; //攻击者英雄阵容

		 uint64 defid = 5;
		 string defname = 6;
		 uint32 defprofession = 7;
		repeated hero_fight_power defherofight = 8;	//防御者英雄阵容

		repeated hero_fight_power attherohp = 9;	//攻击者英雄剩余血量
		repeated hero_fight_power defherohp = 10;	//防御者英雄剩余血量

		 uint32 attacktime = 11;
		 uint32 result = 12;	//1:成功 2:失败
		
		repeated attack_step_info attckstep = 13;
		repeated attack_win_award awardinfo = 14;

		 uint32 attacktype = 15;	//攻击类型0:人打人 1:人打怪或资源
}

message MSG_ReqHeroAttribute_CS
{
	 uint32 heroid = 1;	//请求英雄的唯一id	
}
/////////////////////////////////////////////////////////////////////////////
