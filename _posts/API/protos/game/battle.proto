/* 战斗
   - 获取所有战场信息
   - 进入某个战场
   - 退出某个战场
   - 参战
   - 观战
   - 竞猜下注
   - 获取战场内战斗方信息
 */
syntax = "proto2";

package msg;

import "branch_0/msg_def.proto";
import "branch_0/login.proto";

// 房间状态
enum EnumRoomState{
	RoomState_Prepare = 1;
	RoomState_StepRunning = 2;
	RoomState_StepEnding = 3;
	RoomState_Closing = 4;
	RoomState_End = 5;
}

// 服务器推送房间信息
message MSG_RoomInfoAndState{
	 uint64 room_id = 1;
	 MSG_RoomState state = 2;
	 MSG_RoomInfo info = 3;
	 MSG_IAmViewer view = 4;
}

// 客户端加载进度
message MSG_RoomLoadProgress{
	 uint64 progress = 2;
}

// 通知客户端加载进度
message MSG_BroadcastRoomLoadProgress{
	 uint64 user_id = 1;
	 uint64 progress = 2;
}

// 完成进入房间
message MSG_IntoRoom{
}

// 房间状态
message MSG_RoomState{
	 uint64 current_tick = 1;	//当前tick
	repeated uint64 step_user_id = 3;
	 uint64 step_start_tick = 4;
	 uint64 step_finish_tick = 5;
	 uint32 room_state = 6;	//EnumRoomState
	 uint32 wind = 7;
	 uint64 score_a = 8; //1队分数
	 uint64 score_b = 9; //2队分数
	 uint64 max_score = 10;
	 uint64 room_kind = 11;
	 bool show_exit_btn = 12;
	 string game_rule = 13;
}

message MSG_ItemInfo {
	 uint64 object_id = 1;
	 uint64 item_id = 2;
	 uint64 master_id = 3;
	 T_Pos pos = 4;
}

// 房间信息
message MSG_RoomInfo{
	repeated MSG_RoomUserInfo users = 1;
	repeated MSG_RoomObjectInfo booms = 4;
	repeated MSG_ItemInfo items = 5;
	 uint64 total_tick = 2;	//总tick
	 string scene_name = 3;	//场景名
}

// 角色状态
message MSG_UserBuffer{
	 uint64 unique_id = 1;
	 uint64 buff_id = 2;
	 uint64 life_step = 3;
	 float buf_value1 = 4;
	 uint64 buf_owner_id = 5;
}

//我是观战的人
message MSG_IAmViewer{
	 bool view = 1;
	 uint64 view_id = 2;	//观战谁
}	

// 角色信息
message MSG_RoomUserInfo{
	 uint64 user_id = 1;
	 string user_name = 2;
	 T_Pos pos = 4;
	 uint32 weapon_id = 5;
	 uint32 team = 6;
	 int32 cur_hp = 7;
	 int32 max_hp = 8;
	 uint64 object_id = 9;
	 bool can_fire = 10;
	 uint64 kill_count = 11;
	 uint64 death_count = 12;
	repeated T_WeaponData weapons = 13;
	 float score = 14;
	 uint64 hero_id = 15;
	 uint64 skin_id = 16;
	repeated MSG_UserBuffer buffs = 17;
	 uint64 ass_kill_count = 18; //助攻
	repeated uint64 skin_ids = 19; // 已经有的皮肤
	 int32 direct = 20;
}

//炸弹信息
message MSG_RoomObjectInfo{
	 uint64 object_id = 1;
	 uint64 boom_id = 2;
	 T_Pos pos = 3;
	 uint64 ready_time = 4;
	 uint64 boom_time = 5;
	 bool activity = 6;
	 bool explosion = 7;
}

message MSG_UpdateUserBuff{
	 uint64 user_id = 1;
	 uint64 op = 2;	//1:加 2:改 3:删
	 MSG_UserBuffer buff = 3;
}

// 同步角色移动
message MSG_SyncUserMove{
	 T_Vector3 operation = 1;	//操作
	 T_Pos user_pos = 2;
	 uint64 current_tick = 3;	//当前tick
	 T_Vector3 move_speed = 4;	//真实移动速度
}
message MSG_BroadUserMove{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 T_Pos user_pos = 3;
	 T_Vector3 operation = 4;
	 uint64 object_id = 5;
	 T_Vector3 move_speed = 6;	//真实移动速度
}


enum EnumUserPos{
	Teleport = 1;
	Twins = 2;
	Assassinate = 3;
	ExchangePos = 4;
	MoveToTarget = 5;
}
//设置玩家位置
message MSG_SyncSetUserPos{
	 uint64 user_id = 1;
	 T_Pos user_pos = 2;
	 uint64 flag = 3;
	 uint64 skill_id = 4;
}

// 同步角色操作武器
message MSG_SyncOperateWeapon{
	 uint32 weapon_id = 1;//配置表中的武器编号;
	 T_Pos start_pos = 3;//武器初始发射位置;
	 T_Vector3 dir = 4;//角度&力度;
	 uint64 object_id = 5; //目标
}
message MSG_BroadOperateWeapon{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 T_Pos user_pos = 3;
	 uint32 weapon_id = 4;//配置表中的武器编号;
	 T_Pos start_pos = 5;//武器初始发射位置;
	 T_Vector3 dir = 6;//角度&力度;
	 uint64 bullet_id = 7;//服务器生成的唯一炮弹ID;
	 uint64 watch_id = 8;	//用这个客户端做计算
}

// 场景内所有的玩家客户端主动告知炮弹爆炸位置
message MSG_SyncBoomPos{
	 uint64 bullet_id = 1;//服务器生成的唯一炮弹ID;
	 T_Pos pos = 2; 
}

// 服务器仲裁后返回挖洞位置
message MSG_AckHolePos{
	 uint64 current_tick = 1;	//当前tick
	 uint64 bullet_id = 2;
	 T_Pos pos = 3;//世界位置;
	 float hole_radius = 4;//挖坑半径;
	 bool hit_user = 5;	//是否击中角色
}

// 服务器通知删除炮弹
message MSG_BroadRemoveBoom{
	 uint64 bullet_id = 1;//服务器生成的唯一炮弹ID;
}

// 同步跳跃开始消息
message MSG_SyncJump{
	 T_Pos user_pos = 3;//世界位置;
}
message MSG_BroadJump{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 T_Pos user_pos = 3;//世界位置;
}

// 同步跳跃结束消息
message MSG_SyncJumpEnd{
	 uint64 user_id = 2;
	 T_Pos user_pos = 3;//世界位置;
}
message MSG_BroadJumpEnd{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 T_Pos user_pos = 3;//世界位置;
}

// 同步HP改变
message MSG_BroadCastHp{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 int32 max_hp = 3;
	 int32 current_hp = 4;
	 int32 change_hp = 5;	//HP改变了
	 uint64 object_id = 6;
	 uint64 flag = 7;
}

// 同步死亡
message MSG_BroadDeath{
	 uint64 current_tick = 1;	//当前tick
	 uint64 user_id = 2;
	 uint64 object_id = 3;
	 uint64 kill_id = 4;
}

// 死亡贡献分数
message MSG_DeathScore {
	 uint64 user_id = 1;
	 uint64 score = 2;
}

// 死亡贡献豆
message MSG_DeathPoint {
	 uint64 from_id = 1;
	 uint64 to_id = 2;	
	 uint64 score = 3;
}

//比赛结果数据
message ResultStruct{
	 uint64 unique_id = 1;
	 uint64 user_id = 2;
	 string user_name = 3;
	 uint64 team = 4;//助攻
	 uint64 ass_kill_count = 5; //助攻
	 uint64 kill_count = 6;//击杀数
	 uint64 damage = 7;//伤害
	 uint64 death_count = 8;//死亡数
	 float score = 9;//评分
	 bool mvp = 10;
	
	repeated T_ItemData items = 11;
	 T_GradeData old_grade = 12;
	 T_GradeData new_grade = 13;

	 uint64 continue_win_add_brave = 14;
	 uint64 game_rank_add_brave = 15;
	 int32 grade_change = 16;
	 uint32 hero_id = 17;
	 uint32 skin_id = 18;
	 uint32 not_move_round = 19; // 未移动回合
}

// 同步比赛结果
message MSG_BroadResult{
	repeated ResultStruct datas = 1;
	 uint32 win_team = 3;
	 uint64 score_a = 4; //1队分数
	 uint64 score_b = 5; //2队分数
	 uint64 unique_id = 6; // 唯一ID(0, 表示比赛完计算，有值表示玩家请求)
	 uint32 battle_data_type = 7; //比赛数据类型
	 uint64 game_id = 8;	//比赛唯一ID
	 uint64 game_kind = 9;		
	 uint64 game_start_time = 10;	
	 uint64 game_end_time = 11;	
	 uint32 match_type = 12; // 服务器内部匹配类型
}

// 对物体施加力
message MSG_BroadForceOnObject{
	 uint64 object_id = 1;
	 T_Pos object_pos = 2;//世界位置;
	 T_Vector3 force = 3;
}

// 对物体们施加力
message MSG_BroadForceOnObjects{
	repeated MSG_BroadForceOnObject data = 1;
}

// 返回施力物体静止位置
message MSG_SyncFlyingObjectPos{
	 uint64 current_tick = 5;	//当前tick
	 uint64 object_id = 1;
	 T_Pos object_pos = 2;//世界位置
	 bool stop_move = 3;//是否静止
	 T_Vector3 speed = 4;
}
message MSG_BroadFlyingObjectPos{
	 uint64 current_tick = 5;	//当前tick
	 uint64 object_id = 1;
	 T_Pos object_pos = 2;//世界位置
	 bool stop_move = 3;//是否静止
	 T_Vector3 speed = 4;
}

// 挖洞的历史数据
message MSG_HoleHistoryData{
	repeated T_HoleData data = 1;
}

//结束我的回合
message MSG_FinishMyStep{
}

//请求/返回物体位置
message MSG_RequireObjectPos{
	 uint64 object_id = 1;
}
message MSG_ReturnObjectPos{
	 uint64 object_id = 1;
	 T_Pos object_pos = 2;
}

//表现死亡自爆动作
message MSG_ShowDeathBoom{
	 uint64 user_id = 1;
	 T_Pos user_pos = 2;
}

enum EnumUserAttribute{
	CanFire = 1;	//是否可以开炮
	KillCount = 2;	    //得分
	DeathCount = 3;	//被击杀数
	Damage = 4;
	AssKillCount = 5;
	CanMove = 6;
	HealOther = 7;
	DamegeSelf = 8;
	Score = 9;	//评分
}
//更新属性
message MSG_UpdateAttribute {
	 uint64 object_id = 1;
	 uint32 attr_type = 2;
	 uint64 attr_value = 3;
}

//请求/返回一个随机位置
message MSG_RequireRoomLocation {
	 uint64 require_id = 1;
}
message MSG_ReturnRoomLocation {
	 uint64 require_id = 1;
	 T_Pos object_pos = 2;
}

//角色复活
message MSG_RelivePlayer {
	 uint64 object_id = 1;
	 MSG_RoomUserInfo info = 2;
}

//更新武器数据
message MSG_UpdateWeaponData {
	 uint64 object_id = 1;
	 T_WeaponData data = 2;
}

//发送表情
message MSG_SyncEmoj {
	 uint64 emoj_id = 1;
}
message MSG_BroadcastEmoj {
	 uint64 object_id = 1;
	 MSG_SyncEmoj emoj = 2;
}

message  MSG_SendChatList{
	repeated T_ChatData msg = 1;
}

//C->S 请求英雄消息列表
message MSG_RequireChatList{
	 uint64 hero_id = 1;
}
//S->C 返回英雄消息列表
message MSG_ReplyChatList{
	 uint64 hero_id = 1;
	repeated T_ChatData msg = 2;
}
//C->S 设置英雄消息列表
message MSG_SetChatList{
	 uint64 hero_id = 1;
	repeated T_ChatData msg = 2;
}
//C->S 重置英雄消息列表
message MSG_ResetChatList{
	 uint64 hero_id = 1;
}
	

//发送聊天消息
message  MSG_SendRoomChat{
	 uint64 sys_msg_id = 2;

	 uint64 channel = 4;	//0:自己 1:全体
	 string msg_str = 5;
	 uint32 chat_type = 6;  //复用的原来的聊天，0表示原来，1表示显示在界面上的
}

message  MSG_BroadcastRoomChat{
	 uint64 object_id = 1;
	 uint64 sys_msg_id = 2;

	 uint64 channel = 4;	//0:自己 1:全体
	 string msg_str = 5;
	 uint32 chat_type = 6;  //复用的原来的聊天，0表示原来，1表示显示在界面上的
	 string client_msg_str = 7;
}

//==========================服务器同步状态==========================
message MSG_BroadcastUpdateObjectState{
	 uint64 current_tick = 1;	//当前tick
	 uint64 object_id = 2;
	 T_Vector3 pos = 3;	//位置
	 T_Vector3 speed = 4;	//速度
	 int32 direct = 5;	//朝向
	 uint32 state = 6;
}

//每逻辑帧一条消息
message MSG_FrameDate{
	 uint64 current_tick = 1;	//当前tick(ms)
	 uint64 frame_count = 2;	//游戏开始的帧数
	repeated MSG_BroadcastUpdateObjectState datas = 3;
}

message MSG_UserOperation{
	 uint64 operate_code = 1;//操作码
	 T_Vector3 param1 = 2;
	 uint64 param2 = 3;
	 uint64 param3 = 4;
}

//击中某人
message MSG_BoomHitUser{
	 uint64 boomer_id = 1;
	 uint64 target_id = 2;
	 uint64 skill_id = 3;
}

//离开房间C->S
message MSG_ExitRoom{
	 bool skip_skill_guide = 1;
}

//离开房间S->C
message MSG_ExitRoomDirectly{
	
}

message MSG_AddItem{
	 MSG_ItemInfo item = 1;
}

message MSG_PauseResumeGame{
	 bool pause = 1;
}

message MSG_ShowDamage {
	 uint64 atter_id = 1;	// 攻击者
	 uint64 user_id = 2;	// 被攻击者
	 int32 damage = 3;		// 伤害
	 uint64 skill_id = 5;
	 uint64 flag =6;	
}

//召唤敌方角色
message MSG_SummonEnemyUser {
	 uint64 hero_id = 1;	
	 uint64 skin_id = 2;
	 string name = 3;
	 uint64 team_id = 4;
	 uint64 pos_x = 5;
	 uint64 pos_y = 6;
	 uint64 enemy_phase = 7;
}

//客户端设置角色位置
message MSG_ClientSetUserPos {
	 uint64 user_id = 1;
	 uint64 pos_x = 5;
	 uint64 pos_y = 6;
}
//=============TEST_CMD=============
message MSG_TestShowLine{
	repeated T_Vector3 lines = 1;
}

//客户端通知服务器原样转发的消息;
message MSG_ClientNeedServerRouter{
	 uint64 user_id = 1;	// 发消息的玩家
	 uint32 client_id = 2;	// 接受消息的玩家
	repeated bool bool_args = 3;
	repeated uint64 uint_args = 4;
	repeated string string_args = 5;
}

message MSG_ServerRouterToClient{
	 MSG_ClientNeedServerRouter datas = 1;
}


////////////////////////////////////////////////////////////

message RecordGameData {
	 uint64 tick = 1;
	 uint64 cmd_index = 2;
	 bytes data = 3;

	 MSG_AckHolePos                   cmd_MSG_AckHolePos          = 10;
	 MSG_BoomHitUser                  cmd_MSG_BoomHitUser         = 11;
	 MSG_ShowDamage                   cmd_MSG_ShowDamage          = 12;
	 MSG_RoomObjectInfo               cmd_MSG_RoomObjectInfo      = 13;
	 MSG_UpdateUserBuff               cmd_MSG_UpdateUserBuff      = 14;
	 MSG_ServerRouterToClient         cmd_MSG_ServerRouterToClient= 15;
	 MSG_AddItem                      cmd_MSG_AddItem             = 16;
	 MSG_SyncSetUserPos               cmd_MSG_SyncSetUserPos      = 17;
	 MSG_RelivePlayer                 cmd_MSG_RelivePlayer        = 18;
	 MSG_BroadRemoveBoom              cmd_MSG_BroadRemoveBoom     = 19;
	 MSG_UpdateAttribute              cmd_MSG_UpdateAttribute     = 20;
	 MSG_BroadCastHp                  cmd_MSG_BroadCastHp         = 21;
	 MSG_BroadcastEmoj                cmd_MSG_BroadcastEmoj       = 22;
	 MSG_BroadcastRoomChat            cmd_MSG_BroadcastRoomChat   = 23;
	 MSG_DeathScore                   cmd_MSG_DeathScore          = 24;
	 MSG_DeathPoint                   cmd_MSG_DeathPoint          = 25;
	 MSG_BroadForceOnObject           cmd_MSG_BroadForceOnObject  = 26;
	 MSG_BroadDeath                   cmd_MSG_BroadDeath          = 27;
	 MSG_BroadOperateWeapon           cmd_MSG_BroadOperateWeapon  = 28;
	 MSG_RequireRoomLocation          cmd_MSG_RequireRoomLocation = 29;
	 MSG_ShowDeathBoom                cmd_MSG_ShowDeathBoom       = 30;
																  
	 MSG_RoomState                    cmd_MSG_RoomState           = 31;
	 MSG_RoomInfoAndState             cmd_MSG_RoomInfoAndState    = 32;
	 MSG_BroadResult                  cmd_MSG_BroadResult         = 33;
	 MSG_IntoRoom                     cmd_MSG_IntoRoom            = 34;
																 
	 MSG_FrameDate                    cmd_MSG_FrameDate           = 35;
															   
	 MSG_NotifyRecentNews             cmd_MSG_NotifyRecentNews    = 36;
}

message RecordGame {
	 uint64 game_id = 1;
	 uint64 game_kind = 2;		
	 uint64 game_start_time = 3;	
	 uint64 game_end_time = 4;	
	
	repeated RecordGameData datas = 10;
}

message MSG_RequireRecordGame{
	 uint64 game_id = 1;
}