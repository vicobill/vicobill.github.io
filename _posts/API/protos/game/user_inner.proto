syntax = "proto2";

package msg;

import "gogo/gogo.proto";

import "social_inner.proto";
import "match_inner.proto";
import "msg_def_inner.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.gostring_all) = true;

option (gogoproto.populate_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unsafe_marshaler_all) = false;
option (gogoproto.unsafe_unmarshaler_all) = false;

//A关注了B
message US_NotifyFollowMe{
     RPC_UserIdentify notify_user = 1;
     SS_UserSocialData user_a = 2;
     SS_UserSocialData user_b = 3;
     uint64 type = 4; // A->B 1是给A发，2是给B发
     uint64 new_follow_me_num = 5;  // B的新粉丝数量
     uint32 failed = 6;   // 0 是关注成功，1是关注失败
}

message US_NotifyMatchTeamData{
     RPC_UserIdentify me = 1;
     MS_MatchTeamData data = 2;
}

message US_NotifyRoomID{
     uint64 user_id = 1;
     uint64 room_id = 2;
}

message US_NotifyLeaveMatchTeam{
     uint64 user_id = 1;
     uint64 leave_user_id = 2;
     MS_MatchTeamData data = 3;
     bool kick = 4;     // 被踢
}

message US_NotifyBeginMatch{
     uint64 user_id = 1;
}

message US_NotifyCancelMatch{
     uint64 user_id = 1;
}

message US_WaitingUser{
	 uint64 user_id = 1;	//角色ID
	 string user_name = 2;	//角色名
	 uint64 hero_id = 3;	//英雄ID
	 bool ready = 4;		//准备好
	 uint64 team = 5;		//1,2队
     uint64 loc = 6;		//位置
	 uint64 skin_id = 7;	//皮肤ID
     RPC_BaseUserData base_data = 8; // 基础数据
     bool robot = 9;        //是否机器人
}
message US_WaitingRoomData{
     uint64 notify_id = 1;
    repeated US_WaitingUser users = 2;
     uint64 start_game_time = 3;
     uint32 room_kind = 4;
     bool hero_free_match = 5;		//是否限免英雄匹配
     uint32 match_type = 6; 
}

message US_NotifySelectState{
     uint64 notify_id = 1;
     uint64 user_id = 2;
     uint64 hero_id = 3;
     bool ready = 4;
     uint64 skin_id = 5;     // 皮肤ID
     uint32 notify_type = 6; // 通知类型
}

message US_NotifyUpdataUserState{
     uint64 notify_id = 1;
     uint64 user_id = 2;
     uint64 state = 3;
     uint32 notify_type = 4;
}

//A最近跟B组队玩游戏
message US_NotifyRecentContact{
     RPC_UserIdentify notify_user = 1;
     SS_UserSocialData user_b = 2;
}

// 获取游戏结束的时候，发送所有组员
message US_DealWithTeamMember {
    repeated uint64 member_id = 1; //组员ID
}

// 更新玩家最新事件
message US_UpdataUserRecentNews {
     uint64 user_id = 1;
     RPC_RecentNews news = 2; // 最近动态
}

message US_NotifyMatchInfo {
     uint64 user_id = 1;
     uint64 wait_count = 2;
     uint32 match_type = 3;
}

message US_ChatWithMe {
     RPC_ChatMessageData data = 1; // 详细聊天信息
	 RPC_ChatUserData user_a = 2;	
	 RPC_ChatUserData user_b = 3;
     uint32 chat_type = 4;
}

message US_NotifyMailNum {
     uint64 user_id = 1;
     uint32 num = 2;
}

message US_NotifyOpenMailBox {
     uint64 user_id = 1;
     bool open = 2;
}

message US_ObtainMail {
     uint64 user_id = 1;
    repeated RPC_ItemData items = 2;
}

message US_SendDoubleConfirmUser {
     uint64 user_id = 1;
     uint32 match_type = 2;
    repeated RPC_ExpandBaseUserData user_data = 4;
}

// 通知某个玩家二次确认，点亮头像
message US_AfterDoubleConfirm {
     uint64 user_id = 1;
     uint64 notify_id = 2;
}

//通知二次确认界面
message US_DoubleConfirmNum {
     uint64 user_id = 1;
     uint32 num =2;
}

// 通知玩家回到组队或者匹配界面
message US_NotifyReturnCertainFrame {
     uint64 user_id = 1;
     uint32 type = 2;
     bool is_double_confirm = 3;
     uint32 match_type = 4;

     MS_MatchTeamData data = 5;
}

// 设置他们nickname
message US_SyncOtherNickName {
     uint64 user_id = 1;
     string nick_name = 2;
	 uint64 other_id = 3;
     uint32 request_type = 4; //1是设置修改玩家昵称，2是去掉玩家昵称
}

// 询问A--->B
message US_ReqRspYesOrNo {
     RPC_ExpandBaseUserData user_a = 1;
     RPC_ExpandBaseUserData user_b = 2;
     uint32 ask_type = 3;
     bool request = 4;
     bool answer = 5; //回应
     bool session_join = 6;
     bool match_join = 7;
}
message US_ReturnReqRspYesOrNo {
     US_ReqRspYesOrNo data = 1;
     RPC_SessionUserState state = 2;
     uint64 ret_code = 3;
}

// 点赞
message US_GivePraiseToSomebody {
     string user_name = 1;
     uint64 user_id = 2;
     uint64 other_id = 3;
     bool same_team = 4;
     uint32 be_praise_num = 5;
}

// 同步社交上的玩家基础数据
message US_SyncSocialProfileData {
     uint64 other_id = 1;
     RPC_SocialProfileData data = 2;
}

service UserService {
    rpc LoginService(RPC_LoginReq) returns (RPC_ReturnCode);

    rpc NotifyFollowMe(US_NotifyFollowMe) returns (RPC_ReturnCode);
    rpc NotifyCancelFollowMe(US_NotifyFollowMe) returns (RPC_ReturnCode);

    //通知组队匹配的数据
    rpc NotifyMatchTeamData(US_NotifyMatchTeamData) returns (RPC_ReturnCode);
    //通知离开队伍
    rpc NotifyLeaveMatchTeam(US_NotifyLeaveMatchTeam) returns (RPC_ReturnCode);

    //通知开始匹配
    rpc NotifyBeginMatch(US_NotifyBeginMatch) returns (RPC_ReturnCode);
    //通知取消匹配
    rpc NotifyCancelMatch(US_NotifyCancelMatch) returns (RPC_ReturnCode);
    //通知房间编号
    rpc NotifyRoomID(US_NotifyRoomID) returns (RPC_ReturnCode);

    //通知开始选择英雄
    rpc NotifyBeginWaitingRoom(US_WaitingRoomData) returns (RPC_ReturnCode);
    //通知结束选择英雄
    rpc NotifyFinishWaitingRoom(RPC_UserIdentify) returns (RPC_ReturnCode);
    //通知选择英雄状态
    rpc NotifySelectState(US_NotifySelectState) returns (RPC_ReturnCode);

    //用户状态改变
    rpc NotifyUpdataUserState(US_NotifyUpdataUserState) returns (RPC_ReturnCode);

    //最近联系记录
    rpc NotifyAddRecentContact(US_NotifyRecentContact) returns (RPC_ReturnCode);
    rpc NotifyRemoveRecentContact(US_NotifyRecentContact) returns (RPC_ReturnCode);

    //通知匹配人数信息
    rpc NotifyMatchInfo(US_NotifyMatchInfo) returns(RPC_ReturnCode);

    // 聊天信息
    rpc ChatWithMe(US_ChatWithMe) returns(RPC_ReturnCode);

    // 通知邮件数量
    rpc NotifyMailNum(US_NotifyMailNum) returns(RPC_ReturnCode);
    rpc NotifyOpenMailBox(US_NotifyOpenMailBox) returns(RPC_ReturnCode);
    rpc ObtainMail(US_ObtainMail) returns(RPC_ReturnCode);

    // 通知二次确认的玩家
    rpc NotifyDoubleConfirmUserData(US_SendDoubleConfirmUser) returns(RPC_ReturnCode);
    rpc AfterDoubleConfirm(US_AfterDoubleConfirm) returns(RPC_ReturnCode);
    // 通知二次确认的人数
    rpc DoubleConfirmNum(US_DoubleConfirmNum) returns(RPC_ReturnCode);
    // 通知回到某个界面
    rpc NotifyReturnCertainFrame(US_NotifyReturnCertainFrame) returns(RPC_ReturnCode);

    // 同步nickname
    rpc SyncOtherNickName(US_SyncOtherNickName) returns(RPC_ReturnCode);

    // 询问A--->B
    rpc ReqRspYesOrNo(US_ReqRspYesOrNo) returns(US_ReturnReqRspYesOrNo);  
    // 点赞
    rpc GivePraiseToSomebody(US_GivePraiseToSomebody) returns(RPC_ReturnCode); 
    // 同步社交的基础数据
    rpc SyncSocialProfileData(US_SyncSocialProfileData) returns(RPC_ReturnCode);
}