
/* =========================  ======================= */

//准备组队(C->S)
message MSG_PrepareTeam{
	 uint32 match_type = 4;  // 0是对战，1是天梯，2是娱乐模式，3是人机对战
}
//可组队玩家(S->C)
message MSG_RspPrepareTeam{
	repeated T_JoinTeamUserData firend = 1;  // 人员信息	
	uint64   social_type               = 2;  //0是关注我的，1是我关注的，2是好友，3是最近
}
//队伍数据(S->C)
message MSG_PrepareTeamData{
	repeated T_JoinTeamUserData members = 1;  //所有成员
	uint64   leader                     = 2;  //队长
	uint64   team_size                  = 3;
	uint32   match_type                 = 4;  // 0是对战，1是天梯，2是娱乐模式，3是人机对战
	uint32   extra_data                 = 5;  // 额外数据，如果是人机对战，1是简单，2是中级，3是高级
}

//要请user_id进入队伍(C->S)
message MSG_AskJoinTeam{
	 uint64 user_id = 1;
	 uint64 type    = 2;  //type=0是邀请组队，type=1是1v1PK
}
//通知user_id是否愿意进入队伍(S->C)
message MSG_AnswerJoinTeam{
	 uint64 user_id  = 1;
	 bool   response = 2;
	 uint64 type     = 3;  //type=0是邀请组队，type=1是1v1PK
}

//ask_id邀请你加入队伍(S->C))
message MSG_AskJoinTeamReq{
	 T_JoinTeamUserData user       = 1;
	 uint64             type       = 2;  //type=0是普通对战，type=1是1v1PK，2是天梯匹配邀请，3是娱乐匹配邀请，4是人机匹配邀请，5是自定义邀请
	 uint32             match_type = 3;  // 比赛类型，1是正常比赛，2是天梯，3是娱乐
}
//回应邀请(C->S)
message MSG_AskJoinTeamRsp{
	 bool   response   = 1;
	 uint64 ask_id     = 2;
	 uint64 type       = 3;  //type=0是普通对战，1是天梯匹配邀请，2是娱乐匹配邀请，3是人机匹配邀请，4是自定义邀请 type=100是1v1PK， type=101是更换位置，
	 uint32 extra_data = 4;  //目标位置
	 string ask_name   = 5;  //询问者的名字
}

//离开队伍(C->S)
message MSG_LeavelTeamReq{
}
//离开队伍(S->C)
message MSG_LeavelTeamRsp{
	 bool kick = 1;
}
//(C->S)
message MSG_RequireTeamMatchRoom{
	 uint32 match_type = 1;  // 0 对战模式, 1 天梯模式, 2 娱乐模式, 3是人机对战
	 uint32 extra_data = 2;  // 人机对战，难易模式
}

//更新角色状态
message MSG_UpdateUserState{
	 uint64 user_id     = 1;
	 uint64 state       = 2;
	 uint32 notify_type = 3;
	 bool   online      = 4;
}

//队长剔除玩家
message MSG_RejectOneUser {
	 uint64 other_id = 1;  // 被剔除玩家ID
}

// 告诉队长没有准备好，组队不能开始
message MSG_ChangeCurrentReadyState {
}

// 再来一局
message MSG_EnterGameDirectly {
}

//切磋反馈
message MSG_OneVsOneRsp {
	 string user_name   = 1;  //切磋对象
	 uint32 return_code = 2;  // 返回码 OneVsOneResultCode
	 uint32 ask_type    = 3;  // 0是组队，1是切磋
}

// 发送二次确认前玩家的ID
message MSG_SendDoubleConfirmUser {
	 uint32   double_confirm_time       = 1;  // 二次确认等待时间
	 repeated T_ExpandBaseUserData data = 3;
	 uint64   cur_time                  = 4;
}

//玩家二次确认
message MSG_DoubleConfirm {
}

//玩家确认后反馈
message MSG_AfterDoubleConfirm {
	 uint64 user_id = 1;
	 bool   confirm = 2;
}

//通知二次确认的玩家数量
message MSG_DoubleConfirmNum {
	 uint32 num = 1;
}

// 没有二次确认，回到组队界面
message MSG_NotDoubleConfirm {
	 bool is_double_confirm = 1;
}

// 组队不成功(A ---> B)
message MSG_AskJoinTeamFailed {
	 string user_name    = 1;
	 string invited_name = 2;
}

// 更换人机匹配难度
message MSG_ChangeHumanVsRobotMatchType {
	 uint32 match_type = 1;  // 1是容易，2是中等，3是高级
}

// 目标位置没有人的时候更换位置
message MSG_ChangeTeamPosition {
	 uint32 des_pos = 1;
}

// 增加电脑
message MSG_AddOneRobot {
	 uint32 up_down = 1;  //1是上面一排，down是下面一排
}

//==================英雄数据==================
//S->C 发送英雄数据
message MSG_SendHeroData {
	repeated T_HeroData heros = 2;
}

//==================选择英雄==================
//S->C 开始等待游戏
message MSG_BeginWaitingGame {
	repeated T_WaitingUserData users = 1;
	uint64   start_game_time         = 2;  //开始游戏时间(s)
	uint32   room_kind               = 3;
	bool     hero_free_match         = 4;  //是否限免英雄匹配
	uint32   hero_free_min_level     = 5;  // 免费英雄最小等级
	bool     hero_unique             = 6;  //英雄是否唯一
}

//C->S 准备完成
message MSG_ReadyWaiting {
	 bool ready = 2;
}

//S->C 通知某人准备完成
message MSG_NotifyReadyWaiting {
	 uint64 user_id = 1;
	 bool   ready   = 2;
}

//C->S 选择英雄
message MSG_SelectHero {
	 uint64 hero_id = 3;
	 uint64 skin_id = 4;
 }

 //C->S 穿戴英雄皮肤
message MSG_SelectHeroSkin {
	 uint64 hero_id = 3;
	 uint64 skin_id = 4;
 }

 //S->C 通知选择了皮肤
 message MSG_SetHeroCurrentSkin {
	 uint64 hero_id = 3;
	 uint64 skin_id = 4;
 }

//S->C 通知某人选择了英雄
message MSG_NotifySelectHero {
	 uint64 user_id = 1;
	 uint64 hero_id = 3;
	 uint64 skin_id = 4;
}

//S->C 等待结束
message MSG_FinishWaitingGame {
}

//发送段位数据
message MSG_SendGradeData {
	 uint64      user_id = 1;
	 T_GradeData data    = 2;
}

//解锁英雄(c->s)
message MSG_BuyHero {
	 uint64 hero_id  = 1;  // 英雄ID
	 uint64 buy_type = 2;  // 购买方式，1是金币，2是钻石
}

//发送单个英雄激活(s->c)
message MSG_SendHeroActive {
	 T_HeroData hero    = 1;  // 英雄信息
	 bool       active  = 2;  //英雄是否解锁
	 uint64     skin_id = 3;
}

//购买或者合成英雄皮肤
message MSG_BuyHeroSkin {
	 uint64 hero_id = 1;  // 英雄ID
	 uint64 skin_id = 2;  // 皮肤ID
}

//发送玩家身上所有道具信息
message MSG_SendItems {
	repeated T_ItemData item = 1;  //道具信息
}

//发送单个道具数据信息
message MSG_SendOneItem {
	 T_ItemData item = 1;  //道具信息
}

// 请求限免的英雄
message MSG_ReqHeroFree {
}

// 发送限免的英雄
message MSG_ReponseHeroFree {
	repeated T_HeroData hero     = 1;
	uint32   hero_free_min_level = 2;
}

// 选择英雄失败
message MSG_SelectHeroFailed {
}

// 记录玩家行为日志
message MSG_LogUserLog {
	 int32  step_type = 1;
	 int32  step_id   = 2;
	 string step_name = 3;
	 int32  activate  = 4;
}

//观战比赛
message MSG_ViewJoinGame {
	 uint64 view_uid    = 1;  // 观战角色
	 uint64 view_gameid = 2;  // 观战房间
}

message MSG_ViewJoinGameRet {
	 MSG_ViewJoinGame view = 1;
	 bool             ok   = 2;
	 string           msg  = 3;
}

// 请求英雄列表
message MSG_ReqHeroSkinInfo {
}

// 返回英雄和皮肤信息
message MSG_RspHeroSkinInfo {
	repeated T_HeroData data = 1;
}

//==================经验等级==================
// 告诉客户端获得多少经验
message MSG_NotifyAddExp {
	 uint64 add_exp   = 1;  //增加的经验
	 uint64 total_exp = 2;  //总的经验
}

// 告诉客户端等级提升
message MSG_NotifyLevelUp {
	 uint32 old_level = 1;  //原来等级
	 uint32 new_level = 2;  //升级后等级
}

//==================经验等级==================

//==================人物主界面数据==================
message MSG_ReqUserFramData {
	 uint32 first_index  = 1;  // 竖着index 1首页，2照片，3游戏，4荣耀，5社交
	 uint32 second_index = 2;  // 横着index
	 uint32 extra_data   = 3;  // 附加信息
	 uint64 other_id     = 4;  // 请求玩家的信息
}

// 玩家详细数据界面
message MSG_RspUserBattleData {
	 T_UserBattleData    normal_matches        = 1;   // 普通比赛
	 bool                not_show_battle_data  = 3;   // 设置不让看战绩
	 uint32              battle_data_type      = 4;   // 比赛数据类别 0正常比赛，1是天梯，2是娱乐
	 repeated            T_GameData game_datas = 5;   // 比赛数据
	 T_GradeData         grade                 = 6;   // 段位信息
	 T_UserHeroData      heros                 = 7;   // 英雄数据
	 uint32              game_count            = 8;   // 对战次数
	 uint32              be_praise_num         = 9;   // 被赞扬的次数
	 T_HeroUseDatas      hero_use_data         = 10;  // 英雄使用信息
	 T_SocialProfileData soc_pro_data          = 11;  // 社交的profile数据
	 uint32              not_move_round        = 12;  // 比赛中几回合没有动
}

// 玩家主要信息
message MSG_MainPage {
	 uint64              exp            = 3;   // 经验
	 T_GradeData         grade          = 4;   // 当前段位
	 T_GradeData         history_grade  = 5;   // 历史最高段位
	 uint64              my_follow_num  = 6;   // 关注
	 uint64              follow_me_num  = 7;   // 粉丝
	 T_BaseUserData      base_data      = 10;  // 基础数据
	 T_HomePageData      home_page_data = 13;  // 主页信息
	 T_SocialProfileData soc_pro_data   = 14;  // 社交的profile数据
}

// 请求房间战斗信息
message MSG_ReqRoomBattleData {
	 uint64 unique_id        = 1;  // 唯一ID
	 uint32 battle_data_type = 4;  // 比赛数据类别
}

//==================人物主界面数据==================

//==================聊天消息==================

// 给玩家
message MSG_ReceiveChatMessage {
	 uint32            chat_type = 1;  // 1是好友,2是准备的时候，3是team聊天，4是大厅聊天，8是主界面滚动提示
	 T_ChatMessageData data      = 2;  // 详细聊天信息
}

// 推送单个消息
message MSG_PushChatMessage {
	 T_ChatMessageData data      = 1;  // 详细聊天信息
	 T_ChatUserData    user_a    = 2;
	 T_ChatUserData    user_b    = 3;
	 uint32            chat_type = 4;  // 1是好友,2是准备的时候，3是team聊天，4是大厅聊天
}

//==================聊天消息==================

//==================邮件消息==================
// 申请读取是否有未读邮件
message MSG_ReqOpenMailBox {
}

// 通知是否有邮件，是否点开邮件图标
message MSG_NotifyOpenMailBox {
	 bool open = 1;  //有邮件，而且没有点开
}

// 上线推送有几封邮件
message MSG_PushMailNum {
	 uint32 num = 1;  // 邮件数量
}

// 请求邮件信息
message MSG_ReqMailList {
	 uint64 page_index = 1;
	 uint64 page_size  = 2;
	 uint32 mail_type  = 3;
}

// 回应详细详细邮件
message MSG_RspMailList {
	 MSG_ReqMailList    require     = 1;
	 uint64             total_count = 2;
	 T_UserMaiItemDatas mails       = 3;
}

// 领取邮件
message MSG_PickUpTheMail {
	 uint64 mail_id   = 1;
	 uint32 mail_type = 2;
}

// 删除邮件
message MSG_DeleteTheMail {
	 MSG_PickUpTheMail del = 1;
}

// 删除邮件是否成功
message MSG_RspPickUpTheMail {
	 MSG_PickUpTheMail request = 1;
	 bool              result  = 2;
}

// 领取邮件信息
message MSG_AfterObtainMail {
	 bool     flag             = 1;  // 领取是否成功
	 repeated T_ItemData items = 2;
}

// 读取邮件
message MSG_ReadTheMail {
	 uint64 mail_id = 1;
}

//==================邮件消息==================

//==================第三方上传、下载图片==================
// 上传图片token
message MSG_ReqToken {
	 uint32 request_type = 1;  // request_type = 0表示上传的是头像
}

// 返回服务器生成的token
message MSG_RspToken {
	 string token         = 1;
	 uint32 cur_photo_num = 2;  // 当前相册数量
	 uint32 max_photo_num = 3;  // 最大相册数量
}

// 告诉服务器，玩家设置照片成功
message MSG_SetupPhotoSuccess {
	 string key          = 1;
	 uint32 request_type = 2;  // request_type = 0表示上传的是头像
}

// 请求照片列表
message MSG_ReqPhotoList {
	 uint32 request_type = 1;
	 uint64 other_id     = 2;
}

// 返回照片列表
message MSG_RspPhotoList {
	repeated T_PhotoData photos = 2;
}

// 设置头像
message MSG_SetUserFace {
	 string photo_name = 1;
}

// 删除照片
message MSG_DeletePhoto {
	 string photo_name = 1;
}

//==================第三方上传、下载图片==================

//==================玩家反馈==================
// 玩家反馈回来的信息
message MSG_UserFeedback {
	 T_FeedbackData data = 1;
}

// 回复玩家消息
message MSG_RspFeedback {
}

//==================玩家反馈==================

//==================玩家成就==================
// 通知玩家成就完成
message MSG_NotifyAchievement {
	 uint64 event_id = 1;
}

// 申请玩家成就信息
message MSG_ReqUserAchievement {
	 uint64 user_id = 1;
}

// 返回玩家成就信息
message MSG_RspUserAchievement {
	 uint64               user_id = 1;
	 T_AllAchievementData data    = 2;
}

// 玩家领取奖励
message MSG_ObtainAward {
	 uint64 event_id = 1;
}

// 领取奖励成功
message MSG_ObtainedAwardSuccess {
	 uint64     event_id = 1;
	 T_ItemData item     = 2;
}

// 通知有可以领取的成就
message MSG_ReqNotifyAchievementFilled {
}

// 通知有可以领取的成就
message MSG_NotifyAchievementFilled {
}

//==================玩家成就==================

//==================符文系统==================
//更新符文数据
message MSG_UpdateSealData {
	 T_SealData data = 1;
	 uint32     type = 2;  // type = 1是升级
}

//更新符文槽
message MSG_UpdateSealPage {
	 T_SealPage page = 1;
}

//更新符文包裹
message MSG_UpdateSealPack {
	 T_SealPack pack = 1;
}


//符文升级
message MSG_SealLevelup {
	 uint64 seal_id = 1;
}

//符文激活
message MSG_SealActive {
	 uint64 seal_id = 1;
	 uint64 page_id = 2;
	 uint64 slot_id = 3;
	 bool   active  = 4;
}

//符文页激活
message MSG_SealPageActive {
	 uint64 page_id = 1;
	 uint64 hero_id = 2;
}

//符文页激活
message MSG_SealPageActiveTmp {
	 uint64 page_id = 1;
}

//符文页激活
message MSG_SetSealPageName {
	 uint64 page_id   = 1;
	 string page_name = 2;
}

//符文移除换成金币
message MSG_SealOverflowToGold {
	 uint64 seal_id  = 1;
	 uint64 seal_num = 2;
	 uint64 gold     = 3;
}

// 符文升级成功
message MSG_LevelUpSealSuccess {
	 T_SealData data = 1;
}
//==================符文系统==================

//==================宝箱==================
// 请求宝箱信息
message MSG_ReqBoxInfo {
}

// 通知宝箱的信息
message MSG_NotifyBoxInfo {
	 T_UserBoxs data = 1;
}

// 领取宝箱
message MSG_ObtainOneBox {
	 uint32 box_type = 1;
}

// 免费宝箱，客户端打开宝箱界面或者倒计时结束的时候发送
message MSG_AddFreeBox {

}

// 通知是否有可以领取的宝箱
message MSG_ReqNotifyBoxFilled {
}

// 通知是否有可以领取的宝箱
message MSG_NotifyBoxFilled {
}

// 玩家升级后，展示领取的宝箱
message MSG_LevelUpGetBox {
	 uint64 box_id = 1;
}

//==================宝箱==================

//==================七天登陆==================
// 请求七天登陆信息
message MSG_ReqSevenDayLoginAwards {
	 uint64 other_id = 1;
} 

// 回应七天登陆信息
message MSG_RspSevenDayLoginAwards {
	 T_SevenDayLoginAwards data    = 1;
	 uint32                cur_day = 2;  // 当前几天
}

// 领取奖励
message MSG_ObtainSevenDaysAward {
	 uint32 day = 1;
}

// 获得道具统一接口
message MSG_ObtainItems {
	repeated T_ItemData datas = 1;
	uint32   reason           = 2;  // 1.七天奖励获得
}

//==================七天登陆==================

//==================分享链接==================
// 请求分享链接的数目
message MSG_ReqShortLinkAward {
}

// 返回分享链接奖励信息
message MSG_RspShortLinkAward {
	 uint32     obtained_count          = 1;  //获得分享链接的次数
	 uint32     max_obtained_count      = 2;  //获得分享链接的最大次数
	 T_ItemData data                    = 3;
	 uint32     history_obatained_count = 4;  // 历史获得次数
}

//==================分享链接==================

//==================主页信息==================
// 上传、替换语音
message MSG_UploadMainPageVoice {
	 string data = 1;
}

// 地理位置值
message MSG_SetupGeographicalLocation {
	 string data = 1;
	 float  x    = 2;
	 float  y    = 3;
}

// 更改主页信息
message MSG_SetupHomePageMessage {
	 string data = 1;
}

// 请求最近的人
message MSG_ReqPeopleNearby {
}

// 返回最近的人
message MSG_RspPeopleNearby {
	repeated T_ExpandBaseUserData data = 1;
}

//==================主页信息==================

//==================每日登陆==================
// 签到
message MSG_DailyCheck {
}

// 发送每日签到信息
message MSG_DailyLoginInfo {
	 T_LoginDays data = 1;
}

// 领取奖励
message MSG_ObtainDailyLogin {
	 uint32 day         = 1;
	 uint32 obtain_type = 2;  // 0 是每日领取，1是积累天数领取
}

// 请求每日签到信息
message MSG_ReqDailyLogin {
	
}

// 请求进入是否签到
message MSG_ReqTodayChecked {
}

// 回应今天是否签到
message MSG_RspTodayChecked {
	 bool checked = 1;
}

//==================每日登陆==================


//==================点赞举报功能==================
// 点赞功能
message MSG_GivePraise {
	 uint64 other_id   = 1;
	 bool   same_team  = 2;
	 uint32 match_type = 3;
}

// 点赞反馈
message MSG_RspBePraise {
	 string user_name = 1;
	 uint64 user_id   = 2;
	 bool   same_team = 3;
}

// 举报某个人
message MSG_ReportPassiveUser {
	 uint64 other_id       = 1;
	 uint32 reason1st      = 2;
	 uint32 reason2nd      = 3;
	 uint32 reason3rd      = 4;
	 uint32 reason4th      = 5;
	 string text           = 6;
	 float  score          = 7;  // 被举报玩家得分
	 uint32 not_move_round = 8;  // 挂机回合
	 uint32 match_type     = 9;
}
//==================点赞举报功能==================

//===========================================
service EchoService{
	rpc Ping(MSG_Ping) returns (MSG_Pong);
}
