syntax = "proto3";

package flare.bnet;


/*========================= 支付 =======================*/

// fn user_mkorder( userid, order, time ) ;
// 发起订单，每个订单都有支付时效，超时则自动取消 fn is_valid_order( order ); //
// 是否有效订单 fn is_order_timeout( order ); // 订单是否超时 fn destroy_order(
// userid, order ); 销毁订单 fn user_pay( userid, order ) ;
// 支付订单，订单中包含了支付平台、金额等信息 fn user_done_order( userid, orer )
// ; 完成订单 fn rec_user_pay( userid, order ) ; 记录账户的订单信息 fn
// get_user_bit_coins( userid ) ; 获取账户比特币数 fn get_user_coins( userid ) ;
// 获取账户余额 fn get_user_coins_of_game( userid, gameid ) ;
// 获取账户在某游戏内的币额 fn get_user_pay_history( uerid, starttime, endtime,
// count ) ; 获取支付历史记录

//! 通过账号支付请求
message UserPayReq {
    SClientInfo client_info = 1; // 记录信息
    int64 user_id = 2;           // 支付发起的用户ID
    int32 pay_pt = 3;            // 支付平台
    double coins = 4;            // 总价值金额
  }
  message UserPayRsp {
    flare.CommonRsp resp = 1;
    string order_id = 2;
  }
  
  //! 查询充值记录
  message SyncPayHistoryReq {
    int64 user_id = 1;
    int32 start_time = 2; // 记录开始时间
    int32 end_time = 3;   // 记录结束时间
  }
  
  // 支付记录。只存在于服务器端
  message SPayRec {
    string order_id = 1;          // 订单号
    flare.DateTime date_time = 2; // 订单时间
    int64 user_id = 3;            // 订单操作的账户ID
    double coins = 4;             // 价值
  }
  
  // 用户账户余额
  message SUserFund {
    double coins = 1;     // 人民币余额
    double bit_coins = 2; // 通用数字币余额
    map<int32, int32> other_coins = 3; // 其他币种余额，如论坛金币、游戏内金币等
  }
  
  message SyncPayHistoryRsp { repeated SPayRec records = 1; }
  
  /*========================= 用户游戏信息统计 =======================*/
  message SUserPlayStats {
    int32 continous_login_days = 1;   // 连续登录时间
    int32 continous_play_minutes = 2; // 连续游玩时间
    int32 total_play_minutes = 3;     // 总游玩时间
  }
  