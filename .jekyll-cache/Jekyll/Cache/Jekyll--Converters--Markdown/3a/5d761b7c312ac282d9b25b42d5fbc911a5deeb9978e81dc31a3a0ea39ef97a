I";2<h1 id="前言">前言</h1>
<blockquote>
  <p>警告: 如果已经存在编码风格，请遵守原有编码风格。</p>
</blockquote>

<p>编码风格的意义在于:</p>
<ul>
  <li>降低软件管理成本：软件的维护，基本以阅读代码为主</li>
  <li>提升软件质量：软件同行审查主要检测代码缺陷。代码风格一致可让同行更易接纳、理解、吸收，提高缺陷审查过程效率。</li>
  <li>降低软件复杂度：最小化代码复杂度的方式是——直接，而非高度抽象。这会产生容易阅读和遵循的最优代码，代码越复杂，越难找到隐藏错误。</li>
  <li>易于重构：重构活动是软件维护行为，以修改代码来改善可读性和结构，不改变软件现有行为的改变，可视为重构。常见重构包括：改善变量名、函数名、移动整个类或分解大方法等。</li>
  <li>任务自动化：典型的如通过注释来生成文档。</li>
</ul>

<h1 id="通用编码风格">通用编码风格</h1>
<ul>
  <li>简洁、清晰</li>
  <li>简单、直接
    <h2 id="空格和缩进">空格和缩进</h2>
    <p>主要目的：代码清晰、整洁、能快速阅读。</p>
  </li>
  <li>4个空格大小的tab（即缩进采用4个空格，而非一个tab）</li>
  <li>代码块开始标记<code class="highlighter-rouge">{</code>不单独放置在单行
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (a == b) {
    foo();
}
</code></pre></div>    </div>
  </li>
  <li>超过110字符长度单行，需要分行
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">reallyLongFunctionOne</span><span class="p">()</span> <span class="o">+</span> <span class="n">reallyLongFunctionTwo</span><span class="p">()</span> <span class="o">+</span> 
        <span class="n">reallyLongFunctionThree</span><span class="p">()</span> <span class="o">+</span> <span class="n">reallyLongFunctionFour</span><span class="p">();</span>
  
<span class="kt">int</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">reallyLongFunction</span><span class="p">(</span><span class="n">parameterOne</span><span class="p">,</span> <span class="n">parameterTwo</span><span class="p">,</span> <span class="n">parameterThree</span><span class="p">,</span>
        <span class="n">parameterFour</span><span class="p">,</span> <span class="n">parameterFive</span><span class="p">,</span> <span class="n">parameterSix</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>表达式操作符与操作数之间添加空格
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span> <span class="o">/</span> <span class="n">d</span> <span class="o">+</span> <span class="n">foo</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>函数之间，添加空行
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
<span class="p">}</span>
  
<span class="c1">// 空一行</span>
<span class="kt">void</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="命名与变量">命名与变量</h2>

<ul>
  <li>变量名应具描述性，类似<code class="highlighter-rouge">firstName</code>或<code class="highlighter-rouge">homeworkScore</code>。</li>
  <li>类型名<code class="highlighter-rouge">LikeThis</code>，常量名<code class="highlighter-rouge">LIKE_THIS</code>，函数名建议<code class="highlighter-rouge">like_this</code>，但也可以<code class="highlighter-rouge">likeThis</code>。</li>
  <li>私有成员函数/变量，前缀<code class="highlighter-rouge">_</code>,<code class="highlighter-rouge">_likeThis</code> &amp; <code class="highlighter-rouge">_like_this</code></li>
  <li>定义变量应尽可能近。如只在if表达式中用到的变量，最好放在if中，而不是其外。</li>
  <li>一般函数中<strong>避免</strong>使用魔数，使用有意义的名称替代。</li>
  <li><strong>避免</strong>使用可修改的全局变量。全局变量应只读。</li>
  <li>函数名字要简洁、清晰，言简意赅。</li>
  <li>文件名方式：<code class="highlighter-rouge">some-file</code>,<code class="highlighter-rouge">some.file</code>,<code class="highlighter-rouge">some_file</code>或<code class="highlighter-rouge">somefile</code>。</li>
  <li>使用缩写的名称，即地写下注释，写明其全称。使用常用、既有的缩写方式。</li>
  <li>全局变量前缀<code class="highlighter-rouge">g_</code>或<code class="highlighter-rouge">$</code>。</li>
</ul>

<h2 id="语句与表达式">语句与表达式</h2>
<ul>
  <li>for多用于已知循环次，while多用于未知循环次。</li>
  <li>在循环中，<em>尽可能</em>不使用<code class="highlighter-rouge">break</code>和<code class="highlighter-rouge">continue</code>。采用替代写法。</li>
  <li>避免多余和不必要的分支判断</li>
  <li>采用变量置后的左值判断方式
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">42</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span> <span class="p">{}</span>  <span class="c1">// 变量置后可避免手误少写=</span>

<span class="c1">// bad</span>
<span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span> <span class="p">{}</span> <span class="c1">// 变量置前，此表达式永远为真</span>

</code></pre></div>    </div>
  </li>
  <li>对于if,while,for等语句，单行表达式使用大括号包裹。
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="mi">42</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"Life"</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">puts</span><span class="p">(</span><span class="s">"Yes"</span><span class="p">);</span>

<span class="c1">// 如下写法常出错</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">42</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span> 
  <span class="n">puts</span><span class="p">(</span><span class="s">"Life"</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"Yes"</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>嵌套表达式的写法不要超过4层，否则考虑重构它。</li>
  <li>使用<code class="highlighter-rouge">(x)</code>与<code class="highlighter-rouge">(!x)</code>判断对象</li>
</ul>

<h2 id="冗余">冗余</h2>
<ul>
  <li>如果重复相同的代码多次，找到方法删除冗余代码，使其只有一次。例如，可放入辅助函数。如果重复的代码几乎但不完全相同，尝试让辅助函数以参数表示不同部分。</li>
  <li>将公共代码移出if/else语句，以避免重复</li>
  <li>如果单个函数很长（&gt;50行），可将其分成更小的子函数。如果函数功能用<code class="highlighter-rouge">和</code>来描述，则考虑分解为多个子函数。</li>
</ul>

<h2 id="效率">效率</h2>
<ul>
  <li>将调用结果放在中间变量中，以减少再次调用消耗。</li>
  <li>代码尽可能保持自解释，自解释不了，就要详细注释</li>
  <li>尽可能使用前置声明。特别在C++中，使用前置声明类，可避免导入包含文件</li>
  <li>用<code class="highlighter-rouge">TODO</code>, <code class="highlighter-rouge">FIXME</code>, <code class="highlighter-rouge">!!!</code>,<code class="highlighter-rouge">???</code>,<code class="highlighter-rouge">HACK</code>,<code class="highlighter-rouge">REVIEW</code>标记有问题的代码</li>
  <li>多使用<code class="highlighter-rouge">Assert</code>和<code class="highlighter-rouge">Log</code>等，进行代码健壮性处理。</li>
  <li>对于函数和类，在注释中写明其用法和注意事项，最好能给出例子。</li>
</ul>

<h2 id="功能和程序设计">功能和程序设计</h2>
<ul>
  <li>传入的参数，尽量保持不变。</li>
  <li>复制对象（参数），传引用或指针。（对于动态语言，通常是引用）</li>
  <li>返回复杂对象时，使用返回参数引用形式。
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// good </span>
<span class="kt">void</span> <span class="n">read_file</span><span class="err">（</span><span class="n">string</span> <span class="n">filename</span><span class="err">，</span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="err">）</span><span class="p">{</span>
     <span class="c1">//在v中放入一些数据</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>使用字段存储对象的重要数据，但不存储仅在单个函数使用的临时变量。</li>
  <li>把与概念不相关的功能，设为辅助函数或分拆至辅助模块。</li>
  <li>当使用异常和RTTI、类型转换时，要注意了</li>
</ul>

<h1 id="cc特定">C/C++特定</h1>
<p>使用C/C++主要考虑的是性能、移植性。性能是其主要特点。但C/C++语言本身对编码人员素质要求较高，否则极易发生致命错误（内存泄漏、非法访问等）。C/C++也是嵌入式的首选语言。因此，有以下几个基本规则：</p>
<ul>
  <li>使用所有编译器都支持的特性。C98</li>
  <li>使用带位后缀的基本数据：<code class="highlighter-rouge">u8</code>,<code class="highlighter-rouge">i8</code>,<code class="highlighter-rouge">u16</code>,<code class="highlighter-rouge">i16</code>,<code class="highlighter-rouge">u32</code>,<code class="highlighter-rouge">i32</code>,<code class="highlighter-rouge">u64</code>,<code class="highlighter-rouge">i64</code>，<code class="highlighter-rouge">f32</code>,<code class="highlighter-rouge">f64</code>。</li>
  <li>尽可能避免类型转换（只在指针层面类型转换）</li>
  <li>有限使用template。template会带来编译时长和代码大小的增加。</li>
  <li>不要使用typeof,typeid等特性</li>
  <li>不要使用异常</li>
  <li>不要使用std::iostream</li>
  <li>资源函数（malloc，open）等，都要有配对的函数调用（free，close）。</li>
  <li>资源所有者自己管理，外部不可修改或释放此资源。</li>
  <li>代码块中的注释，统一采用行尾后置C式注释（即<code class="highlighter-rouge">/* */</code>)。</li>
  <li>类前缀<code class="highlighter-rouge">F</code>,接口前缀<code class="highlighter-rouge">I</code>,结构体前缀<code class="highlighter-rouge">S</code>，枚举前缀<code class="highlighter-rouge">E</code>，命名空间前缀<code class="highlighter-rouge">N</code>。</li>
  <li>typedef后缀<code class="highlighter-rouge">_t</code>，函数指针后缀<code class="highlighter-rouge">f</code></li>
  <li>全局变量前缀<code class="highlighter-rouge">g_</code>，静态变量前缀<code class="highlighter-rouge">s_</code>，成员变量前缀<code class="highlighter-rouge">m_</code>,静态成员变量前缀为<code class="highlighter-rouge">sm_</code>。</li>
  <li>如果是C语言模拟C++，依循如下规则：
    <pre><code class="language-C">typedef struct FEntityTag {
  u64 id;
  char* name;

  void(*move)(Vec3 pos);
}FEntity;

u8 FEntity_length() {return len;}

typedef struct FPlayerTag {
  FEntity   super;

  i8   hp;
}FPlayer;

i8 FPlayer_setHp(i8 n) { hp = n;}

static void FPlayer_move(Vec3 pos) {...}

FPlayer a;
a.move = FPlayer_move;

</code></pre>
  </li>
  <li>使用union模拟复用可变数据。</li>
</ul>
:ET