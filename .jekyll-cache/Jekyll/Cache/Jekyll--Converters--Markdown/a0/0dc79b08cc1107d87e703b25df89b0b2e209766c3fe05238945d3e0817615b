I"}<p>入口点：不同平台调用GuardMain入口函数。</p>

<h1 id="guardmain">GuardMain：</h1>

<ul>
  <li>EnginePreInit()：引擎预先初始化。=&gt;GEngineLoop::PreInit()</li>
  <li>EngineInit/EditorInit(GEngineLoop)：引擎或编辑器初始化。=&gt;GEngineLoop::Init()</li>
  <li>EngineTIck()：主循环每次调用的函数。=&gt; GEngineLoop::Tick()</li>
  <li>EngineExit/EditorExit()：引擎或编辑器退出。=&gt; GEngineLoop::Exit()</li>
</ul>

<h2 id="genginelooppreinit">GEngineLoop::PreInit</h2>

<p>主要负责解析命令行参数，初始化环境变量。</p>

<ul>
  <li>尝试启动Launcher；</li>
  <li>从命令行读取游戏名称；</li>
  <li>创建控制台输出设备；</li>
  <li>加载ProjectFile；</li>
  <li>加载Enterprise文件目录；</li>
  <li>获取dll目录；加载核心模块-CoreUObject模块；</li>
  <li>创建线程池；</li>
  <li>加载PreInit模块：Engine,Renderer,AnimGraphRuntime,平台特定的模块（D3D12,OpenGLDrv),SlateRHIRenderer,Landscape,RenderCore,TextureCompressor,AudioEditor,AnimationModifiers</li>
  <li>AppInit：初始化Text本地化</li>
  <li>创建日志</li>
  <li>初始化配置系统，加载Engine、Game、Input、Editor等ini</li>
  <li>加载Plugin和Module</li>
  <li>检测模块或插件是否过期，并编译模块</li>
  <li>初始化HMD设备</li>
  <li>初始化Session</li>
</ul>

<h2 id="gengineloopinit">GEngineLoop::Init</h2>

<p>主要涉及子系统的初始化，特别是引擎的初始化。</p>

<ul>
  <li>检测/Script/Engine.Engine 的GameEngine/UnrealEdEngine类名称，加载UGameEngine/UUnrealEdEngine类，并创建UGameEngineUUnrealEdEngine的实例GEngine。</li>
  <li>MoviePlayer切换PreloadScreen</li>
  <li>GEngine解析命令行</li>
  <li>GEngine::Init()：引擎初始化</li>
  <li>SessionServicesModule::Start()；创建EngineService实例</li>
  <li>GEngine::Start()</li>
  <li>加载Media模块</li>
  <li>加载AutomationWorker、AutomationController模块</li>
  <li>加载ProfilerClient模块</li>
  <li>加载SequenceRecorder，SequenceRecorderSections模块</li>
  <li>线程心跳</li>
</ul>

<h2 id="genginelooptick">GEngineLoop::Tick</h2>

<ul>
  <li>底层内存追踪器每帧更新stats信息</li>
  <li>线程心跳、游戏线程心跳</li>
  <li>更新热更新内容</li>
  <li>更新渲染</li>
  <li>当CVar更新时，执行回调</li>
  <li>刷新渲染命令；确保GPU命令执行</li>
  <li>刷新线程日志</li>
  <li>GEngine::UpdateTimeAndHandleMaxTickRate()</li>
  <li>开始帧渲染线程</li>
  <li>每个场景更新一帧</li>
  <li>平台PumpMessages</li>
  <li>超时，Sleep</li>
  <li>平台文件更新</li>
  <li>处理Slate输入事件</li>
  <li>Media模块更新</li>
  <li>GEngine::Tick(deltaTime)</li>
  <li>等待影片播放完毕，之后切换到Viewport</li>
  <li>Shader异步编译</li>
  <li>处理并行Slate任务</li>
  <li>模块更新</li>
  <li>同步每帧结束</li>
  <li>线程更新</li>
  <li>GEngine::TickDeferredCommands()</li>
  <li>Media模块渲染后更新(PostRender)</li>
  <li>帧渲染结束</li>
</ul>

<h3 id="virtual-uengineinit">virtual UEngine::Init()</h3>

<ul>
  <li>初始化引擎子系统</li>
  <li>设置默认游戏地图</li>
  <li>初始化HMD和手势控制、EyeTrackingDevice</li>
  <li>初始化Sound</li>
  <li>加载Engine.ini文件</li>
  <li>从配置文件，加载所有用到的引擎对象引用，如默认Material、Texture、Font；根据类名创建对应引擎类实例，初始化Timecode Provider，创建GameSingleton类实例，创建AssetManager类实例并初始加载</li>
  <li>创建World（UWorld）</li>
  <li>初始化Audio device</li>
  <li>执行命令行中额外的命令</li>
  <li>绑定网络事件回调</li>
  <li>初始化PortableServices（RPC）</li>
  <li>初始化引擎分析</li>
  <li>加载ImageWriteQueue,StreamingPauseRendering,MovieScene,MovieSceneTracks,LevelSequence，LiveCoding等模块。</li>
  <li>AssetManager结束初始加载</li>
  <li>添加引擎统计数据，并传播统计数据</li>
  <li>记录HMD设备分析</li>
</ul>

<h3 id="virtual-uenginestart">virtual UEngine::Start()</h3>

<h3 id="virtual-uenginetick0">virtual UEngine::Tick()=0</h3>

<h4 id="override-ugameengineinit">override UGameEngine::Init()</h4>

<p>游戏引擎初始化。扩展自UEngine。</p>

<ul>
  <li>UEngine::Init</li>
  <li>加载GameUserSettings，应用分辨率设置</li>
  <li>创建GameInstance，并初始化.
    <ul>
      <li>创建UWorld</li>
    </ul>
  </li>
  <li>创建GameViewportClient，并初始化</li>
  <li>创建游戏窗口，并将此窗口与上一步创建的Viewport关联</li>
</ul>

<h4 id="override-ugameenginestart">override UGameEngine::Start()</h4>

<ul>
  <li>GameInstace::StartGameInstance()
    <ul>
      <li>播放回放</li>
      <li>Engine::Browse：切换地图</li>
      <li>调用virtual GameInstace::OnStart</li>
    </ul>
  </li>
</ul>

<h4 id="override-ugameenginetick">override UGameEngine::Tick()</h4>

<ul>
  <li>更新日志</li>
  <li>清理关闭的Viewport</li>
  <li>所有Viewport都关闭，执行退出</li>
  <li>TickWorldTravel()</li>
  <li>UWorld::Tick()</li>
  <li>SkyLightComponent::UpdateSkyCaptureContents</li>
  <li>ReflectionCaptureComponent::UpdateReflectionCaptureContents</li>
  <li>GamePlayer::Exec()</li>
  <li>更新过渡类型</li>
  <li>等待LevelStreaming完成</li>
  <li>World::UpdateLevelStreaming</li>
  <li>异步改变Map</li>
  <li>FTickableGameObject::TickObjects：更新计时对象</li>
  <li>GameViewport::Tick</li>
  <li>RedrawViewports()：渲染一切</li>
  <li>StreamingManager::Tick()</li>
  <li>AudioDeviceManager更新音频设备</li>
  <li>渲染模块更新</li>
</ul>

:ET