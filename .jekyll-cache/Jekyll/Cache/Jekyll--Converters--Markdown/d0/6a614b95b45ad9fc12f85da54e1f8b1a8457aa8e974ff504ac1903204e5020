I".A<p>编程语言是整个程序活动中最重要的部分，如同人说话一样，说话是用于表达思想，与人沟通。类似，编程语言是程序员表达思想，与计算机沟通的。</p>

<p>对于计算机而言，能理解的只是电流高低，对应即二进制10。这称为机器语言。计算机内部由集成电路铺就，会有一些处理器元件存在，通过算术逻辑单元(ALU),能进行简单的逻辑运算：与、或、非、移位、比较以及简单的加、减、乘运算。</p>

<p>如今的计算机软件层出不穷，百花齐放，规模也逐年增大，但计算机底层硬件仍然是没有变化。</p>

<p>那么如何让计算机按照我们的意愿去工作？我们这时需要指令。指令是计算机能理解的电流信号。程序员需要编写指令，来让计算机达到计算的</p>

<p>目的，让计算机表现出智能。那么计算的内容又如何确定呢？</p>

<p>计算机只能做计算，计算机的智能是人为赋予的。这是一直没有改变的事实。</p>

<p>那么，如何才能赋予计算机智能呢？用计算机能理解的语言沟通，即指令。程序员编写指令，交给计算机，计算机进行计算，反馈出结果。就如同你要让一个外国人帮你做事，那么你得发出让她听得懂的语言，她才能理解，才能顺着你的意思去做。但计算机只懂二进制，那我们要写二进制吗？是的，肯定要的。先辈们就是写二进制的，最初使用打孔纸条，后来使用汇编语言，后来经过先辈们的一代代努力，为了让程序员更简单地命令计算工作，如今编程语言百花齐放，成千上万种。</p>

<p>只要让计算机工作，那么肯定逃不开二进制语言。所以，无论何种语言，最终都会变换成二进制语言。编程语言的选择，完全取决于程序员自己。是程序员创造了编程语言。每种编程语言有其自身适应业务，比如使用汇编语言可以直接面向硬件编程，因为汇编语言很容易转换成机器语言；使用C语言，可以面向系统编程，因为大多数系统本身是使用C语言写就；使用JavaScript可以面向浏览器编程，因为浏览器核心可以解释JavaScript代码等等。</p>

<p>所有的编程语言，无论其如何变化，其实质是没有改变的，所谓万变不离其宗。编程语言的核心，仍然是指示计算机工作。编程语言在机器语言之上，构建出了更利于人类使用的概念。如Ruby，Python，C++，Rust，Go等等，都是介于人类和机器之间的语言。人类通过学习编程语言，按照编程语言的语法规则表达思想，写成程序，编程语言将这些程序按照解释规则，转换成机器语言，交由机器进行运算。这是人类和机器进行沟通的方式。机器和人类沟通的方式，则由先辈们具象化了，即：机器的反馈是以人类能理解的方式表现，如声音、图像、文字、视频等。</p>

<p>那编程语言都有的是什么东西呢？这要从程序本身入手。程序本身是由指令和数据组成，演化为如今是算法与数据结构。指令或算法，在编程语言中，通常表现为：控制语句、逻辑判断、基础运算等；数据，更多指的是数据的存储。</p>

<p>在编程语言中，常常分为两派：C和Lisp。</p>

<p>C语言是从汇编发展而来，很多概念也继承过来。其中的核心为指令，它将指令分为了：控制语句、逻辑判断语句、运算符、跳转语句等。数据则分为整数、小数、指针等基本数据，以及数组、结构体等数据结构。</p>

<p>Lisp语言则承自数学，是数学与计算机相结合的结晶。它的核心是演算。它以表为基础，以函数为中心原则。它的数据就是以表指代，它的指令皆为函数。</p>

<p>现今的编程语言，都是从这两者发展而来。不过在它们基础之上，附加了更多概念。如，附加面向对象概念，是为了解决大型软件开发中的代码复用、扩展等问题；附加函数式概念，是为了解决并行运算中的数据安全等问题。</p>

<p>C系代表着性能、状态、副作用、嵌入式；Lisp系代表着灵活、太极(元能力)、慢。</p>

<h2 id="编程语言通用概念">编程语言通用概念</h2>
<h3 id="注释解释源码的注解文字">注释：解释源码的注解文字</h3>
<p>注释常常在解释或编译时会被丢弃，用于给代码阅读者以参考。</p>
<h3 id="变量用于存储数据">变量：用于存储数据。</h3>
<p>变量用于存储数据，会在内存中有其空间。静态编程语言中，每个变量都要有数据类型，用于预分配内存空间；动态编程语言变量的类型是动态的，内存不固定，所以常常伴随垃圾回收机制。</p>
<h3 id="字面量是一个固定值的表示法">字面量：是一个固定值的表示法。</h3>
<p>用于赋值给变量。字面量是原值，本身不可改变。如字面量10和字面量11，代表的是不同的值。如：</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span><span class="p">,</span><span class="mi">0x1001</span><span class="p">,</span><span class="mi">020</span><span class="p">,</span><span class="s">"string"</span><span class="p">,</span><span class="k">true</span><span class="p">,</span><span class="mf">5.83</span><span class="p">,</span><span class="mf">3.14e2</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s">"Xiao"</span><span class="p">,</span><span class="n">age</span><span class="p">:</span><span class="mi">30</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="符号是指代内容的字串">符号：是指代内容的字串。</h3>
<p>是不可更改的，是由编译器或解释器使用的文本，如：</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">a</span> <span class="o">=</span> <span class="s2">"name"</span>
<span class="n">a</span> <span class="o">=</span> <span class="vi">@b</span>
</code></pre></div></div>
<p>a是变量，在最初赋值为10，之后赋值为”name”，但最后赋值为b所具有的值。其中，文本a和文本@b就是符号，10和”name”是字面量。但a和@b是变量。</p>
<h3 id="函数过程方法lambda表达式运算规则">函数/过程/方法/lambda表达式：运算规则</h3>
<p>函数是从数学发展而来，用于表述参数的运算规则。函数可以有返回值，也可以没有返回值。没有返回值的函数，通常称为过程。</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">a</span><span class="p">.</span><span class="nf">age</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="nf">age</span>
<span class="k">end</span>
</code></pre></div></div>
<h3 id="运算符符号化函数">运算符：符号化函数</h3>
<p>运算符是从数学发展过来，其本质还是一种运算规则，是一种符号化的函数。所以，也可以把运算符当作函数。</p>
<div class="language-lisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">(</span><span class="nb">/</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>
<span class="p">(</span><span class="nb">&gt;</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="流程控制控制程序非线性执行">流程控制：控制程序非线性执行</h3>
<p>流程控制通常有两种：分支和循环。分支常通过逻辑判断来进行，对不同的条件进行测试，来选择其中一个分支执行。循环通常为有限循环与无限循环。在计算机中，通常不存在<code class="highlighter-rouge">无限</code>这样的概念。因此，我们常说的循环，即是有限循环。对于不同的语言，循环有这样几种方式：迭代、递归。两者作用一致。</p>
<h3 id="块作用域与闭包变量生存周期">块、作用域与闭包：变量生存周期</h3>
<p>有些变量是临时的，用完即销毁，这就涉及作用域。作用域是限定变量起作用的范围，也称为生命周期，出了作用域，变量即销毁。对于函数执行而言，通常会有执行环境，此运行环境通常不做存储，但闭包会读取此运行环境，以做特殊用途。常见的是用在回调函数情形下。</p>
<h3 id="模块包命名空间库可供复用的代码集合">模块/包/命名空间/库：可供复用的代码集合</h3>
<p>如今的程序规模越来越庞大，也越来越精细，往往一个软件的完成，需要多人共同努力完成。代码复用即为了应对这种问题。在代码复用的基础上，产生了许多概念，如库、包、模块等。</p>
<h3 id="数据结构数据组织方式">数据结构：数据组织方式</h3>
<p>数据结构在编程语言中，或多或少都有实现，最典型的是数组/列表，几乎所有高级编程语言都有这个概念。随着软件规模扩大化，处理的数据也越来越多，简单地数据结构已经很难应付如今复杂的问题，所以很多编程语言将多种数据结构要么内置于语言，要么置于标准库。内置于语言，多见于脚本语言，它们用于解决日常问题；外置于标准库，可保证语言核心简洁。如你所见，常见数据结构放眼即是。常用数据结构有这样几种：数组、列表、哈希表。</p>
<h3 id="数据结构扩展可自由适应业务自定义数据结构">数据结构扩展：可自由适应业务，自定义数据结构</h3>
<p>数据结构是组织数据的形式，不仅如此，当自定数据结构时，还要有匹配的操纵这个数据结构的一系列函数存在。在C系语言中，常见struct,enum,union等，它们又称为自定数据类型</p>

<h2 id="编程语言中的特殊概念">编程语言中的特殊概念</h2>
<h3 id="面向对象">面向对象</h3>
<p>面向对象的核心是对象——可包含数据(以字段或属性形式)和代码(以过程或方法形式)。方法可操纵字段。程序的实现是以创建大量对象并且互相交互的形式。</p>

<p>面向对象里的两个概念，一为类，一为实例。类是抽象的，可定义此类对象通用的属性和方法；实例是类的具象化个体。</p>

<p>面向对象将函数和变量分为以下几种：</p>
<ul>
  <li>类变量：属于整个类，所有实例共享此变量</li>
  <li>实例变量或属性：术语每个实例自己的数据，每个实例都有此变量的一分副本</li>
  <li>类方法：属于整个类，只能访问类变量和函数调用参数数据</li>
  <li>实例方法：属于分散的对象，可访问实例变量、输入参数、类变量等。</li>
</ul>

<p>面向对象实现3个特征：</p>
<ul>
  <li>封装：绑定数据和操纵这些数据的方法，并在失误使用和外部调用时保持安全。主要的是数据隐藏。主要目标是保证数据的隔离安全性。</li>
  <li>动态分派/消息发送：这是对象而不是任何外部代码的职责。在响应方法调用时，在运行时查找对象关联表，以选择过程代码来执行。也就是，当通过a.do(1)函数调用时，会将消息1分发给a对象，此时a对象会从关联表中查找do方法进行调用。这称之为动态分派。当关联表中有多个同名方法时，此过程称为多重分派。
    <ul>
      <li>多态：子类型是多态的一种形式，当调用代码时，可以不用知道它是层次结构中的哪个类。同时，继承层次结构中的同名方法其表现可不同。多态是实现动态分派的一种手段。</li>
    </ul>
  </li>
  <li>
    <p>复合，继承和委托：对象可保存其他对象的实例变量，这称为对象复合。复合描述的是has-a关系。继承将所有父类的数据和方法以同名形式存在于子类，类似于完整复制，继承可以快速复用已有代码。继承描述的是is-a关系。复合和继承都能复用代码。委托也可用于替代继承。</p>
  </li>
  <li>Mixin，Triats：是用于给类添加新的功能，既不是has-a,也不是is-a的形式。</li>
</ul>

<p>面向对象有其好处在可重用性、可维护性。但随着并行和多线程编程越来越流行，面向对象难以处理这类问题。</p>

<p>面向对象的本质是抽象，越抽象，越可能称为假、大、空。面向对象代码在复用过程中，会出现冗余的情形。</p>

<p>OOP与其他编程语言相比，没有独特的优势，只是提供一种问题建模的方式而已，反而往往带来复杂性。创建类，就是在创建类型，往往把问题的焦点转移到了类型，而不是聚焦数据结构和算法，这有点本末倒置的嫌疑。</p>

<h1 id="编程语言选择">编程语言选择</h1>
<p>编程语言的选择，通常选择的是编程语言的生态。只要编程语言是图灵完备的，那么它们即是等价的，即A能完成的工作B也能完成。然而，现在所有流行于市的编程语言，都是图灵完备的。所以，当面临选择时，实则是选择其生态圈。典型的例子即为C语言，C语言老而弥坚。从编程语言角度而言，C语言并非是刻意设计的编程语言，而更多的是刚好够用的设计哲学。所以，C语言本身并非坚不可催，如果不慎，就可能引发崩溃等严重错误。但，从其生态而言，C语言不可或缺——如今大多数操作系统是用C语言构建，C语言在嵌入式设备、手机、智能家电也遍地开花，也可如此说：C语言统治着智能时代的最底层基石部分。</p>

<p>而在互联网、网页一端，Javascript则由来已久。同样的，从语言角度出发，Javascript很低级，甚至并不高效，而且比较丑陋：怪异的模块管理方式、诡异的this关键字等等，但Javascript在逐渐演变，牢据着网页端，丝毫不松手。Javascript是网页浏览器指定官方语言，甚至蔓延至网页后端（nodejs）。</p>

<p>C++则巩固着游戏引擎和高性能部分，从语言层面而言，C++并没有解决C语言的易崩溃部分，原始的模块管理，低效编译、语法冗余的template等。但其继承了C语言的高效，C++的哲学是不必为你所不需要的部分买单，因此是高性能的不二之选，同时提供了面向对象，比C语言提供了更快的开发速率。当有新的语言能提供与C++相等的性能时，并且能兼容C语言所处的平台时，经过了精心设计，C++会被取缔。</p>

<p>Go作为新时代的编程语言，吸纳了许多编程语言的优点，其生态圈也非常丰富，占据着云服务和区块链等新生领域。从语言角度而言，Go语言是后起之秀，在设计中就规避了C++的一些问题（如编译时间长、没有包管理等），但Go语言在抉择上，也并非尽善尽美，如冗余interface、原始的错误处理机制等。</p>

<p>Ruby在快速网页开发中，占得一席之地，但昙花一现。Ruby从语言角度而言，非常完美、简洁，其设计哲学是为了让程序员更快乐地编程，因此很多魔法技巧都可以在Ruby中绽放，强大的DSL机制，可以快速完成任务，如同Rails其展现一样。但Ruby的生态圈并未从网站开发蔓延开来，导致其昙花一现，迅速凋零。</p>

<p>Python借助其简单的语法，吸收了非常多的编程新手，同时其设计哲学一件事只有一种最优解法，让有经验的程序员能专注于任务，而无须为语言层面的东西操心，提高了工作效率，也是许多专业人士的选择。Python如今基本上有取代Shell、Bat趋势，是自动化任务的首选语言，也是原型开发的试验场。基本上所有的原型开发，都可快速通过Python来实现并检测结果。由于这些原因，Python只会越来越流行，直至有某种语言比Python更易学、易用，更易于用在日常自动化工作中为止。</p>

<p>Java的生态，如今基本上只在Android上了。Java从语言本身而言，非常拘束，解决问题必须写类，必须了解清楚概念。甚至Java这种语言，有大批言论要应用设计模式，扬言干掉if,switch，提高程序复用性——这简直是荒唐。C#设计之初就是Java的竞争对手，C#和Java很类似，不过C#是微软的。C#语言，从语言本身而言，是经过精心设计的，但同Java一样，语法冗余。要不是Unity3D和跨平台Mono的出现和流行，C#说不定早已握死于微软之手。</p>

<p>Haskell、Rust、Elixir等语言，尚未形成气候，对于工作选择，面临相当大的风险——一切尚未实现的功能，都得自己实现。此时，选择这些新的语言，则需要从其设计哲学入手，来判断其未来。</p>

<p>那么，如此说来，总结一下现代化编程语言的语言层面：</p>
<ul>
  <li>模块管理或包管理、库管理：集成第三方库的形式。基本上是从网络下载并自动导入即可;当发布时，只需发布到网络即可。</li>
  <li>API文档自动化：管理库的文档的方式。基本上是自动生成静态网页形式，供开发者本地阅读。</li>
  <li>原生并发支持：有简洁的语法，能提供并发支持，并且不易出错。现如今是async,go等子句形式，以进程、线程、协程、纤程以及原子式操作等作为底层，在其上有Actor，Channel等模式形式。函数式编程语言则直接在语言层面以非改变值形式，提供并发操作底层支持，再配合线程、Actor等，实现高并发。</li>
  <li>Unicode：国际码支持。</li>
  <li>模式匹配、正则表达式：提供快速符号匹配支持。现在的业务基本上都是处理大量文本信息，文本信息解析效率也是比较重要的部分。</li>
  <li>宏或元编程：自动生成代码，可以简化很多代码编写。在人工智能领域，有个非常重要的概念称为自我学习与自我完善，即，代码可以自更新和自修复。元编程或宏可以提供这种用途。</li>
</ul>

<p>还有许多其他功能，可通过标准库进行扩展。语言本身应保持精简和完善，语法层面应足够完善、极富表达力，编译器或解析器层面保证复杂表达式的精确执行。</p>

<h1 id="一篇有意思的文章跨语法语言">一篇有意思的文章：《跨语法语言》</h1>

<h2 id="various">Various</h2>

<ul>
  <li>
    <p>注释</p>

    <p><strong>直到行尾</strong></p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>标识</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">#</code></td>
      <td>Awk, BourneShell, CoffeeScript, E, FishShell, GNU-bc, GNU-sed, Icon, Io, Julia, Maple, merd, Perl, Perl6, PHP, Pliant, Python, Ruby, Tcl, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">//</code></td>
      <td>BCPL, C#, C++, C99, Dylan, F#, Go, Io, Java, JavaScript, PHP, Pike, Scilab, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">--</code></td>
      <td>Ada, Cecil, Eiffel, Haskell, Lua, Sather, Simula, SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">;</code></td>
      <td>Assembler, Common Lisp, Emacs Lisp, Logo, MUMPS, Rebol, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">%</code></td>
      <td>Erlang, Matlab, Mercury, Oz, PostScript, Prolog, TeX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rem</code></td>
      <td>Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"</code></td>
      <td>Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">\</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!</code></td>
      <td>Assembler, Fortran90</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NB.</code></td>
      <td>J</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">C or * in column 1</code></td>
      <td>Fortran</td>
    </tr>
  </tbody>
</table>

<p><strong>嵌套注释</strong></p>

<table>
  <thead>
    <tr>
      <th>标识</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">(* ... *)</code></td>
      <td>Beta, F#, Mathematica, Modula-3, OCaml, Pascal, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">%( ... %)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/* ... */</code></td>
      <td>Classic REXX, Dylan, Io, Oz, SQL99</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ ... }</code></td>
      <td>Pascal, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{- ... -}</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#| ... |#(1)</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#= ... =#</code></td>
      <td>Julia</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#[ ... ]</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#if 0 ... #endif</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">comment { ... }</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">comment [ ... ]</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ ... ](2)</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">--[[ ... ]]</code></td>
      <td>Lua</td>
    </tr>
  </tbody>
</table>

<p><strong>非嵌套</strong></p>

<table>
  <thead>
    <tr>
      <th>标识</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">" ... "</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/* ... */</code></td>
      <td>B, C, C#, C++, CSS, GNU-bc, Go, Java, JavaScript, Mercury, PHP, Pike, PL/I, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;!-- ... --&gt;</code></td>
      <td>HTML, XML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">( ... )</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">### ... ###</code></td>
      <td>CoffeeScript</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>文档注释</p>

    <p>直到行尾
| 标识 | 语言 |
|—|—|
| <code class="highlighter-rouge">///</code>  | C#, F#, Java |
| <code class="highlighter-rouge">-- |</code> | Haskell      |
| <code class="highlighter-rouge">-- ^</code> | Haskell      |</p>

    <p>非嵌套
| 标识 | 语言 |
|—|—|
| <code class="highlighter-rouge">/** ... */(3)</code> | C, C#, E, Java, JavaScript, PHP |
| <code class="highlighter-rouge">(** ... *)</code>    | F#                              |</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>标识</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">{-| ... -}</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(** ... *)</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/* DOCUMENT ... */</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indexing identifier: "...";</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">someClass comment: '...'</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rebol [ Note: "..." ]</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">func ["..." arg] ...</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class X: """... """  def x(): """... """ (4)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(define (f para1 para2) "..." ...)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(defun f (para1 para2) "..." ...)</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">=pod ... =cut(5)</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">=begin ... =end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function MYFUNCTION %MYFUNCTION the very first comment line is displayed in the help table of contents % % the remaining lines are displayed when getting help for MYFUNCTION % </code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>当前行和文件的信息</li>
</ul>

<table>
  <thead>
    <tr>
      <th>标识</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">__LINE__ __FILE__</code></td>
      <td>C, C++, Perl, PHP, Pike, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__LINE__ __SOURCE_FILE__</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$?LINE $?FILE</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__file__</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(new System.Diagnostics.StackFrame(true)).GetFileLineNumber() (new System.Diagnostics.StackFrame(true)).GetFileName()</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Thread.currentThread().getStackTrace()[1].getLineNumber(); Thread.currentThread().getStackTrace()[1].getFileName();</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">system/script/header/file(6)</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">SOURCELINE() / parse source OS . SOURCENAME</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">info frame 0</code></td>
      <td>Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">thisContext lineNumber / thisContext method source</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">runtime.Caller(0)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>符号</p>

    <p>区分大小写(关键字、变量标识符等…)
|规则|语言|
|—|—|
| <code class="highlighter-rouge">case-sensitive</code>                                             | Awk, B, BourneShell, C, C#, C++, <br />CoffeeScript, F#, FishShell, Go, Haskell,<br /> Io, Java, JavaScript, Lua, Maple,<br /> Mathematica, Matlab, merd, Modula-3, <br />OCaml, Perl, Perl6, Pike, Pliant, <br />Prolog, Python, Ruby, Smalltalk,<br /> Tcl, XML, YAML, Yorick |
| <code class="highlighter-rouge">case-insensitive</code>                                           | Ada, Assembler, Classic REXX, Common Lisp, CSS, Eiffel, Forth, HTML, Logo, Pascal, PL/I, Rebol, SGML, SQL92, Visual Basic |
| <code class="highlighter-rouge">case-sensitive: variablescase-insensitive: keywords, functions, constants...</code> | PHP                                                          |
| <code class="highlighter-rouge">case-sensitive: identifierscase-insensitive: keywords</code>      | E                                                            |
| <code class="highlighter-rouge">case-sensitive: identifierscase-insensitive: commands</code>      | MUMPS                                                        |
| <code class="highlighter-rouge">case-sensitive: upper case disallowed</code>                      | GNU-bc                                                       |</p>

    <p>what is the standard way for <a href="http://c2.com/cgi/wiki?CapitalizationRules">scrunching together multiple words</a>
|规则|语言|
|—|—|
| <code class="highlighter-rouge">camelCase</code>                                                  | CoffeeScript, JavaScript                                     |
| <code class="highlighter-rouge">CamelCase or camelCase</code>                                     | C#, E, Go, Haskell, Io, Java, JavaScript, Mathematica, Pascal, Smalltalk, Tcl, Visual Basic |
| <code class="highlighter-rouge">underscores</code>                                                | FishShell, GNU-bc, merd                                      |
| <code class="highlighter-rouge">dots</code>                                                       | Logo                                                         |
| <code class="highlighter-rouge">hyphens</code>                                                    | Common Lisp, Emacs Lisp, Rebol, Scheme                       |
| <code class="highlighter-rouge">underscores for functions / types, unclear for modules / constructors</code> | OCaml                                                        |
| <code class="highlighter-rouge">UPPER_CASE</code>                                                 | BourneShell                                                  |
| <code class="highlighter-rouge">lowercasenoseparator</code>                                       | Matlab                                                       |
| <code class="highlighter-rouge">underscores, UPPER_CASE for class names</code>                    | Eiffel                                                       |
| <code class="highlighter-rouge">CamelCase for classes, underscores for methods</code>             | Python                                                       |
| <code class="highlighter-rouge">CamelCase for types, underscores for functions, variables, ...</code> | Pliant                                                       |
| <code class="highlighter-rouge">CamelCase for methods, types and modules, underscore for functions</code> | F#                                                           |
| <code class="highlighter-rouge">CamelCase for modules and classes, ALL_CAPS for constants, underscores for functions, variables, ...</code> | Ruby                                                         |
| <code class="highlighter-rouge">CamelCase for modules and classes, ALLCAPS for macros, underscores for methods, constants and variables</code> | Pike                                                         |
| <code class="highlighter-rouge">CamelCase for modules, ALL_CAPS for constants, unclear for functions / variables</code> | Perl, Perl6                                                  |
| <code class="highlighter-rouge">CamelCase for variables, underscores for predicates</code>        | Prolog                                                       |
| <code class="highlighter-rouge">usually lowercase or underscores, ALL_CAPS for macros</code>      | C                                                            |
| <code class="highlighter-rouge">usually underscores</code>                                        | C++                                                          |
| <code class="highlighter-rouge">Camel_Case</code>                                                 | Ada                                                          |</p>

    <p>变量标识符正则表达式
|规则|语言|
|—|—|
| <code class="highlighter-rouge">[a-zA-Z][a-zA-Z0-9]*</code>                                       | FishShell, Mathematica, PL/I, Smalltalk            |
| <code class="highlighter-rouge">[a-zA-Z][_a-zA-Z0-9]*</code>                                      | Eiffel, Matlab, Vimscript                          |
| <code class="highlighter-rouge">[a-zA-Z](_?[a-zA-Z0-9])*</code>                                   | Ada                                                |
| <code class="highlighter-rouge">[_a-zA-Z][_a-zA-Z0-9]*</code>                                     | Awk, B, C, C#, C++, E, Go, Maple, PHP, Python, Tcl |
| <code class="highlighter-rouge">[_a-zA-Z0-9]+</code>                                              | BourneShell, Perl, Perl6                           |
| <code class="highlighter-rouge">[a-zA-Z0-9]+</code>                                               | FishShell                                          |
| <code class="highlighter-rouge">[_a-zA-Z][_a-zA-Z0-9]* or '[^']*'</code>                          | Pliant                                             |
| <code class="highlighter-rouge">[_a-zA-Z$][_a-zA-Z0-9$]*</code>                                   | Java                                               |
| <code class="highlighter-rouge">[$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*</code>                     | CoffeeScript, JavaScript                           |
| <code class="highlighter-rouge">[a-zA-Z%][a-zA-Z0-9]*</code>                                      | MUMPS                                              |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9]*</code>                                        | Ruby                                               |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9]*[!?']*</code>                                  | merd                                               |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9']*</code>                                       | Haskell, OCaml, SML                                |
| <code class="highlighter-rouge">[_a-zA-Z][_a-zA-Z0-9']*</code>                                    | F#                                                 |
| <code class="highlighter-rouge">[_A-Z][_a-zA-Z0-9]*</code>                                        | Mercury, Prolog                                    |
| <code class="highlighter-rouge">[_a-zA-Z!0&amp;*/:&lt;=&gt;?^][_a-zA-Z!0&amp;*/:&lt;=&gt;?^0-9.+-]*</code>            | Scheme                                             |
| <code class="highlighter-rouge">[a-zA-Z!?@#][a-zA-Z0-9!?@#]*</code>                               | Classic REXX                                       |
| <code class="highlighter-rouge">[_a-zA-Z?!.'+*&amp;|=~-][_a-zA-Z0-9?!.'+*&amp;|=~-]* or [^0-9[](){}":;/][^ \n\t[](){}":;/]*</code> | Rebol                                              |
| <code class="highlighter-rouge">[a-z][a-z0-9_]*</code>                                            | GNU-bc                                             |
| <code class="highlighter-rouge">anything without a space and is not a number</code>               | Common Lisp, Forth                                 |</p>

    <p>函数标识符正则表达式 (if different from variable identifier regexp)
|规则|语言|
|—|—|
| <code class="highlighter-rouge">[_a-zA-Z][_a-zA-Z0-9]*[!?]?</code> | Ruby            |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9]*</code>         | Mercury, Prolog |
| <code class="highlighter-rouge">[A-Z][_a-zA-Z0-9]*(7)</code>       | Vimscript       |
| <code class="highlighter-rouge">[^ \t\n\r\f]+</code>               | Tcl             |
| <code class="highlighter-rouge">[^ \t\n\r\f/]+</code>              | FishShell       |</p>

    <p>关键字正则表达式 (if different from variable identifier regexp)
|规则|语言|
|—|—|
| <code class="highlighter-rouge">[A-Z]+</code> | Modula-3 |
|          |          |</p>

    <p>类型正则表达式  (if different from variable identifier regexp)
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">[_A-Z][_a-zA-Z0-9']*</code> | Haskell        |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9']*</code> | Mercury, OCaml |</p>

    <p>常量正则表达式 (if different from variable identifier regexp)
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">[A-Z][_a-zA-Z0-9]*</code>   | Ruby           |
| <code class="highlighter-rouge">[_A-Z][_a-zA-Z0-9']*</code> | Haskell, OCaml |
| <code class="highlighter-rouge">[_a-z][_a-zA-Z0-9']*</code> | Mercury        |</p>
  </li>
  <li>
    <p>breaking lines (useful when end-of-line and/or indentation has a special meaning)</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">nothing needed</code></td>
      <td>Ada, B, C, C#, C++, Common Lisp, D, Eiffel, <br />Emacs Lisp, F#, Forth, Go, Haskell, Java, JavaScript,<br /> Maple, Mathematica, OCaml, Oz, Pascal, Perl,<br /> Perl6, PHP, PostScript, Rebol, Scheme, Smalltalk, SML, XSLT, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">\</code></td>
      <td>Awk, BourneShell, C, CoffeeScript, E, FishShell, GNU-bc, Io, Python, Ruby, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">_</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">,</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">...</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>变量赋值或声明</p>

    <p>赋值
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">=</code>         | Awk, B, Basic, BourneShell, C, C#, C++, Classic REXX, Erlang, Go, Icon, Io, Java, JavaScript, Lua, Mathematica, Matlab, Oz, Perl, Perl6, PHP, Pike, YCP, Yorick |
| <code class="highlighter-rouge">:=</code>        | Ada, BCPL, Cecil, Dylan, E, Eiffel, Maple, Mathematica, Modula-3, Pascal, Pliant, Sather, Simula, Smalltalk, SML |
| <code class="highlighter-rouge">&lt;-</code>        | F#, OCaml                                                    |
| <code class="highlighter-rouge">_(8)</code>      | Squeak                                                       |
| <code class="highlighter-rouge">:</code>         | BCPL, Rebol                                                  |
| <code class="highlighter-rouge">-&gt;(9)</code>     | Beta                                                         |
| <code class="highlighter-rouge">def</code>       | PostScript                                                   |
| <code class="highlighter-rouge">setq</code>      | Common Lisp, Emacs Lisp                                      |
| <code class="highlighter-rouge">setf</code>      | Common Lisp                                                  |
| <code class="highlighter-rouge">set</code>       | Common Lisp, FishShell, Rebol                                |
| <code class="highlighter-rouge">SET v=...</code> | MUMPS                                                        |
| <code class="highlighter-rouge">set!</code>      | Scheme                                                       |
| <code class="highlighter-rouge">is</code>        | Prolog                                                       |
| <code class="highlighter-rouge">make "v e</code> | Logo                                                         |
| <code class="highlighter-rouge">e v !</code>     | Forth                                                        |</p>

    <p>声明
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">=</code>                                                          | Haskell, Mercury, Prolog |
| <code class="highlighter-rouge">&lt;-</code>                                                         | Haskell                  |
| <code class="highlighter-rouge">:-</code>                                                         | Prolog                   |
| <code class="highlighter-rouge">:=</code>                                                         | Io                       |
| <code class="highlighter-rouge">let v = e in</code>                                               | F#, OCaml                |
| <code class="highlighter-rouge">let val v = e in</code>                                           | SML                      |
| <code class="highlighter-rouge">let v = e(10)</code>                                              | BCPL, F#, Vimscript      |
| <code class="highlighter-rouge">def v := e / var v := e</code>                                    | E                        |
| <code class="highlighter-rouge">my / our / local / use vars</code>                                | Perl                     |
| <code class="highlighter-rouge">my / our / temp</code>                                            | Perl6                    |
| <code class="highlighter-rouge">define</code>                                                     | Dylan, Scheme            |
| <code class="highlighter-rouge">let let*</code>                                                   | Common Lisp, Scheme      |
| <code class="highlighter-rouge">letrec</code>                                                     | Scheme                   |
| <code class="highlighter-rouge">flet labels defun defmethod defvar defparameter defsetf ..</code> | Common Lisp              |
| <code class="highlighter-rouge">local V1 = e V2 = e2 in ... end</code>                            | Oz                       |
| <code class="highlighter-rouge">global v1, v2</code>                                              | Python                   |
| <code class="highlighter-rouge">global v1 v2</code>                                               | Matlab, Scilab           |
| <code class="highlighter-rouge">:@</code>                                                         | Beta                     |
| <code class="highlighter-rouge">NEW v</code>                                                      | MUMPS                    |
| <code class="highlighter-rouge">v: t</code>                                                       | Ada, Eiffel, Pascal      |
| <code class="highlighter-rouge">t v</code>                                                        | C, C#, C++, Java         |
| <code class="highlighter-rouge">var v t</code>                                                    | Go                       |
| <code class="highlighter-rouge">| v1 v2 |</code>                                                  | Smalltalk                |
| <code class="highlighter-rouge">auto v1, v2; extrn v3, v4;</code>                                 | B                        |
| <code class="highlighter-rouge">auto</code>                                                       | GNU-bc                   |
| <code class="highlighter-rouge">var</code>                                                        | JavaScript, Pliant       |
| <code class="highlighter-rouge">gvar</code>                                                       | Pliant                   |
| <code class="highlighter-rouge">variable v(11)</code>                                             | Forth                    |
| <code class="highlighter-rouge">e value v</code>                                                  | Forth                    |
| <code class="highlighter-rouge">Module[{x, y = v}, ... ]</code>                                   | Mathematica              |
| <code class="highlighter-rouge">Block[{x, y = v}, ... ]</code>                                    | Mathematica              |
| <code class="highlighter-rouge">With[{c1 = v1, c2 = v2, ... }, ...]</code>                        | Mathematica              |
| <code class="highlighter-rouge">&lt;xsl:variable name="v" select="e"/&gt;</code>                        | XSLT                     |</p>

    <p>两者一起：</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">=</code></td>
      <td>CoffeeScript, GNU-bc, merd, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:=</code></td>
      <td>Go, merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">set, variable</code></td>
      <td>Tcl</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>组合表达式</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">( ... )</code></td>
      <td>Ada, Awk, B, BCPL, Beta, C, C#, C++, Classic REXX, CoffeeScript, D, E, Eiffel, F#, GNU-bc, Go, Haskell, Io, Java, JavaScript, Julia, Logo, Lua, Maple, Mathematica, Matlab, merd, Modula-3, MSH, MUMPS, OCaml, Oz, Pascal, Perl, Perl6, PHP, Pike, Pliant, Prolog, Python, Rebol, Ruby, Scilab, Smalltalk, SML, SQL92, Tcl, Vimscript, XPath, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ ... ]</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indentation</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$ ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">begin ... end</code></td>
      <td>F#, FishShell, OCaml, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">space(12)</code></td>
      <td>merd</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>block (grouping statements, especially when statements are not expressions) 块（组合语句，特别是语句不是表达式时）</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">{ ... }</code></td>
      <td>Awk, BCPL, BourneShell, GNU-bc, GNU-sed, JavaScript, PHP, Pike, Tcl, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ ... }(13)</code></td>
      <td>B, C, C#, C++, E, Go, Haskell, Java, Modula-3, Perl, Perl6, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">( ... )(13)</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ ... ](14)</code></td>
      <td>Logo, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"..."</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">begin ... end(13)</code></td>
      <td>Ada, Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(begin ...)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">BEGIN ... END</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do ... end</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do ... end(13)</code></td>
      <td>Lua, PL/I</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indentation</code></td>
      <td>CoffeeScript, F#, MUMPS, Pliant, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indentation(13)</code></td>
      <td>Haskell, merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foo ... end where foo in { if, do, ... }</code></td>
      <td>Modula-2, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foo ... end where foo in { if, for, while, ... }</code></td>
      <td>Matlab, Scilab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foo ... end where foo in { if, loop, ... }</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foo ... end foo where foo in { if, do, ... }</code></td>
      <td>Ada, Fortran90</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(* ... *)(15)</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(# ... #)</code></td>
      <td>Beta</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>use a block as a return value (when statements are not expressions) 块作为返回值（当语句不是表达式时）</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">valof</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">proc() .. end proc</code></td>
      <td>Maple</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>equality / inequality</p>

    <p>shallow
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">== !=</code>             | Awk, B, C, C++, CoffeeScript, F#, Go, Io, Java, OCaml, Perl, Perl6, Pike, Yorick |
| <code class="highlighter-rouge">= /=</code>              | Eiffel, Fortran90                                            |
| <code class="highlighter-rouge">= &lt;&gt;</code>              | Forth, Logo, Maple, Modula-2, Pliant, Rebol                  |
| <code class="highlighter-rouge">= #(16)</code>           | Modula-2, Modula-3                                           |
| <code class="highlighter-rouge">= !=</code>              | BourneShell, FishShell                                       |
| <code class="highlighter-rouge">== === != !==(17)</code> | JavaScript, PHP                                              |
| <code class="highlighter-rouge">=== !==</code>           | Perl6, PHP5                                                  |
| <code class="highlighter-rouge">== ~=</code>             | Lua                                                          |
| <code class="highlighter-rouge">== ~~</code>             | Smalltalk                                                    |
| <code class="highlighter-rouge">== ~==</code>            | Dylan                                                        |
| <code class="highlighter-rouge">= '=</code>              | MUMPS                                                        |
| <code class="highlighter-rouge">= ~= neqv(15)</code>     | BCPL                                                         |
| <code class="highlighter-rouge">f= f&lt;&gt;</code>            | Forth                                                        |
| <code class="highlighter-rouge">is_equal(18)</code>      | Eiffel                                                       |
| <code class="highlighter-rouge">eq ne</code>             | Emacs Lisp, PostScript                                       |
| <code class="highlighter-rouge">eq, eql</code>           | Common Lisp                                                  |
| <code class="highlighter-rouge">eq? eqv?</code>          | Scheme                                                       |
| <code class="highlighter-rouge">.EQ. .NE.</code>         | Fortran                                                      |
| <code class="highlighter-rouge">is / is not</code>       | Python                                                       |
| <code class="highlighter-rouge">is / isnot</code>        | Vimscript                                                    |</p>

    <p>deep
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">== !=</code>                                    | Awk, C#, C++, E, merd, PHP5, Python, Ruby, Tcl, Vimscript, YCP |
| <code class="highlighter-rouge">== &lt;&gt;</code>                                    | Python                                                       |
| <code class="highlighter-rouge">== /=</code>                                    | Haskell                                                      |
| <code class="highlighter-rouge">== \=</code>                                    | Oz                                                           |
| <code class="highlighter-rouge">== \==</code>                                   | Classic REXX, Prolog                                         |
| <code class="highlighter-rouge">= /=</code>                                     | Ada                                                          |
| <code class="highlighter-rouge">= !=</code>                                     | Maple, XPath                                                 |
| <code class="highlighter-rouge">= &lt;&gt;</code>                                     | Beta, F#, OCaml, Pascal, Rebol, SML, SQL92, Visual Basic     |
| <code class="highlighter-rouge">= ~=</code>                                     | Dylan, Smalltalk                                             |
| <code class="highlighter-rouge">== ~= eq ne isequal isequalwithequalnans</code> | Matlab                                                       |
| <code class="highlighter-rouge">== ~= eq ne isequal</code>                      | Scilab                                                       |
| <code class="highlighter-rouge">=@= \=@= / = \= / =:= =\=(19)</code>            | Prolog                                                       |
| <code class="highlighter-rouge">=== =!= / == !=(20)</code>                      | Mathematica                                                  |
| <code class="highlighter-rouge">.eq</code>                                      | Logo                                                         |
| <code class="highlighter-rouge">equal?</code>                                   | Scheme                                                       |
| <code class="highlighter-rouge">equals</code>                                   | Java                                                         |
| <code class="highlighter-rouge">equal</code>                                    | Common Lisp, Emacs Lisp, Pike                                |
| <code class="highlighter-rouge">equalp</code>                                   | Common Lisp                                                  |
| <code class="highlighter-rouge">eqv</code>                                      | Perl6                                                        |
| <code class="highlighter-rouge">deep_is_equal</code>                            | Eiffel                                                       |
| <code class="highlighter-rouge">isEqual</code>                                  | Objective-C                                                  |</p>
  </li>
  <li>
    <p>comparison</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">&lt; &gt; &lt;= &gt;=</code></td>
      <td>Ada, Awk, Awk, B, Beta, C, C#, C++, Classic REXX, <br />CoffeeScript, Common Lisp, Dylan, E, Eiffel, Emacs Lisp,<br /> F#, Forth, Go, Haskell, Io, Java, JavaScript, Logo, Lua, Maple,<br /> Mathematica, Matlab, merd, Modula-3, OCaml, Pascal, Perl, <br />Perl6, PHP, Pike, Pliant, Python, Rebol, Ruby, Scheme, Scilab,<br /> Smalltalk, SML, SQL92, Tcl, Vimscript, Visual Basic, XPath, YCP,<br /> Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt; &gt; =&lt; &gt;=</code></td>
      <td>Mercury, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt; &gt; '&gt; '&lt;</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;&lt; &gt;&gt; &lt;&lt;= &gt;&gt;=(21)</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@&lt; / @=&lt; / @&gt; / @&gt;=</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lt gt le ge</code></td>
      <td>Perl, Perl6, PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">-lt -gt -le -ge</code></td>
      <td>BourneShell, FishShell, MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">.LT. .GT. .LE. .GE.</code></td>
      <td>Fortran</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">u&lt; u&gt; u&lt;= u&gt;=</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f&lt; f&gt;</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<p>returns 3 values (i.e. inferior, equal or superior)
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">a &lt;=&gt; b</code>              | merd, Perl, Perl6, Ruby                                      |
| <code class="highlighter-rouge">cmp</code>                  | Perl, Perl6, Python                                          |
| <code class="highlighter-rouge">compare</code>              | F#, Forth, Haskell, Mercury, OCaml, Pliant, Prolog, Smalltalk |
| <code class="highlighter-rouge">strcmp</code>               | C, PHP                                                       |
| <code class="highlighter-rouge">three_way_comparison</code> | Eiffel                                                       |
| <code class="highlighter-rouge">string compare</code>       | Tcl                                                          |
| <code class="highlighter-rouge">compareTo</code>            | Java                                                         |
| <code class="highlighter-rouge">strings.Compare()</code>    | Go                                                           |</p>

<p>returns 4 values (i.e. inferior, equal, superior or not comparable)</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">compare</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">compareTo</code></td>
      <td>E</td>
    </tr>
  </tbody>
</table>

<p>min / max (binary or more)</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">min / max</code></td>
      <td>Beta, C++, Common Lisp, Dylan, E,<br /> Eiffel, F#, Forth, Haskell, Io, Java, Lua,<br /> Maple, Matlab, merd, OCaml, PHP5, <br />Pike, Pliant, Prolog, Python, Rebol,<br /> Scheme, Scilab, Smalltalk,<br /> SQL92, Tcl8.5, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">min minstr / max maxstr(22)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Min / Max</code></td>
      <td>Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">MIN / MAX</code></td>
      <td>Classic REXX, Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">measure-object -min / measure-object -max</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fmin / fmax</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Integer'min / Integer'max</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>runtime evaluation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">eval</code></td>
      <td>BourneShell, Common Lisp, Emacs Lisp, FishShell, JavaScript, Matlab, Perl, Perl6, PHP, Python, Ruby, Scheme, Tcl, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CoffeeScript.eval(23)</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exec</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">evstr / execstr</code></td>
      <td>Scilab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dostring</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">doString</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">evaluate</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Compiler evaluate:</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">runtime_compile / compile + execute</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Compiler.evalExpression or Compiler.parseOzVirtualString</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">compile_string</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">interpret</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToExpression</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">run</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">XECUTE</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do / reduce / compose / load</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[...]</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">=..(24)</code></td>
      <td>Prolog</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>manual memory allocation</p>

    <p>allocation
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">malloc</code>         | C     |
| <code class="highlighter-rouge">allocate throw</code> | Forth |
| <code class="highlighter-rouge">new</code>            | Ada   |</p>

    <p>deallocation</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">free</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">free throw</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>force garbage collection</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">doGC</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">GC.start</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">gc</code></td>
      <td>Logo, Maple, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">System.gc()</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">System.gcDo</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">System.GC.Collect()</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">gc.collect()</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">gc_collect_cycles(25)</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">full_collect</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">garbage_collect</code></td>
      <td>Mercury, Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">collectgarbage</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Collector collect</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">VM.garbageCollect()</code></td>
      <td>JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Gc.full_major()</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Smalltalk garbageCollect</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">System.Mem.performGC</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">incremental garbage collection =&gt; not needed</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">recycle</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">interp.gc()</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(ext:gc)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">runtime.GC()</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<h2 id="functions">Functions</h2>

<ul>
  <li>function call</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">f(a,b,...)</code></td>
      <td>Ada, Awk, Awk, B, C, C#, C++,<br /> CoffeeScript, CSS, Dylan, E, Eiffel, <br />Erlang, Go, Io, Java, JavaScript, Lua, <br />Maple, Matlab, Mercury, merd, Modula-3, <br />Pascal, Perl, Perl6, PHP, Pike, <br />Prolog, Python, Ruby, XPath, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f a b ...</code></td>
      <td>BourneShell, F#, FishShell, Haskell, <br />Logo, Matlab, MSH, OCaml, Pliant, Rebol, SML, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f(a,b,...f) or f[a,b,...] depending on the version</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(f a b ...) (apply f l)</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(funcall f a b ...)</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{f a b}</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[apply f a b]</code></td>
      <td>Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f[a,b,...]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f[a,b,...] or f.call(a,b,...)</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;$f(a,b,...) or $f-&gt;(a,b,...)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$f.(a,b,...)</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f a, b, ...</code></td>
      <td>CoffeeScript, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f, a, b, ...(26)</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">v = f(a, b, ...) or call f a, b, ...</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a b ... f</code></td>
      <td>Forth, PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(a,b,...)-&gt;&amp;f or (a,b,...)-&gt;f</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f:a(27)</code></td>
      <td>FL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f@a(28)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a // f(28)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a ~ f ~ b(29)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">.. [ f, A, B, ...]</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;xsl:call-template name="f"&gt;     &lt;xsl:with-param name="a" select=a/&gt;     &lt;xsl:with-param name="b" select=b/&gt; &lt;/xsl:call-template&gt;</code></td>
      <td>XSLT</td>
    </tr>
  </tbody>
</table>

<p>with no parameter
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">f</code>                             | Ada, BourneShell, Eiffel, Forth, Haskell, <br />Io, Logo, Matlab, Mercury, MSH, Pascal, Perl, <br />Perl6, Pliant, PostScript, Prolog, Rebol, Ruby, <br />Tcl, Yorick |
| <code class="highlighter-rouge">f()</code>                           | Awk, C, C#, C++, CoffeeScript, E, Erlang, F#, Go,<br /> Java, JavaScript, Lua, Maple, merd, OCaml, Perl, <br />PHP, Pike, Python, SML, YCP |
| <code class="highlighter-rouge">(f)</code>                           | Common Lisp, Emacs Lisp, Scheme                              |
| <code class="highlighter-rouge">(funcall f)</code>                   | Common Lisp, Emacs Lisp                                      |
| <code class="highlighter-rouge">{f}</code>                           | Oz                                                           |
| <code class="highlighter-rouge">f[]</code>                           | Mathematica                                                  |
| <code class="highlighter-rouge">f[] or f.call</code>                 | Ruby                                                         |
| <code class="highlighter-rouge">&amp;$f or $f-&gt;()</code>                 | Perl                                                         |
| <code class="highlighter-rouge">$f.()</code>                         | Perl6                                                        |
| <code class="highlighter-rouge">v = f()</code>                       | Classic REXX                                                 |
| <code class="highlighter-rouge">call f</code>                        | Classic REXX, Fortran                                        |
| <code class="highlighter-rouge">f value(30)</code>                   | Smalltalk                                                    |
| <code class="highlighter-rouge">&lt;xsl:call-template name="f"&gt;/</code> | XSLT                                                         |</p>

<ul>
  <li></li>
</ul>

<p>partial application</p>

<p>(in the examples below, a normal call is “f(a,b)”)</p>

<p>give the first argument
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">f a</code>                         | F#, Haskell, OCaml, SML |
| <code class="highlighter-rouge">f(a)</code>                        | Mercury                 |
| <code class="highlighter-rouge">f(a,)</code>                       | merd                    |
| <code class="highlighter-rouge">&amp;f.assuming(var_name =&gt; a)</code>  | Perl6                   |
| <code class="highlighter-rouge">functools.partial(f, a)(31)</code> | Python                  |
| <code class="highlighter-rouge">interp alias {} f_a {} f a</code>  | Tcl                     |</p>

<p>give the second argument
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">f(,b)</code>               | merd    |
| <code class="highlighter-rouge">&amp;f.assuming(b =&gt; b)</code> | Perl6   |
| <code class="highlighter-rouge">flip f b(32)</code>        | Haskell |</p>

<p>give the first argument to operator “&gt;”
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">(a &gt;)</code> | Haskell, merd |
| <code class="highlighter-rouge">(&gt;) a</code> | F#, OCaml     |</p>

<p>give the second argument to operator “&gt;”
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">(&gt; a)</code> | Haskell, merd |</p>

<ul>
  <li>function definition</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">sub f { ... }</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub f($para1, $para2, ...) { ... }</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def f(para1, para2, ...): ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def f(para1, para2, ...) ... end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def f(para1, para2, ...) ... { ... }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f para1 para2 = ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">let f para1 para2 = ...</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f(para1, para2, ...) = valof $( ... $)</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f(para1, para2, ...) = ...</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f[para1_, para2_, ...] := ... para1 ...</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f ... or f: para1 ...</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f: func [para1 para2 ...] ...</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/f { ... } def</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f := (para1, para2, ...) -&gt; ...</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f := method(para1, para2, ..., code)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">func f(a, b, c...) { ... }</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typ0 f(typ1 para1, typ2 para2, ...) { ... }</code></td>
      <td>C, C#, C++, Pike, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(para1, para2) { ... }</code></td>
      <td>Awk, JavaScript, PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(para1, para2) ... code ... end</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f; ...; end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f { ... }</code></td>
      <td>KornShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f { param(para1, [typ2]para2, ...) ... }</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(define (f para1 para2) ...)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(defun f (para1 para2) ...)</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fun { F Para1 Para2 } ... end</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fun f para1 para2 = ...</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">proc f {para1 para2} { ... }</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function retval = f(para1, para2) retval = ...</code></td>
      <td>Matlab, Scilab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:- func f(typ1, typ2, ...) = typ0. f(Para1, Para2, ...) = ...</code></td>
      <td>Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(para1 : type1; para2 : typ2; ...) return retval is begin    ... end f;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f para1 para2 -&gt; retval   arg typ1 para1; arg typ2 para2; arg rettyp retval;   ...</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(para1 : typ1, para2 : typ2, ...) : retval; var retval : typ0; begin   ... end</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f (para1 : typ1; para2, para3 : typ2; ...) : rettyp is do   ... end</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;xsl:template name="f"&gt;     &lt;xsl:param name="para1"/&gt;     &lt;xsl:param name="para2"/&gt;      ... &lt;/xsl:template&gt;</code></td>
      <td>XSLT</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Function f(para1, para2) ... End Function</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">: f ... ;</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f() { ... }</code></td>
      <td>BourneShell, KornShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f : procedure   ... return retval</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to f :para1 :para2    ... end</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">func f(para1 typ1, para2 typ2, ...) (typ3, ...) { ... }</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>procedures
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">procedure f(para1 : typ1; para2, para3 : typ2); begin   ... end</code> | Pascal           |
| <code class="highlighter-rouge">f (para1 : typ1; para2, para3 : typ2; ...) is do   ... end</code> | Eiffel           |
| <code class="highlighter-rouge">procedure f(para1 : typ1; para2 : MODE type2; ...) is begin    ... end f;  MODE ::= | OUT | IN OUT</code> | Ada              |
| <code class="highlighter-rouge">void f(typ1 para1, typ2 para2, ...) { ... }</code>                | C, C#, C++, Pike |
| <code class="highlighter-rouge">let f(para1, para2, ...) be $( ... $)</code>                      | BCPL             |
| <code class="highlighter-rouge">proc { F Para1 Para2 } ... end</code>                             | Oz               |
| <code class="highlighter-rouge">f := proc(para1, para2, ...) ... end proc</code>                  | Maple            |
| <code class="highlighter-rouge">Sub f(para1, para2) ... End Sub</code>                            | Visual Basic     |
| <code class="highlighter-rouge">function f(para1, para2) ...</code>                               | Matlab, Scilab   |
| <code class="highlighter-rouge">f : procedure   ... return</code>                                 | Classic REXX     |
| <code class="highlighter-rouge">func f(para1 typ1, para2 typ2, ...) { ... }</code>                | Go               |</p>

<p>variable number of arguments</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">one can use overloading on different number of arguments</code></td>
      <td>C++, Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub f { ... @_ }</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub f; ... $argv; end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f() { ... $@ }</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f := ... ## &amp;</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f[params___] := ... params ...</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(varargin) for i=1:nargin  ...(varargin{i}) end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function f(varargin) for e=varargin  ...(e) end</code></td>
      <td>Scilab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(args...) -&gt; ...</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(lambda x ...) or(33)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f(args ...typ0)(34)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>predicates</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">f(Para1, Para2, ....) :- ... .</code></td>
      <td>Prolog</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>anonymous function</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">sub { my ($a, $b) = @_; ... }</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ my ($a, $b) = @_; ... }(35)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ ... } (arguments are in the stack</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ ... ]</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ param(para1, [typ2]para2, ...) ... }</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{|a, b| ... }(36)</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[:a :b| ... ]</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[list {a b} {...}]</code></td>
      <td>Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lambda a, b: ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lambda(typ1 para1, typ2, para2, ...) { ... };</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(a, b) =&gt; ...</code></td>
      <td>C#3, CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(a, b) -&gt; ...</code></td>
      <td>CoffeeScript, Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a, b -&gt; ...</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">-&gt; $a, $b { ... }</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">\a b -&gt; ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:noname ...</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fn (a, b) =&gt; ...</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fun a b -&gt; ...</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(func(A, B) = C :- ...)</code></td>
      <td>Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function(a, b) { ... }</code></td>
      <td>JavaScript, PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function(a, b) use (&amp;$v1, $v2) { ... }(37)</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">function(a, b) ... end</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Function[{a, b}, ....](38)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fun(a, b) -&gt; ... end</code></td>
      <td>Erlang</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fun {$ A B} ... end(39)</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">func [a b ...] ...</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def _(para1, para2, ...) ... { ... }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">proc {|a, b| ...}</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lambda {|a, b| ...}</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(lambda (a b) ...)</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inline('...x...y...')(40)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method(a, b, ...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method(a, b) ... end method(41)</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">create_function(',','...')</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">delegate(ta a, tb b) { ... }</code></td>
      <td>C#2</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[](ta a, tb b) { ... }</code></td>
      <td>C++-0x</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[](ta a, tb b) -&gt; typ { ... }</code></td>
      <td>C++-0x</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">func(para1 typ1, ...) (typ2, ...) { ... }</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>function return value</p>

    <p>breaks the control flow</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">return(42)</code></td>
      <td>Ada, Awk, B, BCPL, BourneShell, C, C#, C++, Classic REXX, CoffeeScript, Common Lisp, E, FishShell, Go, Io, Java, JavaScript, Lua, Maple, Matlab, Perl, Perl6, PHP, Pike, Pliant, Python, Rebol, Ruby, Tcl, Vimscript, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Return</code></td>
      <td>Mathematica, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">RETURN</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">resultis(43)</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">return-from xxx</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">^</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Exit Function / Exit Sub</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exit</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">output</code></td>
      <td>Logo</td>
    </tr>
  </tbody>
</table>

<p>function body is the result
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">no syntax needed(44)</code> | CoffeeScript, Common Lisp, Dylan, Emacs Lisp, Erlang, F#, Haskell, Io, Maple, Mathematica, Matlab, OCaml, Oz, Perl, Perl6, Rebol, Ruby, Scheme, SML, Tcl |</p>

<p>setting the result
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">Result := val</code>          | Eiffel       |
| <code class="highlighter-rouge">&lt;function name&gt; = val</code>  | Visual Basic |
| <code class="highlighter-rouge">&lt;function name&gt; := val</code> | Pascal       |
| <code class="highlighter-rouge">&lt;retvar name&gt; = val;</code>   | Ada, Matlab  |</p>

<ul>
  <li>function called when a function is not defined (in dynamic languages)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">AUTOLOAD</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">AUTOSCALAR, AUTOMETH, AUTOLOAD...</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__autoload</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__getattr__</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method_missing</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">doesNotUnderstand</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__noSuchMethod__(45)</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unknown</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">no-applicable-method</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">doesNotRecognizeSelector</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">TryInvokeMember(46)</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">match [name, args] { ... }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">the predicate fail</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">forward</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>runtime inspecting the caller information</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">caller</code></td>
      <td>Perl, Perl6, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">call</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inspect.stack()[1]</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">backtrace</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">debug_backtrace</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">trace 'I'</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">evalin('caller', ...)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">current_predicate</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">thisContext sender</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">where(2)</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">info level</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">runtime.Caller(0)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>function composition</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">.</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">compose</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Composition</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;&lt;</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&gt;&gt;</code></td>
      <td>F#</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>identity function</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">id</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">identity</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Identity</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">yourself</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="control-flow">Control Flow</h2>

<ul>
  <li>sequence</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">,</code></td>
      <td>C, C++, Go, JavaScript, Matlab, Perl, Pike, Prolog, Scilab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">.</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">;</code></td>
      <td>Ada, Awk, B, Beta, BourneShell,<br /> C, C#, C++, E, F#, FishShell, GNU-sed,<br /> Go, Haskell, Io, Java, JavaScript, Maple,<br /> Mathematica, Matlab, merd, Modula-3, <br />OCaml, Pascal, Perl, Perl6, PHP, Pike, PL/I, Pliant,<br /> Python, Ruby, SML, Tcl, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nothing, optionally ;</code></td>
      <td>Classic REXX, Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">space</code></td>
      <td>Eiffel, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">end-of-line</code></td>
      <td>Assembler, Awk, Basic, BourneShell, CoffeeScript, <br />E, F#, FishShell, Fortran, GNU-sed, Haskell, Io,<br /> JavaScript, Lua, Matlab, merd, Pliant, <br />Python, Ruby, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(begin ...)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(progn ...) (prog1 ...) (prog2 ...)</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&gt;&gt;</code></td>
      <td>Haskell</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>if_then</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">if c then ...</code></td>
      <td>CoffeeScript, F#, merd, OCaml, Pascal, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then ... end</code></td>
      <td>Eiffel, Lua, Oz, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then ... end if</code></td>
      <td>Ada, Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then ... fi</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c; then ... fi</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) then ... end</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c do ...</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IF c THEN ... END</code></td>
      <td>Modula-2, Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) ...</code></td>
      <td>Awk, B, C, C#, C++, Java, JavaScript, PHP, Pike, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c: ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c ...</code></td>
      <td>Pliant, Rebol, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c): ... endif</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c {...}</code></td>
      <td>Go, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c [...]</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) {...}</code></td>
      <td>E, Perl, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IF c ...</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c -&gt; ...</code></td>
      <td>FL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ... if</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">... if c</code></td>
      <td>Perl, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c if b1 then</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(if c ...)</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(when c ...)</code></td>
      <td>Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c and ...</code></td>
      <td>Perl, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if(c, ...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If[c, ...]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if(c) then(...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ifTrue(...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ifTrue: ...</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;xsl:if test="c"&gt;...&lt;/xsl:if&gt;</code></td>
      <td>XSLT</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c ... endif</code></td>
      <td>Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If c Then ...</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If c   ... End If</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c; ... end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c; ...; end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c, ..., end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c   ... end</code></td>
      <td>Matlab, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then ; ...  if c then   ...  if c then do   ... end</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c and ...</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t label</code></td>
      <td>GNU-sed</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c     ...</code></td>
      <td>CoffeeScript</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>if_then_else</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 else b2</code></td>
      <td>CoffeeScript, F#, Haskell, merd, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 else b2 end</code></td>
      <td>Eiffel, Lua, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 elsif c2 then b2 else b3 end if</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 elseif c2 then b2 else b3 end</code></td>
      <td>Eiffel, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) then b1 elseif (c2) then b2 else b3 end</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IF c THEN b1 ELSIF c2 THEN b2 ELSE b3 END</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If c Then b1 ElseIf c2 Then b2 Else b3 End If</code></td>
      <td>Modula-2</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) b1 else b2</code></td>
      <td>Awk, B, C, C#, C++, Java, JavaScript, Pike, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c b1 elsif c2 b2 b3</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 elseif c2 then b2 else b3</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then begin b1 end else begin b2 end</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c b1 eif c2 b2 else b3</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then b1 elif c2 then b2 else b3 end if</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c; then b1; elif c2; then b2; else b3; fi</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c; b1; else b2; end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c1, b1, elseif c2, b2, else, b3, end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) b1 elseif (c2) b2 else b3</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c): b1 elseif (c2): b2 else: b3 endif</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) {b1} elsif (c2) {b2} else {b3}</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (c) {b1} else {b2}</code></td>
      <td>E, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(if c b1 b2)</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(if c then b1 else b2)</code></td>
      <td>Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(c -&gt; b1 ; c2 -&gt; b2 ; b3)</code></td>
      <td>Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c -&gt; b1 ; b2</code></td>
      <td>FL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if(c, b1, b2)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If[c, b1, b2]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if(c) then(b1) else(b2)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ifTrue: b1 ifFalse: b2</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ifelse c [b1] [b2]</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">shunt c b1 c2 b2 b3</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">either c b1 b2 / if/else c b1 b2</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(cond (c b1) (c2 b2) (t b3))</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(cond (c b1) (c2 b2) (else b3))</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Which[c, b1, c2, b2, True, b3]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c -&gt; b1 ; c2 -&gt; b2 ; b3</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case when c; b1 when c2; b2 else b3 end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">test c then b1 or b2</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e | c = b1 | c2 = b2 | otherwise = b3(47)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c b1 b2 ifelse</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c if b1 else b2 then</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ? b1 : b2</code></td>
      <td>Awk, B, C, C#, C++, Java, JavaScript, Perl, PHP, Ruby, Tcl, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c ?? b1 !! b2</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">b1 if c else b2(31)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$SELECT(c:b1,c2:b2,1:b3)</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">c -&gt; b1, b2</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(if c then b1 else b2 fi)</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;xsl:choose&gt;     &lt;xsl:when test="c"&gt; b1 &lt;/xsl:when&gt;     &lt;xsl:when test="c2"&gt; b2 &lt;/xsl:when&gt;     &lt;xsl:otherwise&gt; b3 &lt;/xsl:otherwise&gt; &lt;/xsl:choose&gt;</code></td>
      <td>XSLT</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c1 ... elseif c2 ... else ... endif</code></td>
      <td>Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If c Then b1 Else b2</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">If c   b1 Else   b2 End If</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c:    b1  elif c2:   b2  else:    b3</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c   b1 elsif c2   b2 else   b3 end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c   b1 elseif c2   b2 else   b3 end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c then ; b1 ; else ; b2  if c then   b1 else   b2  if c then do   b1   ... end else do   b2   ... end</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IF c ... ELSE ...</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c   b1 else if c2   b2 else   b3</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if c {b1} else if c2 {b2} else {b3}</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>ifnot_then (unless)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">unless</code></td>
      <td>CoffeeScript, Emacs Lisp, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ifFalse</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if(c) not then(...)</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>multiple selection (switch)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">switch (val) {     case v1: ...; break;     case v2: case v3: ...; break;     default: ...;  }</code></td>
      <td>C, C++, Java, JavaScript, PHP, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val {     case v1: ...; goto done;    case v2: case v3: ...; goto done;   }  ...;  done:  </code></td>
      <td>B</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch (val) {     case v1: ...; break;     case v2: case v3: ...; break;     default: ...; break;  }(48)</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch (val) {     match v1 { ... }     match v2 { ... }     match _ { ... } }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switchon val      case v1: ...    case v2: ...    default: ...</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val   case v1     ...   case v2 v3     ...   case '*'     ... end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val   case v1     ...   case {v2,v3}     ...   otherwise     ... end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val of    v1 : ...;     v2, v3 : ...    else ...  end</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val {     v1 {...}      v2 - v3 {...}     default {...} }</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val in    v1) statement1 ;;    v2|v3) statement23 ;;    *) statement_else ;; esac</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(if val     // v1 then ...     // v2 then ...      else ...     if)</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">match val with  | v1 -&gt; ...  | v2 | v3 -&gt; ...  | _ -&gt; ...</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val of    v1 =&gt; ...  | v2 =&gt; ...  | _ =&gt; ...</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CASE val OF    v1 =&gt; ...  | v2 =&gt; ...  ELSE =&gt; ... END</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val of    v1 -&gt; ...    v2 -&gt; ...    _ -&gt; ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">val case    v1 of ... endof    v2 of ... endof    ... endcase</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">val.    v1 -&gt; ...    v2 -&gt; ...    _ -&gt; ...</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(case val    ((v1) ...)    ((v2) ...)    (otherwise ...))</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(case val    ((v1) ...)    ((v2) ...)    (else ...))</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val is    when v1 =&gt; ...    when v2 | v3 =&gt; ...    when others =&gt; ...  end case;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">case val    when v1; ...    when v2, v3; ...    else ...  end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inspect val    when v1 then statement1    when v2, v3 =&gt; statement23    else statement_else  end</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">select (val);    when (v1) statement1;    when (v2, v3) statement23;    otherwise statement_else;  end;</code></td>
      <td>PL/I</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">X = val, (X = v1, ... ; X = v2, ... ; ...)</code></td>
      <td>Mercury, Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">my %case = (     v1 =&gt; sub { ... },     v2 =&gt; sub { ... }, );  if ($case{val}) { $case{val}-&gt;() } else { ... }</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">use Switch; switch ($val) {     case v1 { ... }     case v2 { ... }     else ... })(49)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">given $val {     when v1 { ... }     when v2 { ... }     default { ... } }</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Select val     Case v1 	...     Case v2, v3 	...     Case Else 	... End Select</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch (val) {     v1 { ... }     v2 { ... }     default { ... }   }</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val [     v1 [...]     v2 [...] ]  switch/default [     v1 [...]     v2 [...] ][...]</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">val caseOf: {[v1]-&gt;[...]. [v2]-&gt;[...]} otherwise: ...</code></td>
      <td>Squeak</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Switch[val, v1, ..., v2, ..., _, ...]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">select   when v1 ...   when v2 | v3 ...   otherwise ... end</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CASE val     WHEN v1 THEN ...     WHEN v2 THEN ...     ELSE ... END</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">switch val {     case v1, v2, ...:         ...         fallthrough     case v3:         ...     default:         ... }</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>loop</p>

    <p>forever loop
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">loop</code>                 | CoffeeScript, merd, Perl6, PostScript, Ruby |
| <code class="highlighter-rouge">loop(...)</code>            | Io                                          |
| <code class="highlighter-rouge">loop ... end loop</code>    | Ada                                         |
| <code class="highlighter-rouge">LOOP ... END</code>         | Modula-3                                    |
| <code class="highlighter-rouge">(loop do ...)</code>        | Common Lisp                                 |
| <code class="highlighter-rouge">cycle (# do ... #)</code>   | Beta                                        |
| <code class="highlighter-rouge">repeat</code>               | Squeak                                      |
| <code class="highlighter-rouge">begin ... again</code>      | Forth                                       |
| <code class="highlighter-rouge">forever</code>              | Logo, Rebol                                 |
| <code class="highlighter-rouge">Do     ... Loop</code>      | Visual Basic                                |
| <code class="highlighter-rouge">do forever   ... end</code> | Classic REXX                                |
| <code class="highlighter-rouge">for {}</code>               | Go                                          |</p>

    <p>while condition do something
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">while (c) ...</code>                                   | Awk, B, C, C#, C++, E, Java, JavaScript, Perl, PHP, Pike, Ruby, YCP, Yorick |
| <code class="highlighter-rouge">while c ...</code>                                     | CoffeeScript, Perl6, Tcl                                     |
| <code class="highlighter-rouge">while c loop ... end loop</code>                       | Ada                                                          |
| <code class="highlighter-rouge">while c do ...</code>                                  | BCPL, Pascal, SML                                            |
| <code class="highlighter-rouge">while c do ... done</code>                             | F#, OCaml                                                    |
| <code class="highlighter-rouge">while c do ... end do</code>                           | Maple                                                        |
| <code class="highlighter-rouge">while c do ... end</code>                              | Lua                                                          |
| <code class="highlighter-rouge">WHILE c DO ... END</code>                              | Modula-3                                                     |
| <code class="highlighter-rouge">while c: ...</code>                                    | Python                                                       |
| <code class="highlighter-rouge">while c; do ...; done</code>                           | BourneShell                                                  |
| <code class="highlighter-rouge">while c; ...; end</code>                               | FishShell                                                    |
| <code class="highlighter-rouge">while c, ..., end</code>                               | Matlab                                                       |
| <code class="highlighter-rouge">while [c][...]</code>                                  | Rebol                                                        |
| <code class="highlighter-rouge">while c [...]</code>                                   | Logo                                                         |
| <code class="highlighter-rouge">while(c, ...)</code>                                   | Io                                                           |
| <code class="highlighter-rouge">While[c, ...]</code>                                   | Mathematica                                                  |
| <code class="highlighter-rouge">do.while [...] c</code>                                | Logo                                                         |
| <code class="highlighter-rouge">c whileTrue: ...</code>                                | Smalltalk                                                    |
| <code class="highlighter-rouge">(loop while c do ...)</code>                           | Common Lisp                                                  |
| <code class="highlighter-rouge">loop (# while ::&lt; (# do c -&gt; value #) do ... #)</code> | Beta                                                         |
| <code class="highlighter-rouge">begin c while ... repeat</code>                        | Forth                                                        |
| <code class="highlighter-rouge">from until not c loop ... end</code>                   | Eiffel                                                       |
| <code class="highlighter-rouge">while c     ...</code>                                 | Pliant                                                       |
| <code class="highlighter-rouge">while c do     ...</code>                              | F#                                                           |
| <code class="highlighter-rouge">Do While c      ... Loop</code>                        | Visual Basic                                                 |
| <code class="highlighter-rouge">while c ... endwhile</code>                            | Vimscript                                                    |
| <code class="highlighter-rouge">do while c   ... end</code>                            | Classic REXX                                                 |
| <code class="highlighter-rouge">for c {...}</code>                                     | Go                                                           |</p>

    <p>do something until condition
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">do ... until c</code>                                  | Perl6                                           |
| <code class="highlighter-rouge">do {...} until c</code>                                | Perl                                            |
| <code class="highlighter-rouge">do ... while (!c)</code>                               | Awk, C, C#, C++, Java, JavaScript, Pike, Yorick |
| <code class="highlighter-rouge">begin ... end until c</code>                           | Ruby                                            |
| <code class="highlighter-rouge">begin ... c until</code>                               | Forth                                           |
| <code class="highlighter-rouge">REPEAT ... UNTIL c</code>                              | Modula-3                                        |
| <code class="highlighter-rouge">loop (# until ::&lt; (# do c -&gt; value #) do ... #)</code> | Beta                                            |
| <code class="highlighter-rouge">loop ... exit when c; end loop</code>                  | Ada                                             |
| <code class="highlighter-rouge">(loop do ... until c)</code>                           | Common Lisp                                     |
| <code class="highlighter-rouge">... repeatuntil c</code>                               | BCPL                                            |
| <code class="highlighter-rouge">repeat ... until c</code>                              | Lua, Pascal                                     |
| <code class="highlighter-rouge">repeat ... until (c)</code>                            | YCP                                             |
| <code class="highlighter-rouge">repeat, ..., c</code>                                  | Prolog                                          |
| <code class="highlighter-rouge">until [... c]</code>                                   | Rebol                                           |
| <code class="highlighter-rouge">until c [...]</code>                                   | Logo                                            |
| <code class="highlighter-rouge">do.while [...] c</code>                                | Logo                                            |
| <code class="highlighter-rouge">While[...; c]</code>                                   | Mathematica                                     |
| <code class="highlighter-rouge">[...] whileFalse: [c]</code>                           | Smalltalk                                       |
| <code class="highlighter-rouge">Do  ... Loop Until c</code>                            | Visual Basic                                    |</p>

    <p>for each value in a numeric range, 1 increment (see also the entries about ranges)
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">for (int i = 1; i &lt;= 10; i++) ...</code>       | C, C#, C++      |
| <code class="highlighter-rouge">for (i = 1; i &lt;= 10; i++) ...</code>           | Awk, JavaScript |
| <code class="highlighter-rouge">for ($i = 1; $i &lt;= 10; $i++) ...</code>        | PHP             |
| <code class="highlighter-rouge">foreach my $i (1 .. 10) { ... }</code>         | Perl            |
| <code class="highlighter-rouge">foreach ($i in 1..10) { ... }</code>           | MSH             |
| <code class="highlighter-rouge">for (1 .. 10) -&gt; $i { ... }</code>             | Perl6           |
| <code class="highlighter-rouge">for i = 1:10, ..., end</code>                  | Matlab          |
| <code class="highlighter-rouge">for i = 1, 10 do ... end</code>                | Lua             |
| <code class="highlighter-rouge">for i := 1 to 10 do ...</code>                 | Pascal          |
| <code class="highlighter-rouge">for i = 1 to 10 do ... done</code>             | F#, OCaml       |
| <code class="highlighter-rouge">For i = 1 To 10 ... Next</code>                | Visual Basic    |
| <code class="highlighter-rouge">for i in 1 .. 10 loop ... end loop</code>      | Ada             |
| <code class="highlighter-rouge">for i in 1 .. 10 do ... done</code>            | F#              |
| <code class="highlighter-rouge">for i in [1..10] ...</code>                    | CoffeeScript    |
| <code class="highlighter-rouge">for i in xrange(1, 11)</code>                  | Python          |
| <code class="highlighter-rouge">for i in (seq 10); ...; end</code>             | FishShell       |
| <code class="highlighter-rouge">FOR I=1:1:10 ...</code>                        | MUMPS           |
| <code class="highlighter-rouge">for i from 1 to 10 do ... end do</code>        | Maple           |
| <code class="highlighter-rouge">for [i 1 10 +1] [...]</code>                   | Logo            |
| <code class="highlighter-rouge">for {set i 1} {$i &lt;= 10} {incr i} {...}</code> | Tcl             |
| <code class="highlighter-rouge">1 1 10 ... for</code>                          | PostScript      |
| <code class="highlighter-rouge">11 1 do ... loop</code>                        | Forth           |
| <code class="highlighter-rouge">(1..10).each {|i| ... }</code>                 | Ruby            |
| <code class="highlighter-rouge">1.upto(10) {|i| ... }</code>                   | Ruby            |
| <code class="highlighter-rouge">1 to(10) foreach(...)</code>                   | Io              |
| <code class="highlighter-rouge">1 to: 10 do: [...]</code>                      | Smalltalk       |
| <code class="highlighter-rouge">(loop for i from 1 to 10 do ...)</code>        | Common Lisp     |
| <code class="highlighter-rouge">do label i = 1, 10</code>                      | Fortran         |
| <code class="highlighter-rouge">Do[..., {i, 1, 10}](50)</code>                 | Mathematica     |
| <code class="highlighter-rouge">do i = 1 for 10   ... end</code>               | Classic REXX    |
| <code class="highlighter-rouge">for i := 1; i &lt;= 10; i++ {...}</code>          | Go              |</p>

    <p>for each value in a numeric range, 1 decrement
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">for X := 10 downto 1 do ...</code>                      | Pascal          |
| <code class="highlighter-rouge">for i = 10 downto 1 do ... done</code>                  | F#, OCaml       |
| <code class="highlighter-rouge">for i in reverse 1 .. 10 loop ... end loop</code>       | Ada             |
| <code class="highlighter-rouge">for i in 10 .. -1 .. 1 do ... done</code>               | F#              |
| <code class="highlighter-rouge">for (int i = 10; i &gt;= 1; i--) ...</code>                | C, C#, C++      |
| <code class="highlighter-rouge">for (my $i = 10; $i &gt;= 1; $i--) { ... }</code>          | Perl            |
| <code class="highlighter-rouge">loop (my $i = 10; $i &gt;= 1; $i--) { ... }</code>         | Perl6           |
| <code class="highlighter-rouge">for (i = 10; i &gt;= 1; i--) ...</code>                    | Awk, JavaScript |
| <code class="highlighter-rouge">for ($i = 10; $i &gt;= 1; $i--) ...</code>                 | PHP             |
| <code class="highlighter-rouge">from i := 10 until i &lt; 1 loop ... i := i - 1 end</code> | Eiffel          |
| <code class="highlighter-rouge">for i = 10:-1:1, ..., end</code>                        | Matlab          |
| <code class="highlighter-rouge">for i = 10, 1, -1 do ... end</code>                     | Lua             |
| <code class="highlighter-rouge">For i = 10 To 1 Step -1 ... Next</code>                 | Visual Basic    |
| <code class="highlighter-rouge">for i in xrange(10, 0, -1)</code>                       | Python          |
| <code class="highlighter-rouge">for i in </code>seq 10 -1 1<code class="highlighter-rouge">; do ...; done</code>             | BourneShell     |
| <code class="highlighter-rouge">for i in (seq 10 -1 1); ...; end</code>                 | FishShell       |
| <code class="highlighter-rouge">for i from 10 to 1 by -1 do ... end do</code>           | Maple           |
| <code class="highlighter-rouge">for [i 1 10 -1] [...]</code>                            | Logo            |
| <code class="highlighter-rouge">FOR I=10:-1:1 ...</code>                                | MUMPS           |
| <code class="highlighter-rouge">for {set i 10} {$i &gt;= 1} {incr i -1} {...}</code>       | Tcl             |
| <code class="highlighter-rouge">10 -1 1 ... for</code>                                  | PostScript      |
| <code class="highlighter-rouge">1 10 do ... -1 +loop</code>                             | Forth           |
| <code class="highlighter-rouge">1 to: 10 by: -1 do: [...]</code>                        | Smalltalk       |
| <code class="highlighter-rouge">10 to(1) foreach(...)</code>                            | Io              |
| <code class="highlighter-rouge">10.downto(1) {|i| ... }</code>                          | Ruby            |
| <code class="highlighter-rouge">(loop for i from 1 to 10 by -1 do ...)</code>           | Common Lisp     |
| <code class="highlighter-rouge">do label i = 10, 1, -1</code>                           | Fortran         |
| <code class="highlighter-rouge">Do[..., {i, 10, 1, -1}]</code>                          | Mathematica     |
| <code class="highlighter-rouge">do i = 10 to 1 by -1   ... end</code>                   | Classic REXX    |
| <code class="highlighter-rouge">for i in [10..1] ...</code>                             | CoffeeScript    |
| <code class="highlighter-rouge">for i := 10; i &gt;= 1; i-- {...}</code>                   | Go              |</p>

    <p>for each value in a numeric range, free increment
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">for (int i = 1; i &lt;= 10; i += 2) ...</code>             | C, C#, C++, Pike |
| <code class="highlighter-rouge">for (i = 1; i &lt;= 10; i += 2) ...</code>                 | Awk, JavaScript  |
| <code class="highlighter-rouge">for ($i = 1; $i &lt;= 10; $i += 2) ...</code>              | PHP              |
| <code class="highlighter-rouge">for (my $i = 1; $i &lt;= 10; $i += 2) { ... }</code>       | Perl             |
| <code class="highlighter-rouge">loop (my $i = 1; $i &lt;= 10; $i += 2) { ... }</code>      | Perl6            |
| <code class="highlighter-rouge">from i := 1 until i &gt; 10 loop ... i := i + 2 end</code> | Eiffel           |
| <code class="highlighter-rouge">for i = 1:3:10, ..., end</code>                         | Matlab           |
| <code class="highlighter-rouge">for i = 1, 10, 2 do ... end</code>                      | Lua              |
| <code class="highlighter-rouge">For i = 1 To 10 Step 2 ... Next</code>                  | Visual Basic     |
| <code class="highlighter-rouge">for i in 1 .. 2 .. 10 do ... done</code>                | F#               |
| <code class="highlighter-rouge">for i in xrange(1, 11, 2)</code>                        | Python           |
| <code class="highlighter-rouge">for i in (seq 1 2 10); ...; end</code>                  | FishShell        |
| <code class="highlighter-rouge">for i from 1 to 10 by 2 do ... end do</code>            | Maple            |
| <code class="highlighter-rouge">for [i 1 10 2] [...]</code>                             | Logo             |
| <code class="highlighter-rouge">FOR I=1:2:10 ...</code>                                 | MUMPS            |
| <code class="highlighter-rouge">for {set i 0} {$i &lt;= 10} {incr i 2} {...}</code>        | Tcl              |
| <code class="highlighter-rouge">1 2 10 ... for</code>                                   | PostScript       |
| <code class="highlighter-rouge">11 1 do ... 2 +loop</code>                              | Forth            |
| <code class="highlighter-rouge">1 to: 10 by: 2 do: [...]</code>                         | Smalltalk        |
| <code class="highlighter-rouge">(1..10).step(2) {|i| ... }</code>                       | Ruby             |
| <code class="highlighter-rouge">1 to (9,2) foreach(...)</code>                          | Io               |
| <code class="highlighter-rouge">(loop for i from 1 to 10 by 2 do ...)</code>            | Common Lisp      |
| <code class="highlighter-rouge">do label i = 1, 10, 2</code>                            | Fortran          |
| <code class="highlighter-rouge">Do[..., {i, 1, 10, 2}]</code>                           | Mathematica      |
| <code class="highlighter-rouge">do i = 1 to 10 by 2   ... end</code>                    | Classic REXX     |
| <code class="highlighter-rouge">for i in [1..10] by 2 ...</code>                        | CoffeeScript     |
| <code class="highlighter-rouge">for i := 1; i &lt;= 10; i += 2 {...}</code>                | Go               |</p>

    <p>for “a la C” (while + initialisation)
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">for</code>                                                        | Awk, C, C#, C++, Go, Java, JavaScript, Mathematica, MSH, Perl, PHP, Pike, Tcl, Yorick |
| <code class="highlighter-rouge">loop</code>                                                       | Perl6                                                        |
| <code class="highlighter-rouge">for ((x = 0; x &lt; 10; x++)); do ...; done</code>                   | BourneShell                                                  |
| <code class="highlighter-rouge">from init_code until c loop ... incr_statement end</code>         | Eiffel                                                       |
| <code class="highlighter-rouge">(loop with VAR = INITIAL-VALUE ... while CONDITION finally INCREMENT ...)</code> | Common Lisp                                                  |</p>
  </li>
  <li>
    <p>breaking control flow</p>

    <p>returning a value
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">return(42)</code>               | Ada, Awk, B, BCPL, BourneShell, C, C#, C++, Classic REXX, CoffeeScript, Common Lisp, E, FishShell, Go, Io, Java, JavaScript, Lua, Maple, Matlab, Perl, Perl6, PHP, Pike, Pliant, Python, Rebol, Ruby, Tcl, Vimscript, YCP, Yorick |
| <code class="highlighter-rouge">Return</code>                   | Mathematica, Visual Basic                                    |
| <code class="highlighter-rouge">RETURN</code>                   | Modula-3                                                     |
| <code class="highlighter-rouge">resultis(43)</code>             | BCPL                                                         |
| <code class="highlighter-rouge">return-from xxx</code>          | Common Lisp                                                  |
| <code class="highlighter-rouge">^</code>                        | Smalltalk                                                    |
| <code class="highlighter-rouge">Exit Function / Exit Sub</code> | Visual Basic                                                 |
| <code class="highlighter-rouge">exit</code>                     | Forth                                                        |
| <code class="highlighter-rouge">output</code>                   | Logo                                                         |</p>

    <p>goto (unconditional jump)</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">goto</code></td>
      <td>Ada, B, Basic, BCPL, C, C#, C++, Cobol, Fortran, Go, Logo, MUMPS, Pascal, Perl, PHP5, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Goto</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">go throw</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">signal</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">b</code></td>
      <td>GNU-sed</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">b, bra, jmp</code></td>
      <td>Assembler</td>
    </tr>
  </tbody>
</table>

<p>continue / break</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">continue / break</code></td>
      <td>Awk, C, C#, C++, CoffeeScript, E, FishShell, Go, Io, Java, JavaScript, Matlab, PHP, Pike, Python, Tcl, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Continue / Break</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">next / last</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">next / break(51)</code></td>
      <td>Maple, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ break</code></td>
      <td>BCPL, Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ break/return</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ exit</code></td>
      <td>Ada, PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ stop</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">restart / leave</code></td>
      <td>Beta, Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ Exit Do, Exit For</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ return-from xxx or return</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">iterate / leave</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ leave</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<p>redo / retry</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">redo/</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">redo / retry</code></td>
      <td>Io, Ruby</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>exception</p>

    <p>throwing</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">raise</code></td>
      <td>Ada, Eiffel, F#, merd, OCaml, Python, Ruby, Scheme-SRFI34, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">RAISE</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">raise ... end</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Exception raise</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">throw</code></td>
      <td>C#, C++, CoffeeScript, E, Erlang, Forth, Haskell, Java, JavaScript, Logo, PHP5, Pike, Prolog, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Throw</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">throw/name</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">die</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">return -code</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">error</code></td>
      <td>Common Lisp, Dylan, Emacs Lisp, Lua, Lua, Maple, Matlab, Pliant, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">signal</code></td>
      <td>Common Lisp, Dylan, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">signal predefined_condition_name</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cerror warn</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[NSException raise:name ...]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">panic(v)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>catching</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">try: a except exn: ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try a with exn -&gt; ...</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try a catch (exn) ...</code></td>
      <td>C#, C++, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try a   ... catch exn   ...</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try { ... } catch(t $v) { ... }</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try a catch exn then ... end</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try a catch exn: ... end try</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try(a) ; catch(...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try { a CATCH exn { ... } }</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">TRY a EXCEPT exn =&gt; ... END</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a handle exn =&gt; ...</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a on: exception_name do: [:exn | ...]</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ifCurtailed</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rescue</code></td>
      <td>Eiffel, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">eval {a}; if ($@) ...</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exception when exception_name =&gt;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">catch a (\exn -&gt; ...)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">catch</code></td>
      <td>Erlang, Forth, Logo, Prolog, Rebol, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Catch</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">catch/name</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">catch(...) or catch { ... };</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">if (catch(exn)) { ... } a</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pcall</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">with-exception-handler or guard</code></td>
      <td>Scheme-SRFI34</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">block a exception(exn) ... end</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">?, shy, safe</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">handler-bind handler-case ignore-errors</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NS_DURING a NS_HANDLER ... NS_ENDHANDLER</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try   a catch   ... end</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">signal on predefined_condition_name ... predefined_condition_name :   ... </code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">recover()</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>cleanup: code executed before leaving</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">ensure</code></td>
      <td>Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">finally</code></td>
      <td>C#, F#, Java, Maple, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FINALLY</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unwind-protect</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cleanup</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dynamic-wind</code></td>
      <td>Scheme</td>
    </tr>
  </tbody>
</table>

<p>retrying: after catching an exception, tell the snippet to be re-run</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">retry</code></td>
      <td>Eiffel, Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">restart</code></td>
      <td>Dylan</td>
    </tr>
  </tbody>
</table>

<p>resume execution where the exception took place</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">resume</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>call-with-current-continuation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">call-with-current-continuation(52)</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">callcc</code></td>
      <td>Ruby, SML-NJ</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="types">Types</h2>

<ul>
  <li>declaration</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">typedef t n</code></td>
      <td>C, C++, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type n is t</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type n ...</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type n = t</code></td>
      <td>F#, Haskell, OCaml, Pascal, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">TYPE n = t</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">using n = ...</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">data n = t</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">datatype n = t</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">newtype n = t</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">n = t</code></td>
      <td>merd, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">n : t</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(deftype n () 't)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type n t</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>annotation (or variable declaration)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">:</code></td>
      <td>Ada, E, Eiffel, F#, Modula-3, OCaml, Pascal, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">::</code></td>
      <td>Dylan, Haskell, Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!!</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t v</code></td>
      <td>C, C#, C++, Java, Perl6, Pike, Pliant, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(declare (t v))</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">v :@ t</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">_t(53)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">var n t</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>cast</p>

    <p>upcast
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">(t) e</code>             | C, C#, C++, Java, PHP |
| <code class="highlighter-rouge">t(e)</code>              | Ada, Pascal           |
| <code class="highlighter-rouge">[t] e</code>             | Pike                  |
| <code class="highlighter-rouge">static_cast&lt;t&gt;(e)</code> | C++                   |
| <code class="highlighter-rouge">e :&gt; t</code>            | OCaml                 |
| <code class="highlighter-rouge">e : t</code>             | F#                    |
| <code class="highlighter-rouge">upcast e</code>          | F#                    |
| <code class="highlighter-rouge">CAST(e as t)</code>      | SQL92                 |
| <code class="highlighter-rouge">typecast(e,t)</code>     | Matlab                |
| <code class="highlighter-rouge">(t)(e)</code>            | Go                    |</p>

    <p>downcast (need runtime checking)</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">(t) e</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t(e)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e : t</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[t] e</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dynamic_cast&lt;t&gt;(e)</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e as t</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e :?&gt; t</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">downcast e(54)</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">v ?= e(55)</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NARROW(e, t)</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typecast(e,t)</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<p>computed conversion (calls an internal or a user-defined function)</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">(t) e</code></td>
      <td>C++, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[t] e</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t(e)</code></td>
      <td>C++, Matlab, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t e</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e : t</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">e :: t</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cast e t</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">... cast t</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">make t e / to t e</code></td>
      <td>Rebol</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>mutability, constness</p>

    <p>type of a mutable value</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">mutability is the default</code></td>
      <td>C, C#, C++, Go, Java, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">val x: T</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">T ref</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">STRef a T</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">in out T(56)</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<p>type of a constant value
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">const T</code>                  | C++, C99                |
| <code class="highlighter-rouge">constant T</code>               | Ada                     |
| <code class="highlighter-rouge">const x: T</code>               | Pascal                  |
| <code class="highlighter-rouge">constness is the default</code> | F#, Haskell, OCaml, SML |
| <code class="highlighter-rouge">const e t</code>                | Go                      |</p>

<p>special cases</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">"readonly" fields(57)</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"final" fields, parameters, local variables(57)</code></td>
      <td>Java</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="object-oriented--reflexivity">Object Oriented &amp; Reflexivity</h2>

<ul>
  <li>method invocation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">object.method(para)</code></td>
      <td>Ada, Beta, C#, C++, Cecil, CoffeeScript, Delphi-Kylix, E, Eiffel, F#, Icon, Java, JavaScript, merd, Modula-3, MSH, Perl6, Python, Ruby, Sather, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object#method para</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object:method(para)</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object method(para)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object method para</code></td>
      <td>Pliant, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object method: para1 method_continuation: para2</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object &lt;- method(para)(58)</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ object method: para ]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object-&gt;method(para)</code></td>
      <td>C++, Perl, PHP, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object["method"](para)</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object/method para</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method object para</code></td>
      <td>Haskell, Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(method object para)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method(object, para)</code></td>
      <td>Ada, Dylan, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">para-&gt;method</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(send object method para)</code></td>
      <td>MzScheme</td>
    </tr>
  </tbody>
</table>

<p>with no parameter</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">object.method</code></td>
      <td>Ada, Eiffel, F#, merd, Perl6, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object.property(59)</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object.method()</code></td>
      <td>C#, C++, CoffeeScript, E, Java, JavaScript, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object#method</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object:method</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object-&gt;method</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object-&gt;method()</code></td>
      <td>PHP5, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object/method</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object["method"]()</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object method</code></td>
      <td>Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ object method ]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method object</code></td>
      <td>Haskell, Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(method object)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method(object)</code></td>
      <td>Ada, Dylan, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(send object method)</code></td>
      <td>MzScheme</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>object creation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">new</code></td>
      <td>PHP, Pliant, Simula</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">new class_name(...)</code></td>
      <td>C#, C++, CoffeeScript, F#, Java, JavaScript, Perl, PHP, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">new class_name ...</code></td>
      <td>CoffeeScript, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name.new(...)</code></td>
      <td>Perl6, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name new</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name(...)</code></td>
      <td>F#, Matlab, Pike, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name v(...)</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">v : class_name</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name.Create</code></td>
      <td>Delphi-Kylix</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!class_name!constructor_name(...)</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">make-object</code></td>
      <td>MzScheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(make-instance class_name ...)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[class_name alloc]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">make class_name! ...</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def object_name { ... }</code></td>
      <td>E</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>object cloning</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">o.clone</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.clone(60)</code></td>
      <td>Eiffel, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.deep_clone</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.clone()</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.Clone()</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">clone $o</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o clone</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">clone / copy or deepCopy</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Storable::dclone</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[o copy]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">copy.copy(o)(61)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">purecopy</code></td>
      <td>Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{&lt; &gt;} or Oo.copy o</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o2 = o(62)</code></td>
      <td>C++, Matlab, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$o2 = $o</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o2.all := o.all</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">make o []</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o_ : T'Class := o(63)</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>manually call an object’s destructor</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">delete</code></td>
      <td>C++, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">destroy</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">DESTROY</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dealloc</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Dispose</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">del, __del__</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__destruct</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Requires instantiation of Ada.Unchecked_Deallocation</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>class declaration</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">class</code></td>
      <td>C#, C++, CoffeeScript, Haskell, Java, Matlab, MzScheme, OCaml, Perl6, PHP, Pike, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class c inherit p1 p2 ... feature decl decl ... end</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">defclass defstruct</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">subclass</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">struct</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type c is tagged record ... end record(64)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@interface c { ... } ... @end</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type c() = class ... end</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type c() =   ...</code></td>
      <td>F#</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>testing class membership</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">isa</code></td>
      <td>Matlab, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">is_a? kind_of?</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.meta.isa</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">isKindOf(65)</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">isKindOfClass</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dynamic_cast</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">instanceof</code></td>
      <td>CoffeeScript, Java, JavaScript, PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">isinstance</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">in</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">is</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">is_a</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:?</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Program.inherits or Program.implements</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">entry_type</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typep</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ISTYPE</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object## &lt; classname##</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type.accepts(object) / object =~ v : type</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">var ?= val(66)</code></td>
      <td>Eiffel</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>get the type/class corresponding to an object/instance/value</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">class</code></td>
      <td>Matlab, Objective-C, Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__class__</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">getClass</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">get_class</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">GetType</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typeid</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typeof</code></td>
      <td>C#, CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type-of</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ref</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">generator</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">meta</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object_program</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">getAllegedType</code></td>
      <td>E</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>methods available</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">methods</code></td>
      <td>Matlab, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">get_class_methods</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">getMethods</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">get-member</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indices</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.meta.getmethods</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dir</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">slotNames</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.GetType().GetMethods()</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o class selectors / o class allSelectors</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">o.__getAllegedType().getMessageTypes()</code></td>
      <td>E</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>inheritance</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">child :&lt; parent</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child : parent</code></td>
      <td>C#, C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child &lt; parent end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child is parent { ... }</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child extends parent</code></td>
      <td>CoffeeScript, Java, PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child(parent):</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class child inherit parent end</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parent subclass: child</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">make parent ...</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inherit</code></td>
      <td>OCaml, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def child extends makeSuperObject(parent, ...) { ... }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type child is new parent with record ... end record</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type child =   inherit parent   ...</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(defclass child (parent) ...)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@interface child : parent { ... } ... @end</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@ISA = qw(parent1 parent2)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">clone , setProtos, setProto, prependProto, appendProto</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">instance Parent Child where ...</code></td>
      <td>Haskell</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>has the method</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">can</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">respond_to?</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">respondsTo</code></td>
      <td>E, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">respondsToSelector</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">hasattr(obj, "meth")(67)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object-&gt;method</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">all [in object 'method function? get in object 'method]</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find-method</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ismethod</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">hasSlot</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">try obj.GetType().GetMethod("meth") with ...</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">obj.meth? instanceof Function</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method_exists</code></td>
      <td>PHP5</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>current instance</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">this</code></td>
      <td>Beta, C#, C++, CoffeeScript, Java, JavaScript, PHP, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">THIS</code></td>
      <td>Simula</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">self</code></td>
      <td>Io, Objective-C, Rebol, Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">object_name if defined as: def object_name { ... }</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Current</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">first parameter(68)</code></td>
      <td>Matlab, Perl, Pliant, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">the object variable</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dispatching parameter</code></td>
      <td>Ada, Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Me</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">.</code></td>
      <td>Perl6</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>accessing parent method</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">super</code></td>
      <td>CoffeeScript, E, Java, Objective-C, Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">super(Class, self).meth(args)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">base</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">resend</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Precursor</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$o.SUPER::method(...)</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$o-&gt;SUPER::method(...)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">method(parent(dispatching-parameter))</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parent(dispatching-parameter).method</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parent::method</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">call-next-method</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type foo2 =   inherit foo as parent   ...   member ... = ... parent.meth</code></td>
      <td>F#</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>accessing child method</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">inner</code></td>
      <td>Beta</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="package-module">Package, Module</h2>

<ul>
  <li>package scope</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">.</code></td>
      <td>Ada, C#, CoffeeScript, E, F#, Go, Haskell, Java, Modula-3, OCaml, Pascal, Python, Ruby, SML, Squeak</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:</code></td>
      <td>XML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">::</code></td>
      <td>C++, merd, Perl, Ruby, Squeak, Tcl, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">: ::(69)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:-</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td>```</td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">__</code></td>
      <td>Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>declare</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge"><span class="k">package</span> <span class="n">p</span><span class="p">;</span></code></td>
      <td>Java, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">namespace p { ... }</code></td>
      <td>C#, C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">namespace p ...</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">namespace P;</code></td>
      <td>PHP5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">namespace eval p ...</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">module p where ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">module P ... end</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">module P = struct ... end</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ module "p"; ... }</code></td>
      <td>YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:- module(p)</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">p = module() ... end module</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(defpackage p ...)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">automatically done based on the file name</code></td>
      <td>OCaml, Python, Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge"><span class="k">package</span> <span class="n">declare</span><span class="p">(</span><span class="m">70</span><span class="p">)</span></code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Begin["p</code>”] … End[]`</td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">BeginPackage["p</code>”] … EndPackage[]`</td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;node xmlns="namespace"&gt; ... &lt;/node&gt;</code></td>
      <td>XML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge"><span class="k">package</span> <span class="n">p</span> <span class="n">is</span>    <span class="p">--</span> <span class="n">Declare</span> <span class="k">public</span> <span class="k">package</span> <span class="n">members</span> <span class="n">here</span> <span class="n">private</span>    <span class="p">--</span> <span class="n">Declare</span> <span class="n">private</span> <span class="k">package</span> <span class="n">members</span> <span class="n">here</span> <span class="k">end</span> <span class="n">p</span><span class="p">;</span>  <span class="k">package</span> <span class="n">body</span> <span class="n">p</span> <span class="n">is</span>  <span class="p">...</span> <span class="p">--</span> <span class="n">Define</span> <span class="k">package</span> <span class="n">implementation</span> <span class="n">here</span> <span class="k">end</span> <span class="n">p</span><span class="p">;</span></code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge"><span class="k">package</span> <span class="n">p</span></code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>selective export
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">module p (name1, name2, ...) where ...</code>                     | Haskell     |
| <code class="highlighter-rouge">@ISA = qw(Exporter); @EXPORT = qw(name1 name2 ...);</code>        | Perl        |
| <code class="highlighter-rouge"><span class="k">package</span> <span class="n">p</span> <span class="n">is</span> <span class="p">...</span> <span class="k">end</span><span class="p">;</span> <span class="k">package</span> <span class="n">body</span> <span class="n">p</span> <span class="n">is</span> <span class="p">...</span> <span class="k">end</span><span class="p">;</span></code>           | Ada         |
| <code class="highlighter-rouge">p = module() export name1, name2, ...; ... end module</code>      | Maple       |
| <code class="highlighter-rouge">(export 'name1 'name2)</code>                                     | Common Lisp |
| <code class="highlighter-rouge">attached to each name (public, private...)</code>                 | Java, Pike  |
| <code class="highlighter-rouge">namespace export name1</code>                                     | Tcl         |
| <code class="highlighter-rouge">namespace p   val name1 : type1   ...</code>                      | F#          |
| <code class="highlighter-rouge">append_features</code>                                            | Ruby        |
| <code class="highlighter-rouge">module type PType = sig val name1 : type1 ... end module P : PType  = struct ... end</code> | OCaml       |
| <code class="highlighter-rouge">all files in package directory are exported. files in /private sub-directory are not exported, but can be used by the package itself</code> | Matlab      |
| <code class="highlighter-rouge">__all__ = [ ... ]</code>                                          | Python      |
| <code class="highlighter-rouge">Identifier is only exported if the first character of its name is an Unicode upper case letter; and the identifier is declared in the package block or it is a field name or method name. No other identifiers are exported</code> | Go          |</p>

<ul>
  <li>
    <p>import</p>

    <p>everything into current namespace
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">use p(71)</code>                       | Perl        |
| <code class="highlighter-rouge">uses p</code>                          | Pascal      |
| <code class="highlighter-rouge">using p</code>                         | C#          |
| <code class="highlighter-rouge">using namespace p;</code>              | C++         |
| <code class="highlighter-rouge">(use-package 'p)</code>                | Common Lisp |
| <code class="highlighter-rouge">open p</code>                          | F#, OCaml   |
| <code class="highlighter-rouge">import</code>                          | Pike        |
| <code class="highlighter-rouge">import p</code>                        | Haskell     |
| <code class="highlighter-rouge">IMPORT p;</code>                       | Modula-2    |
| <code class="highlighter-rouge">import p.*</code>                      | Java        |
| <code class="highlighter-rouge">import "p"</code>                      | YCP         |
| <code class="highlighter-rouge">from p import *</code>                 | Python      |
| <code class="highlighter-rouge">with p; use p;</code>                  | Ada         |
| <code class="highlighter-rouge">namespace import p *</code>            | Tcl         |
| <code class="highlighter-rouge">inherit c export {NONE} all end</code> | Eiffel      |
| <code class="highlighter-rouge">include or even extend</code>          | Ruby        |
| <code class="highlighter-rouge">do</code>                              | Rebol       |
| <code class="highlighter-rouge">addpath</code>                         | Matlab      |
| <code class="highlighter-rouge">. p</code>                             | BourneShell |
| <code class="highlighter-rouge">source p</code>                        | BourneShell |
| <code class="highlighter-rouge">builtin -f /path/to/lib.so</code>      | KornShell   |
| <code class="highlighter-rouge">&lt;&lt; p</code><code class="highlighter-rouge">                           | Mathematica |
| </code>Get[“p<code class="highlighter-rouge">"]</code>                       | Mathematica |
| <code class="highlighter-rouge">Needs["p</code>”]<code class="highlighter-rouge">                     | Mathematica |
| </code>use P1\P;<code class="highlighter-rouge">                       | PHP5        |
| </code>use P1\P as Q;`                  | PHP5        |</p>

    <p>selectively</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">import p (name1, name2, ...)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">import p.name1; import p.name2</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(import '(p:name1 p:name2))</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">use p qw(name1 name2 ...)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">from p import name1, name2, ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FROM p IMPORT name1, name2, ...;</code></td>
      <td>Modula-2</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">namespace import p name1</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">using p::name1; using p::name2; ...</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">with p; use type p.type1; ...</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">with(p[name1, name2,])</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">def name := &lt;import:p.name&gt;</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">:- use_module(name1, name2, ...)</code></td>
      <td>Prolog</td>
    </tr>
  </tbody>
</table>

<p>package (ie. load the package)</p>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">import p</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">use p;(72)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">require p</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">require "p"</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">require, "p"</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(require 'p)(73)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">with p;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">with(p)</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge"><span class="k">package</span> <span class="n">require</span> <span class="n">p</span></code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">automatically done(74)</code></td>
      <td>Java, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">import "p"</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="strings">Strings</h2>

<ul>
  <li>type name</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">char[]</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char const[]</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string</code></td>
      <td>C#, C++, F#, Go, Maple, OCaml, Pascal, PHP, Pike, SML, Vimscript, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string!</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">String</code></td>
      <td>Ada, C#, CoffeeScript, Haskell, Java, JavaScript, merd, Ruby, Smalltalk, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">STRING</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">str</code></td>
      <td>Python, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Str</code></td>
      <td>Perl6, Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NSString *</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CHAR, VARCHAR(size)</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Sequence</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>character type name</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">char</code></td>
      <td>C, C#, C++, F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char!</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Char</code></td>
      <td>Haskell, merd, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Character</code></td>
      <td>Ada, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CHARACTER</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rune</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>character “z”</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">'z'</code></td>
      <td>Ada, B, C, C#, C++, Classic REXX, E, Eiffel, F#, Go, Haskell, Matlab, OCaml, Pascal, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"z"</code></td>
      <td>BourneShell, Classic REXX, Maple, merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"z</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$z</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#\z</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#"z"</code></td>
      <td>Rebol, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;z</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">?z</code></td>
      <td>Emacs Lisp, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char z, [char] z(75)</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>strings</p>

    <p>with no interpolation of variables
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">'...'</code>                                               | Beta, BourneShell, Classic REXX, CoffeeScript, CSS, FishShell, JavaScript, Lua, Matlab, Pascal, Perl, Perl6, PHP, Prolog, Python, Ruby, Smalltalk, SQL92, Vimscript, XPath, YAML |
| <code class="highlighter-rouge">"..."</code>                                               | Ada, Awk, C, C#, C++, Classic REXX, Common Lisp, CSS, Dylan, E, Eiffel, Emacs Lisp, F#, FL, Go, Haskell, Io, Java, JavaScript, Lua, Maple, Mathematica, Modula-3, MUMPS, OCaml, Oz, Pike, Pliant, Prolog, Python, Rebol, Scheme, SML, XPath, YAML, YCP |
| <code class="highlighter-rouge">"...</code>                                                | Logo                                                         |
| <code class="highlighter-rouge">'''...'''</code>                                           | Python                                                       |
| <code class="highlighter-rouge">"""..."""</code>                                           | Io, Python                                                   |
| <code class="highlighter-rouge">[[ ... ]]</code>                                           | Lua                                                          |
| <code class="highlighter-rouge">R"[ ... ]"</code>                                          | C++-0x                                                       |
| <code class="highlighter-rouge">&lt;&lt;'MARK' ... MARK</code>                                   | BourneShell, Perl, Ruby                                      |
| <code class="highlighter-rouge">&lt;&lt;&lt;'MARK' ... MARK(76)</code>                              | PHP5                                                         |
| <code class="highlighter-rouge">{...{...}...}</code>                                       | Tcl                                                          |
| <code class="highlighter-rouge">(...)</code>                                               | PostScript                                                   |
| <code class="highlighter-rouge">q(...(...)...), q[...], q{...}, q&lt;...&gt;, q/.../</code>      | Perl, Perl6                                                  |
| <code class="highlighter-rouge">%q(...(...)...), %q[...], %q{...}, %q&lt;...&gt;, %q/.../</code> | Ruby                                                         |
| <code class="highlighter-rouge">q(...(...)...)</code>                                      | merd                                                         |
| <code class="highlighter-rouge">@"...""..."</code>                                         | C#                                                           |
| <code class="highlighter-rouge">s"..."</code>                                              | Forth                                                        |
| <code class="highlighter-rouge">@"..."</code>                                              | Objective-C                                                  |</p>

    <p>with interpolation of variables
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">...(77)</code>                                                    | Tcl                                           |
| <code class="highlighter-rouge">"... $v ..."</code>                                               | BourneShell, FishShell, Perl, Perl6, PHP, Tcl |
| <code class="highlighter-rouge">"... {v} ..."</code>                                              | merd                                          |
| <code class="highlighter-rouge">"... #{v} ..." "... #$v ..." "... #@v ..." "... #@@v ..."</code>  | CoffeeScript, Ruby                            |
| <code class="highlighter-rouge">&lt;&lt;MARK ... $v ... MARK</code>                                     | BourneShell, Perl                             |
| <code class="highlighter-rouge">&lt;&lt;MARK ... #{v} ... MARK</code>                                   | Ruby                                          |
| <code class="highlighter-rouge">&lt;&lt;&lt;MARK ... $v ... MARK</code>                                    | PHP                                           |
| <code class="highlighter-rouge">qq(...(... $v ...)...), qq[...], qq{...}, qq&lt;...&gt;, qq/.../</code> | Perl, Perl6                                   |
| <code class="highlighter-rouge">%Q(...(... #{v} ...)...), %Q[...], %Q{...}, %Q&lt;...&gt;, %Q/.../</code> | Ruby                                          |
| <code class="highlighter-rouge">qq(...(... {v} ...)...)</code>                                    | merd                                          |
| <code class="highlighter-rouge">"... #{v} ..." interpolate</code>                                 | Io                                            |
| <code class="highlighter-rouge">"... %(v)s ..." % vars()</code>                                   | Python                                        |</p>

    <p>end-of-line (without writing the real CR or LF character)</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">\n</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"\n"</code></td>
      <td>C, C#, C++, CoffeeScript, FishShell, Go, Haskell, Io, Java, JavaScript, Lua, Maple, Mathematica, OCaml, Perl, Perl6, PHP, Pike, Python, Ruby, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"*n"</code></td>
      <td>B, BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"%N"</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"^/"</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"~%"(78)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"[lf]"</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">vb_nl</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;N&gt;(79)</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>multi-line</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">all strings allow multi-line strings</code></td>
      <td>BourneShell, Common Lisp, E, <br />Emacs Lisp, F#, FishShell, Io, Maple,<br /> Mathematica, OCaml, Pascal,<br /> Perl, Perl6, PHP, Ruby, Scheme, Smalltalk, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"...", {...}</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@"..."</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'''...''', """..."""</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[[ ... ]]</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{...}</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"...\n" "...\n"</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">... "...\n\     \...\n"</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"...", "..."</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"...%N% %...%N"</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">""" ... """</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">...</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>convert something to a string (see also string interpolation)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">show</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_s, to_str, inspect, String()</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_string</code></td>
      <td>merd, Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">tostring</code></td>
      <td>Lua, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toString</code></td>
      <td>CoffeeScript, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToString</code></td>
      <td>C#, F#, Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">String</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">perl</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Dumper</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"" . e</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"" ~ e</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"" + e</code></td>
      <td>CoffeeScript, E, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string</code></td>
      <td>Pliant, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">str, </code>e<code class="highlighter-rouge">, repr</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">out</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cvs</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">T'Image(e)(80)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asString</code></td>
      <td>Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">printString</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">as(&lt;string&gt;, e)</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(string) e</code></td>
      <td>PHP, Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">convert(e,string)</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(coerce e 'string)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">prin1-to-string</code></td>
      <td>Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to string! / to-string / to ""</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">description</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pr1</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unneeded, all values are strings</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string(e)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>serialize (marshalling)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">export-clixml</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">serialize</code></td>
      <td>Io, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Marshal.to_string</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Marshal.dump</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Data.Binary.encode</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">BinaryFormatter.Serialize</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">storeBinaryOn</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Storable::store</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pickle.dump(81)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(with-standard-io-syntax (write obj stream))</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">T'Output(80)</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>unserialize (un-marshalling)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">import-clixml</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unserialize</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Marshal.from_string</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Marshal.load</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Data.Binary.decode</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">BinaryFormatter.Deserialize</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">readBinaryFrom</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pickle.load</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(with-standard-io-syntax (read obj stream))</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Storable::store</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">doString</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">T'Input(80)</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>sprintf-like</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">sprintf</code></td>
      <td>Awk, C, C++, F#, Maple, Matlab, merd, OCaml, Perl, Perl6, PHP, Pike, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">printf</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">%</code></td>
      <td>Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">format</code></td>
      <td>Java, Lua, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">format(82)</code></td>
      <td>Common Lisp, Erlang, Scheme-SRFI28</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Format</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">putFormat</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">stringWithFormat</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">expandMacrosWith(82)</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Storable::retrieve</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fmt.Sprintf</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>simple print</p>

    <p>on strings
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">puts</code>              | C, Dylan, Tcl                           |
| <code class="highlighter-rouge">print</code>             | Awk, Basic, Java, Maple, merd, PHP, SML |
| <code class="highlighter-rouge">write</code>             | JavaScript, Pascal, Pike, Yorick        |
| <code class="highlighter-rouge">putStr</code>            | Haskell                                 |
| <code class="highlighter-rouge">print_string</code>      | F#, OCaml                               |
| <code class="highlighter-rouge">console</code>           | Pliant                                  |
| <code class="highlighter-rouge">writeln</code>           | JavaScript, Pascal                      |
| <code class="highlighter-rouge">write-string</code>      | Common Lisp                             |
| <code class="highlighter-rouge">putStrLn</code>          | Haskell                                 |
| <code class="highlighter-rouge">Put_Line</code>          | Ada                                     |
| <code class="highlighter-rouge">display</code>           | Cobol                                   |
| <code class="highlighter-rouge">message</code>           | Emacs Lisp                              |
| <code class="highlighter-rouge">put_string</code>        | Eiffel                                  |
| <code class="highlighter-rouge">show</code>              | Smalltalk                               |
| <code class="highlighter-rouge">print_endline(83)</code> | OCaml                                   |
| <code class="highlighter-rouge">println(83)</code>       | Java, merd                              |
| <code class="highlighter-rouge">put_chars</code>         | Erlang                                  |
| <code class="highlighter-rouge">echo(84)</code>          | BourneShell, FishShell, PHP             |
| <code class="highlighter-rouge">type</code>              | Forth                                   |
| <code class="highlighter-rouge">putText</code>           | Beta                                    |
| <code class="highlighter-rouge">say</code>               | Classic REXX                            |
| <code class="highlighter-rouge">p or i</code>            | GNU-sed                                 |
| <code class="highlighter-rouge">fmt.Print</code>         | Go                                      |
| <code class="highlighter-rouge">echom</code>             | Vimscript                               |</p>

    <p>on simple objects
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">print</code>           | Perl, Perl6 |
| <code class="highlighter-rouge">say(83)</code>         | Perl6       |
| <code class="highlighter-rouge">puts(83)</code>        | Tcl         |
| <code class="highlighter-rouge">puts -nonewline</code> | Tcl         |</p>

    <p>on any objects
|规则 | 语言 |
| ———————- | ————– |
| <code class="highlighter-rouge">print</code>                                                      | Io, Logo, Lua, Ruby             |
| <code class="highlighter-rouge">print(83)</code>                                                  | Dylan, Haskell, Python, Rebol   |
| <code class="highlighter-rouge">Print</code>                                                      | Mathematica                     |
| <code class="highlighter-rouge">print e,</code>                                                   | Python                          |
| <code class="highlighter-rouge">println(83)</code>                                                | Io                              |
| <code class="highlighter-rouge">prin</code>                                                       | Rebol                           |
| <code class="highlighter-rouge">Put</code>                                                        | Ada                             |
| <code class="highlighter-rouge">p(83)</code>                                                      | Ruby                            |
| <code class="highlighter-rouge">puts(85)</code>                                                   | Ruby                            |
| <code class="highlighter-rouge">display</code>                                                    | Scheme                          |
| <code class="highlighter-rouge">write</code>                                                      | Common Lisp, Io, Prolog, Scheme |
| <code class="highlighter-rouge">writeln(83)</code>                                                | Io                              |
| <code class="highlighter-rouge">print</code>                                                      | Common Lisp                     |
| <code class="highlighter-rouge">printOn</code>                                                    | Smalltalk                       |
| <code class="highlighter-rouge">princ prin1</code>                                                | Common Lisp, Emacs Lisp         |
| <code class="highlighter-rouge">print_any</code>                                                  | F#                              |
| <code class="highlighter-rouge">WriteLine</code>                                                  | C#, F#                          |
| <code class="highlighter-rouge">nothing - just remove ";" at the end of the expression, and it will print it</code> | Matlab                          |
| <code class="highlighter-rouge">disp</code>                                                       | Matlab                          |</p>

    <p>printf-like
|规则 | 语言 |
| ———— | ———————————————————— |
| <code class="highlighter-rouge">printf</code>     | Awk, C, C++, F#, Haskell, KornShell, Maple, Matlab, merd, OCaml, Perl, PHP, Ruby |
| <code class="highlighter-rouge">write</code>      | Pike                                                         |
| <code class="highlighter-rouge">WriteLine</code>  | C#                                                           |
| <code class="highlighter-rouge">putFormat</code>  | Beta                                                         |
| <code class="highlighter-rouge">format(82)</code> | Common Lisp, Prolog                                          |
| <code class="highlighter-rouge">fmt.Printf</code> | Go                                                           |</p>
  </li>
  <li>
    <p>string equality &amp; inequality</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">eq ne</code></td>
      <td>Perl, Perl6, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strcmp</code></td>
      <td>C, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== !=(Vimscript: whether or not == and != are case-sensitive depends on user settings.)</code></td>
      <td>CoffeeScript, Go, JavaScript, Pike, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">==? !=?(86)</code></td>
      <td>Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">==# !=#(87)</code></td>
      <td>Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== !==</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== ~=</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= \=</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">isEqualToString(88)</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== !=</code></td>
      <td>Awk, C#, C++, E, Io, merd, Python, Ruby, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== &lt;&gt;</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== /=</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== \=</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= !=</code></td>
      <td>BourneShell, FishShell, Maple, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= /=</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= \=</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= &lt;&gt;</code></td>
      <td>Beta, F#, OCaml, Pliant, SML, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">= ~=</code></td>
      <td>Dylan, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== \== or = &lt;&gt; \=</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">=== =!= / == !=(20)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">== ~=</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">equal?</code></td>
      <td>Ruby, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">equals</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">equal, equalp</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">is_equal</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">isEqual</code></td>
      <td>Objective-C</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>string size</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">length</code></td>
      <td>Awk, Beta, C++, CoffeeScript, Common Lisp, Eiffel, F#, Haskell, Java, JavaScript, Maple, Matlab, Objective-C, OCaml, Perl, PostScript, Prolog, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">LENGTH</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'Length</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">length?</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">size</code></td>
      <td>C++, E, Io, Ruby, Smalltalk, SML, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Length</code></td>
      <td>C#, F#, Modula-3, Oz, Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">len</code></td>
      <td>Go, Pliant, Python, Vimscript, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strlen</code></td>
      <td>C, PHP, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string length</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string-length</code></td>
      <td>Scheme, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringLength</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sizeof</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">count</code></td>
      <td>Eiffel, Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">bytes chars</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">CHARACTER_LENGTH</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">atom_length</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">wc -c</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">${#v}</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dup(89)</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>string concatenation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">+</code></td>
      <td>C#, C++, CoffeeScript, E, Eiffel, F#, Go, Java, JavaScript, merd, MSH, Pascal, Pike, Pliant, Python, Ruby, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">.</code></td>
      <td>Perl, PHP, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">..</code></td>
      <td>Io, Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">,</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>D, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;</code></td>
      <td>Ada, Modula-3, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">^</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">_</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">||</code></td>
      <td>Cecil, Classic REXX, Icon, Maple, PL/I, SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">++</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$a$b</code></td>
      <td>BourneShell, FishShell, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concatenate</code></td>
      <td>Common Lisp, Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string-append</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringJoin</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cat</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Cat</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strcat</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concat</code></td>
      <td>XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">append</code></td>
      <td>Beta, Prolog, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">stringByAppendingString</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td>``</td>
      <td>Awk, Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[string1 string2]</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">word</code></td>
      <td>Logo</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>duplicate n times</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">*</code></td>
      <td>Ada, E, Pike, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">x</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">times</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">repeat</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">repeated</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">str_repeat</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string repeat</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strrep</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">repmat</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">insert/dup</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">COPIES</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cat(s$n)</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concat $ replicate</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strings.Repeat</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>upper / lower case character</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">upcase / downcase</code></td>
      <td>Emacs Lisp, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uc / lc</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upper / lower(90)</code></td>
      <td>Lua, Matlab, Pliant, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toUpper / toLower</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_upper / to_lower</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">To_Upper / To_Lower</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toUpperCase / toLowerCase</code></td>
      <td>CoffeeScript, E, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upper_case / lower_case</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uppercase / lowercase</code></td>
      <td>F#, Logo, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strupper / strlower</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strtoupper / strtolower</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToUpper / ToLower</code></td>
      <td>C#, F#, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toupper / tolower</code></td>
      <td>Awk, C, C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string toupper / string tolower</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asLowercase / asUppercase</code></td>
      <td>Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upCase / lowCase</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uppercase form / lowercase form</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char-upcase / char-downcase</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char_type(C_, to_upper(C)), char_type(C_, to_lower(C))</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">\U / \L / \C</code></td>
      <td>GNU-sed</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unicode.ToUpper / unicode.ToLower</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>uppercase / lowercase / capitalized string</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">upcase / downcase</code></td>
      <td>Emacs Lisp, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upper / lower</code></td>
      <td>Matlab, SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upper / lower / capitalize</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uppercase/lowercase</code></td>
      <td>F#, Logo, OCaml, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upcase_atom/downcase_atom</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toUpperCase / toLowerCase</code></td>
      <td>CoffeeScript, E, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToUpperCase / ToLowerCase</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToUpper / ToLower</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_upper / to_lower</code></td>
      <td>Ada, Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toupper / tolower</code></td>
      <td>Awk, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uc / lc</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">UpperCase / LowerCase</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTools[UpperCase] / StringTools[LowerCase] / StringTools[Capitalize]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uppercaseString / lowercaseString / capitalizedString</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">UCase / LCase</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strtoupper / strtolower</code></td>
      <td>PHP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strupper / strlower</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string toupper / string tolower / string totitle</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string-upcase / string-downcase</code></td>
      <td>Common Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asLowercase / asUppercase / asUppercaseFirst</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asLowercase / asUppercase / makeFirstCharacterUppercase</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">upcase_atom / downcase_atom</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">makeLC / makeUC</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parse upper var in_var out_var / parse lower var in_var out_var</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strings.ToUpper / strings.ToLower / strings.Title</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>ascii to character</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">chr</code></td>
      <td>F#, Haskell, OCaml, Pascal, Perl, Perl6, PHP, Python, Ruby, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">chr$</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">format %c $c</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toChar</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strchar</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">from_integer</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fromCharCode</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FromCharacterCode</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">character</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Character value: c</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asCharacter</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">code-char</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">integer-&gt;char</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'Val</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(char) c</code></td>
      <td>C, C#, C++, Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to char! / to-char</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">X2C, D2C</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$CHAR(s)</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char_code</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ascii</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTools[Char]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">utf8.DecodeRuneInString(s)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>character to ascii</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">ord</code></td>
      <td>F#, Haskell, Pascal, Perl, Perl6, PHP, Python, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asc</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">getNumericValue</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">charCodeAt</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asciiValue</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">code</code></td>
      <td>Eiffel, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char-code</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char-&gt;integer</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s[0]</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s 0 get</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s at(0)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">scan $s %c</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strbyte</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toInteger</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'Pos</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">number</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(int) c</code></td>
      <td>C, C#, C++, Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to integer! / to-integer</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ToCharacterCode</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">C2X, C2D</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$ASCII(s)</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(done automatically when applying mathematical operations on char, such as +)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char_code</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTools[Ord]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string(c)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>accessing n-th character</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">s[n]</code></td>
      <td>C, C#, C++, E, Go, Maple, PHP, Pike, Python, Ruby, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s(n)</code></td>
      <td>Ada, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s:n</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s.[n]</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s !! n</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s @ n</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s/:n</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string index s n</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char, aref, schar, svref</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">GetChar</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s at(n)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">at(91)</code></td>
      <td>C++, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">aref</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">char(s, i)</code></td>
      <td>B</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">charAt</code></td>
      <td>CoffeeScript, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">characterAtIndex</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">n -&gt; s.inxGet</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string-ref</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTake[s, {n}]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$EXTRACT(s, n)</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">item</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">over n chars + c@</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s/.{n}(.).*/\1/</code></td>
      <td>GNU-sed</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>extract a substring</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">s[n..m]</code></td>
      <td>CoffeeScript, Maple, Pike, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s.[n..m]</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s(n..m)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s(n:m)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s(n,m+1)</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s[n:m+1]</code></td>
      <td>Go, Python, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s[n,len]</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s n len</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strndup(s + n, len)</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">substring</code></td>
      <td>Eiffel, Java, Scheme, SML, XPath, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Substring</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">substr</code></td>
      <td>C++, Perl, Perl6, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">SUBSTR</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub</code></td>
      <td>F#, Lua, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">SUB</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">subseq</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">slice</code></td>
      <td>CoffeeScript, Io, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mid$</code></td>
      <td>JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string range</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTake[s, {n, m}]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strpart(s, n, m)</code></td>
      <td>Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">copy/part at s n len</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">copy/part at s n at s m</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s copyFrom: n to: m</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(n,m)-&gt;s.sub</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[s substringWithRange:NSMakeRange(n, len)]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">SUBSTRING(s FROM n len)</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$EXTRACT(s, n, m)</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub_string / sub_atom</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(take len . drop n) s</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">over n chars + len</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s/.{n}(.{len}).*/\1/</code></td>
      <td>GNU-sed</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>locate a substring</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">index</code></td>
      <td>Ada, Perl, Perl6, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indexOf</code></td>
      <td>CoffeeScript, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IndexOf</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indexOfString</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">startOf</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">search</code></td>
      <td>Common Lisp, Pike, PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTools[Search]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringPosition</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strstr strchr</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find</code></td>
      <td>C++, Logo, Lua, Python, Rebol, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">findSeq</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">findSubstring</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strfind</code></td>
      <td>Matlab, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strpos</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$FIND</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">index_non_blank / find_token</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">substring_index</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rangeOfString</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">POS</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">POSITION(needle IN s)</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sub_string / sub_atom</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string first</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strings.Index</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>locate a substring (starting at the end)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">rindex</code></td>
      <td>OCaml, Perl, Perl6, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rfind</code></td>
      <td>C++, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find/last</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strrchr</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">index(Going =&gt; Backward)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lastStartOf</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lastIndexOf</code></td>
      <td>CoffeeScript, Java, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">last_index_of(92)</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">LastIndexOf</code></td>
      <td>C#, F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lastIndexOfString</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">string last</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(search substring string :from-end t)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[string rangeOfString:substring options:NSBackwardsSearch]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">LASTPOS</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t=strfind(s,p), t(end)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strrpos</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringTools[SearchAll](s,p)[-1]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strings.LastIndex</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="booleans">Booleans</h2>

<ul>
  <li>type name</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">Bool</code></td>
      <td>Haskell, Perl6, Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">bool</code></td>
      <td>C#, C++, C99, F#, Go, OCaml, PHP, Python, SML, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Boolean</code></td>
      <td>Ada, Lua, Pascal, Smalltalk, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">boolean</code></td>
      <td>CoffeeScript, Common Lisp, Java, JavaScript, Maple, PHP, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">BOOLEAN</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">logic!</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">logical</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>false value</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td>Ada, BCPL, Beta, BourneShell, C#, C++, C99, CoffeeScript, E, F#, FL, Forth, Go, Io, Java, JavaScript, Logo, Lua, Maple, Matlab, OCaml, Oz, Pascal, PHP, Pliant, PostScript, Rebol, Ruby, Smalltalk, SML, Tcl, YAML, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">False</code></td>
      <td>Eiffel, Haskell, Mathematica, merd, Python, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FALSE</code></td>
      <td>Modula-3, SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false()</code></td>
      <td>XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#f</code></td>
      <td>Dylan, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">n</code></td>
      <td>YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nil</code></td>
      <td>Common Lisp, Emacs Lisp, Io, Lua, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">no</code></td>
      <td>CoffeeScript, Tcl, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">No</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">none</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">None</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">null</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NULL</code></td>
      <td>C, C++, C99, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">off</code></td>
      <td>CoffeeScript, Tcl, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">undef</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">undefined</code></td>
      <td>CoffeeScript, JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fail</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FAIL</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array containing at least one false value</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exit status different from 0</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">0(93)</code></td>
      <td>Awk, B, C, C++, C99, Classic REXX, CoffeeScript, Forth, JavaScript, Matlab, MUMPS, Perl, Perl6, PHP, Pike, Python, Tcl, Visual Basic, XPath, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">0.0</code></td>
      <td>Matlab, Perl, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NaN</code></td>
      <td>CoffeeScript, JavaScript, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">""</code></td>
      <td>Awk, CoffeeScript, JavaScript, Perl, Perl6, PHP, Python, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">"0"</code></td>
      <td>Awk, Perl, Perl6, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">''</code></td>
      <td>CoffeeScript, Matlab, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'\0'</code></td>
      <td>C, C++, C99</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">()</code></td>
      <td>Perl, Perl6, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[]</code></td>
      <td>Matlab, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{}</code></td>
      <td>Matlab, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array()</code></td>
      <td>PHP</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>true value</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">TRUE</code></td>
      <td>Modula-3, SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">True</code></td>
      <td>Eiffel, Haskell, Mathematica, merd, Python, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td>Ada, BCPL, Beta, BourneShell, C#, C++, CoffeeScript, E, F#, FL, Forth, Go, Io, Java, JavaScript, Logo, Maple, OCaml, Oz, Pascal, PHP, Pliant, PostScript, Prolog, Rebol, Ruby, Smalltalk, SML, Tcl, YAML, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">true()</code></td>
      <td>XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">t</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#t</code></td>
      <td>Dylan, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">y</code></td>
      <td>YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">yes</code></td>
      <td>CoffeeScript, Tcl, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Yes</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">on</code></td>
      <td>CoffeeScript, Tcl, YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exit status 0</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">anything not false</code></td>
      <td>Awk, B, C, C++, Common Lisp, Dylan, Emacs Lisp, Matlab, MUMPS, Perl, Perl6, Pike, Python, Rebol, Ruby, Scheme, XPath, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">1</code></td>
      <td>Classic REXX, MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">non zero number</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">non-zero-numbers</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">-1</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>logical not</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">!</code></td>
      <td>Awk, B, C, C#, C++, CoffeeScript, E, Go, Java, JavaScript, Mathematica, Perl, Perl6, PHP, Pike, Ruby, Tcl, Vimscript, YCP, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">not(94)</code></td>
      <td>Ada, Beta, CoffeeScript, Common Lisp, Eiffel, Emacs Lisp, F#, Haskell, Io, Logo, Lua, Maple, merd, OCaml, Pascal, Perl, Perl6, Pliant, PostScript, Prolog, Python, Rebol, Ruby, Scheme, Smalltalk, SML, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Not</code></td>
      <td>Oz, Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">NOT</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>BCPL, Dylan, Matlab, PL/I</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">^</code></td>
      <td>PL/I</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">\</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">=0</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>logical or / and</p>

    <p>short circuit
|规则 | 语言 |
| ——————– | ———————————————————— |
| <code class="highlighter-rouge">|| / &amp;&amp;</code>            | Awk, C, C#, C++, CoffeeScript, E, F#, Go, Haskell, Java, JavaScript, Mathematica, Matlab, merd, OCaml, Perl, Perl6, PHP, Pike, Ruby, Tcl, Vimscript, YCP, Yorick |
| <code class="highlighter-rouge">| / &amp;</code>              | B, BCPL, Dylan                                               |
| <code class="highlighter-rouge">or / and</code>           | CoffeeScript, Common Lisp, Emacs Lisp, Io, Logo, Lua, Modula-2, Perl, Perl6, PHP, Pliant, Python, Ruby, Scheme, Smalltalk |
| <code class="highlighter-rouge">OR / AND</code>           | Modula-3                                                     |
| <code class="highlighter-rouge">or / &amp;(95)</code>         | Modula-2                                                     |
| <code class="highlighter-rouge">any / all</code>          | Rebol                                                        |
| <code class="highlighter-rouge">orelse / andalso</code>   | SML                                                          |
| <code class="highlighter-rouge">orelse / andthen</code>   | Oz                                                           |
| <code class="highlighter-rouge">or else / and then</code> | Ada, Eiffel                                                  |
| <code class="highlighter-rouge">; / ,</code>              | Prolog                                                       |
| <code class="highlighter-rouge">&amp; / !</code>              | MUMPS                                                        |</p>

    <p>non short circuit (always evaluates both arguments)
|规则 | 语言 |
| ————– | ———————————————————— |
| <code class="highlighter-rouge">| / &amp;</code>        | C#, Classic REXX, Java, Matlab, Smalltalk                    |
| <code class="highlighter-rouge">or / and</code>     | Ada, Beta, Eiffel, Maple, Pascal, PostScript, Rebol, SML, XPath |
| <code class="highlighter-rouge">Or / And(96)</code> | Oz, Visual Basic                                             |
| <code class="highlighter-rouge">\/ / /\(15)</code>  | BCPL                                                         |
| <code class="highlighter-rouge">?| /</code>         | Perl6                                                        |</p>
  </li>
</ul>

<hr />

<h2 id="bags-and-lists">Bags and Lists</h2>

<ul>
  <li>type name</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">seq</code></td>
      <td>YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a list</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[a]</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a[]</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list</code></td>
      <td>Maple, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">List</code></td>
      <td>Io, Mathematica, Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Array or List</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ARRAY or LINKED_LIST</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Array or OrderedCollection</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ARRAY</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cell</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">vector</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Containers.Vectors.Vector or Ada.Containers.Doubly_Linked_Lists.List</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[]a</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>list concatenation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">+</code></td>
      <td>E, Eiffel, merd, PHP, Pike, Python, Ruby, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">,</code></td>
      <td>Maple, Matlab, Perl, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">@</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>D</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">++</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">|||</code></td>
      <td>Icon</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_merge</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">merge</code></td>
      <td>YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concat</code></td>
      <td>CoffeeScript, JavaScript, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concatenate</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nconc</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">append</code></td>
      <td>Beta, Common Lisp, Emacs Lisp, Go, Prolog, Rebol, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Append</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">appendSeq</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">arrayByAddingObjectsFromArray</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sentence</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Join</code></td>
      <td>Mathematica</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>list flattening</p>

    <p>one level depth
|规则 | 语言 |
| ———————— | ——————————– |
| <code class="highlighter-rouge">concat</code>                 | F#, Haskell, Mercury, SML        |
| <code class="highlighter-rouge">flatten</code>                | F#, Io, merd, OCaml, Prolog, YCP |
| <code class="highlighter-rouge">Flatten</code>                | Oz                               |
| <code class="highlighter-rouge">eval concat</code>            | Tcl                              |
| <code class="highlighter-rouge">ListTools[FlattenOnce]</code> | Maple                            |
| <code class="highlighter-rouge">{*}$l</code>                  | Tcl8.5                           |
| <code class="highlighter-rouge">"$l"</code>                   | FishShell                        |</p>

    <p>recursive
|规则 | 语言 |
| ——————– | ———– |
| <code class="highlighter-rouge">flatten</code>            | Pike, Ruby  |
| <code class="highlighter-rouge">ListTools[Flatten]</code> | Maple       |
| <code class="highlighter-rouge">Flatten</code>            | Mathematica |</p>
  </li>
  <li>
    <p>list constructor</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">[ a, b, c ](97)</code></td>
      <td>CoffeeScript, E, Haskell, JavaScript, Maple, Matlab, merd, Perl, Perl6, PHP5, PostScript, Prolog, Python, Ruby, SML, Vimscript, YAML, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">( a, b, c )</code></td>
      <td>Perl, Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ a, b, c }(98)</code></td>
      <td>C, C++, Lua, Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#(a, b, c)</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#(a b c)(99)</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ a. b. c }</code></td>
      <td>Squeak</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ a ; b ; c ]</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ a b c ]</code></td>
      <td>Logo, Oz, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">({ a, b, c })</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">'(a b c)</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;&lt; a, b, c &gt;&gt;</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list(a, b, c)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list</code></td>
      <td>Common Lisp, Dylan, Emacs Lisp, Scheme, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array(a, b, c)</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">new t[] { a, b, c }</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">new[] { a, b, c }</code></td>
      <td>C#3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">new List&lt;t&gt; { a, b, c}</code></td>
      <td>C#3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Array(a, b, c)(100)</code></td>
      <td>JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[NSArray arrayWithObjects:a, b, c, nil]</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">set l a b c</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">  - a   - b   - c</code></td>
      <td>YAML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[]t{a, b, c}</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>list/array indexing</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">a[i]</code></td>
      <td>B, BourneShell, C, C#, C++, CoffeeScript, Dylan, E, FishShell, Go, Java, JavaScript, KornShell, Lua, Maple, merd, Modula-3, MSH, Pascal, Perl, Perl6, PHP, Pike, Python, Ruby, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a*[i] or a!i or a*(i) depending on the version</code></td>
      <td>BCPL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a[[i]]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a[i]:default</code></td>
      <td>YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a(i)</code></td>
      <td>Ada, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a:i</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a/:i</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a.(i)</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a.[i]</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a !! i</code></td>
      <td>Haskell, Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a @ i</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a i get(101)</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a at(i)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">at(102)</code></td>
      <td>C++, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lindex</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nth</code></td>
      <td>Common Lisp, Emacs Lisp, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Nth</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">aref</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nth0 / nth1</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list-ref / vector-ref</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">element</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">slice</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">node[i]</code></td>
      <td>XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">objectAtIndex</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">item</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a i cells + @ (for write access: o a i cells + !</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>adding an element at the beginning (list cons)</p>

    <p>return the new list (no side-effect)
|规则 | 语言 |
| ———– | ——————————- |
| <code class="highlighter-rouge">:</code>         | Haskell, merd                   |
| <code class="highlighter-rouge">::</code>        | F#, OCaml, SML                  |
| <code class="highlighter-rouge">|</code>         | Oz                              |
| <code class="highlighter-rouge">[ e | l ]</code> | Erlang, Prolog                  |
| <code class="highlighter-rouge">[e l[]]</code>   | Maple                           |
| <code class="highlighter-rouge">[e l]</code>     | Matlab                          |
| <code class="highlighter-rouge">cons</code>      | Common Lisp, Emacs Lisp, Scheme |
| <code class="highlighter-rouge">pair</code>      | Dylan                           |
| <code class="highlighter-rouge">fput</code>      | Logo                            |
| <code class="highlighter-rouge">Prepend</code>   | Ada, Mathematica                |</p>

    <p>side-effect
|规则 | 语言 |
| ————— | ——————————————- |
| <code class="highlighter-rouge">unshift</code>       | CoffeeScript, JavaScript, Perl, Perl6, Ruby |
| <code class="highlighter-rouge">prepend</code>       | YCP                                         |
| <code class="highlighter-rouge">push_front</code>    | C++                                         |
| <code class="highlighter-rouge">addFirst</code>      | Smalltalk                                   |
| <code class="highlighter-rouge">insert</code>        | Rebol                                       |
| <code class="highlighter-rouge">put_first</code>     | Eiffel                                      |
| <code class="highlighter-rouge">push</code>          | Common Lisp, Io                             |
| <code class="highlighter-rouge">array_unshift</code> | PHP                                         |
| <code class="highlighter-rouge">PrependTo</code>     | Mathematica                                 |</p>
  </li>
  <li>
    <p>adding an element at index</p>

    <p>return the new list (no side-effect)
|规则 | 语言 |
| ————— | —————- |
| <code class="highlighter-rouge">linsert l i e</code> | Tcl              |
| <code class="highlighter-rouge">Insert</code>        | Ada, Mathematica |</p>

    <p>side-effect
|规则 | 语言 |
| ————————————————– | ———— |
| <code class="highlighter-rouge">[a insertObject:e atIndex:i]</code>                     | Objective-C  |
| <code class="highlighter-rouge">a.insert(i, e)</code>                                   | Python, Ruby |
| <code class="highlighter-rouge">a insertAt(e, i)</code>                                 | Io           |
| <code class="highlighter-rouge">a add: e beforeIndex: i / a add: e afterIndex: i</code> | Smalltalk    |
| <code class="highlighter-rouge">splice(@a, $i, 0, $e)</code>                            | Perl         |</p>
  </li>
  <li>
    <p>adding an element at the end</p>

    <p>return the new list (no side-effect)
|规则 | 语言 |
| ——————— | —————- |
| <code class="highlighter-rouge">[l e]</code>               | Matlab           |
| <code class="highlighter-rouge">push</code>                | merd             |
| <code class="highlighter-rouge">arrayByAddingObject</code> | Objective-C      |
| <code class="highlighter-rouge">lput</code>                | Logo             |
| <code class="highlighter-rouge">linsert l end e</code>     | Tcl              |
| <code class="highlighter-rouge">Append</code>              | Ada, Mathematica |</p>

    <p>side-effect
|规则 | 语言 |
| ———— | ——————————————- |
| <code class="highlighter-rouge">push</code>       | CoffeeScript, JavaScript, Perl, Perl6, Ruby |
| <code class="highlighter-rouge">push_back</code>  | C++                                         |
| <code class="highlighter-rouge">append</code>     | Go, Io, Pliant, Python, Rebol               |
| <code class="highlighter-rouge">AppendTo</code>   | Mathematica                                 |
| <code class="highlighter-rouge">lappend</code>    | Tcl                                         |
| <code class="highlighter-rouge">+=</code>         | Pliant                                      |
| <code class="highlighter-rouge">add</code>        | Java, Smalltalk, YCP                        |
| <code class="highlighter-rouge">put_last</code>   | Eiffel                                      |
| <code class="highlighter-rouge">array_push</code> | PHP                                         |
| <code class="highlighter-rouge">addObject</code>  | Objective-C                                 |</p>
  </li>
  <li>
    <p>first element</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">head</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Head</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">hd</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">car</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">first</code></td>
      <td>Eiffel, Io, Logo, Pliant, Rebol, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">First(103)</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">First_Element</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<p>iterator
|规则 | 语言 |
| ——- | —- |
| <code class="highlighter-rouge">head</code>  | Beta |
| <code class="highlighter-rouge">begin</code> | C++  |
| <code class="highlighter-rouge">First</code> | Ada  |</p>

<ul>
  <li>all but the first element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">tail</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Tail</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">tl</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">cdr</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Rest</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">butfirst</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">allButFirst</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l[1:]</code></td>
      <td>Go, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a(2:end)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">L = [_|ButFirst]</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lrange l 1 end</code></td>
      <td>Tcl</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>last element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">last</code></td>
      <td>E, Eiffel, Haskell, Io, Logo, Pliant, Prolog, Rebol, Scheme, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Last</code></td>
      <td>Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lastObject</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a[-1]</code></td>
      <td>Perl, Pike, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a(end)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">node[last()]</code></td>
      <td>XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(car (last l))</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lindex l end</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Last_Element</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l[len(l)-1:]</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<p>iterator
|规则 | 语言 |
| —— | —- |
| <code class="highlighter-rouge">Last</code> | Ada  |
|        |      |</p>

<ul>
  <li>all but the last element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">Most</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>get the first element and remove it</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">shift</code></td>
      <td>CoffeeScript, JavaScript, Perl, Perl6, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">shift!</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pop</code></td>
      <td>Common Lisp, Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">removeFirst</code></td>
      <td>Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_shift</code></td>
      <td>PHP</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>get the last element and remove it</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">pop</code></td>
      <td>CoffeeScript, E, Io, JavaScript, Perl, Perl6, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pop!</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_pop</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">removeLast</code></td>
      <td>Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">dequeue</code></td>
      <td>Logo</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>for each element do something</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">each</code></td>
      <td>merd, Pliant, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in l ...</code></td>
      <td>CoffeeScript, E, Maple, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in l: ...</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in l; do ...; done</code></td>
      <td>BourneShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in l do ...</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in l; ...; end</code></td>
      <td>FishShell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for (v in l) ...</code></td>
      <td>Awk, Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for (var v in l) { ... }</code></td>
      <td>JavaScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">For Each v in l ... Next</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v in range loop .. end loop</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach</code></td>
      <td>Logo, Lua, Perl, PHP, Pike, Rebol, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach (t v in l) ...</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach (v in l) ...</code></td>
      <td>C#3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach ($v in l) ...</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach(t v, l, { ... })</code></td>
      <td>YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l foreach(v, ...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for_each</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for-each</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">forall</code></td>
      <td>PostScript, Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ForAll</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">iter</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">do_all</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">app</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mapc</code></td>
      <td>Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mapM_</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Scan</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(dolist (v l) ...) (loop for v in l do ...) mapc</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list.iterate (# do current ... #)</code></td>
      <td>Beta</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l.Iterate(...)</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Iterate</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for i, v := range l {...}</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>transform a list (or bag) in another one</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">map</code></td>
      <td>Dylan, F#, Haskell, Io, Maple, Mercury, merd, OCaml, Perl, Pike, Python, Ruby, Scheme, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Map</code></td>
      <td>F#, Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mapcar</code></td>
      <td>Common Lisp, Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">maplist</code></td>
      <td>Prolog, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sublist</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">map / map.se</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for-each</code></td>
      <td>XSLT</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach or selected</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">collect</code></td>
      <td>Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">transform</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_map</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/@</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ f x | x &lt;- l ](104)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ f(x) for x in l ](104)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">magical: sin(x) computes sin on each element</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>transform two lists in parallel</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">map2</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">zipWith</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Zip</code></td>
      <td>Maple, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">map</code></td>
      <td>Dylan, Logo, Python, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">map.se</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mapcar</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">maplist2</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l1 with: l2 collect: ...</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">transform</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ListPair.map</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">magical: a binary function or operator is appliied on each element</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>find an element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">find</code></td>
      <td>C++, Common Lisp, F#, Haskell, merd, OCaml, Rebol, Ruby, Scheme-SRFI1, SML, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Find</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find_if</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find-if</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">first(22)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">detect</code></td>
      <td>Ruby, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">search</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ListTools[Search]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lsearch -exact</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">index</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indexOf</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">indexOfObject, indexOfObjectIdenticalTo</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">find(a == 3)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Position</code></td>
      <td>Mathematica</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>keep elements</p>

    <p>matching
|规则 | 语言 |
| ——————————- | ———————————————————— |
| <code class="highlighter-rouge">find_all</code>                      | F#, OCaml, Ruby                                              |
| <code class="highlighter-rouge">filter</code>                        | F#, Haskell, Mercury, merd, OCaml, Pike, Python, Scheme-SRFI1, SML, YCP |
| <code class="highlighter-rouge">filter!</code>                       | Scheme-SRFI1                                                 |
| <code class="highlighter-rouge">Filter</code>                        | Oz                                                           |
| <code class="highlighter-rouge">grep</code>                          | Perl, Perl6                                                  |
| <code class="highlighter-rouge">where</code>                         | MSH                                                          |
| <code class="highlighter-rouge">select</code>                        | Io, Maple, Ruby, Smalltalk                                   |
| <code class="highlighter-rouge">Select / Case</code>                 | Mathematica                                                  |
| <code class="highlighter-rouge">selectInPlace</code>                 | Io                                                           |
| <code class="highlighter-rouge">remove-if-not delete-if-not</code>   | Common Lisp                                                  |
| <code class="highlighter-rouge">choose</code>                        | Dylan                                                        |
| <code class="highlighter-rouge">array_filter</code>                  | PHP5                                                         |
| <code class="highlighter-rouge">[ x | x &lt;- l, p x ](104)</code>      | Haskell                                                      |
| <code class="highlighter-rouge">[ x for x in l if p(x) ](104)</code> | Python                                                       |
| <code class="highlighter-rouge">a(a == 3)</code>                     | Matlab                                                       |</p>

    <p>non matching
|规则 | 语言 |
| ——————— | ———– |
| <code class="highlighter-rouge">remove-if delete-if</code> | Common Lisp |
| <code class="highlighter-rouge">reject</code>              | Ruby        |</p>
  </li>
  <li>
    <p>partition a list: elements matching, elements non matching</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">partition</code></td>
      <td>F#, Haskell, merd, OCaml, Ruby, Scheme-SRFI1, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">partition!</code></td>
      <td>Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Partition</code></td>
      <td>Oz</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>split a list</p>

    <p>in 2 based on a predicate
|规则 | 语言 |
| ——- | ——- |
| <code class="highlighter-rouge">break</code> | Haskell |
| <code class="highlighter-rouge">span</code>  | Haskell |</p>

    <p>into sublists delimited by elements matching a predicate
|规则 | 语言 |
| ——————— | ———– |
| <code class="highlighter-rouge">split-sequence(105)</code> | Common Lisp |
| <code class="highlighter-rouge">ListTools[Split]</code>    | Maple       |</p>

    <p>into a list of lists of same value
|规则 | 语言 |
| ——- | ———– |
| <code class="highlighter-rouge">group</code> | Haskell     |
| <code class="highlighter-rouge">Split</code> | Mathematica |</p>

    <p>into sublists based on a predicate
|规则 | 语言 |
| ——— | ———– |
| <code class="highlighter-rouge">groupBy</code> | Haskell     |
| <code class="highlighter-rouge">Split</code>   | Mathematica |</p>
  </li>
  <li>
    <p>is an element in the list</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">member?</code></td>
      <td>Dylan, merd, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">include?</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">mem</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">member</code></td>
      <td>Common Lisp, Prolog, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Member</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">MemberQ</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">memq memv</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">memberp / member?</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">contains</code></td>
      <td>E, Io, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">containsObject</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">in</code></td>
      <td>CoffeeScript, JavaScript, Python, SQL92, Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">in_array</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">includes</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">elem</code></td>
      <td>Haskell, Mercury</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">has</code></td>
      <td>Eiffel</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">has_value</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ismember</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/elt/</code></td>
      <td>GNU-sed</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>is the predicate true for an element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">any(31)</code></td>
      <td>Haskell, Matlab, Mercury, Python, Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">any?</code></td>
      <td>Dylan, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">anySatisfy</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exists</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exists?</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">some</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Some</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ormap</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">detect</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>is the predicate true for every element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">all(31)</code></td>
      <td>Haskell, Mercury, Python, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">All</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">all?</code></td>
      <td>merd, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">allSatisfy</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">every</code></td>
      <td>Common Lisp, Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">every?</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for_all</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">andmap</code></td>
      <td>Maple</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>smallest / biggest element</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">min / max</code></td>
      <td>Common Lisp, Eiffel, Io, Java, Maple, Matlab, Perl6, PHP5, Pike, Prolog, Python, Ruby, Scheme, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Min / Max</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">minimum / maximum</code></td>
      <td>Haskell, Mercury, merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">minimum-of / maximum-of</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">min minstr / max maxstr(22)</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">min_element / max_element</code></td>
      <td>C++</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>join a list of strings in a string using a glue string</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">join(s, l)</code></td>
      <td>Perl, Perl6, PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">String.Join(s, l)</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">s.join(l)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l.join(s)</code></td>
      <td>CoffeeScript, JavaScript, Perl6, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l asStringWith: s</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">join l s</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">implode(s, l)</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ListTools[Join]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rjoin</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">join</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concat</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strcat</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">concat_atom</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l * s</code></td>
      <td>Pike, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(mapconcat 'identity l s)</code></td>
      <td>Emacs Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">componentsJoinedByString</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">intercalate</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">StringJoin @@ Riffle[l, s]</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">strings.Join</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>list size</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">size</code></td>
      <td>C++, Dylan, E, Io, Java, Matlab, merd, Pliant, Ruby, Scilab, Smalltalk, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sizeof</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">length</code></td>
      <td>C#, CoffeeScript, Common Lisp, Emacs Lisp, F#, Haskell, Java, JavaScript, Matlab, Mercury, OCaml, PostScript, Prolog, Ruby, Scheme, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Length</code></td>
      <td>Ada, F#, Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">length?</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">len</code></td>
      <td>Python, Vimscript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">llength</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">$LENGTH</code></td>
      <td>MUMPS</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">elems</code></td>
      <td>Perl6</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">getn</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">count</code></td>
      <td>Eiffel, FishShell, Objective-C, PHP, SQL92, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">numel</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">scalar @l</code></td>
      <td>Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nops</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">#</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">len(l)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>iterate with index</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">each_with_index</code></td>
      <td>merd, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">enumerate(l)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach($l as $i =&gt; $v)</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a foreach(i, e, ...)</code></td>
      <td>Io</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for i =&gt; v in l</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for (v in l, i from 0) ... end</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">forAllInd</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreachi</code></td>
      <td>Lua</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foreach(l; typ0 i; typ1 v) { ... }</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">withIndexDo</code></td>
      <td>Squeak</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">iteri</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IterateIndexed</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">MapIndexed</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(loop for v in l as i upfrom 0 do ...)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for v,i in l ...</code></td>
      <td>CoffeeScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">for i, v := range l {...}</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>remove duplicates</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">uniq</code></td>
      <td>merd, Perl6, Pike, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uniq!</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">uniq2</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unique(106)</code></td>
      <td>C++, Io, Matlab, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">nub</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_unique</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ListTools[MakeUnique]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">delete-duplicates</code></td>
      <td>Common Lisp, Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">delete-duplicates!</code></td>
      <td>Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">remove-duplicates</code></td>
      <td>Common Lisp, Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lsort -unique</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toset</code></td>
      <td>YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">distinct</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">set</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Union</code></td>
      <td>Mathematica</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>sort</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">sort(107)</code></td>
      <td>C#, C++, CoffeeScript, Common Lisp, E, Eiffel, F#, Haskell, Io, Java, JavaScript, Lua, Maple, Matlab, merd, OCaml, Perl, Perl6, PHP, Pike, Prolog, Python, Rebol, Ruby, Scheme, XSLT, YCP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sort!</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sorted</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Sort</code></td>
      <td>Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sort_by</code></td>
      <td>merd, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sortBy</code></td>
      <td>Haskell, Io, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">order by</code></td>
      <td>SQL92</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lsort</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asort</code></td>
      <td>Awk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sort-object</code></td>
      <td>MSH</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sortedArrayUsingSelector, sortUsingSelector</code></td>
      <td>Objective-C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">predsort / keysort / mergesort</code></td>
      <td>Prolog</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>reverse</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">reverse</code></td>
      <td>C++, CoffeeScript, Common Lisp, Dylan, Emacs Lisp, Haskell, Io, Java, JavaScript, Logo, Mercury, merd, Perl, Perl6, Pike, Prolog, Python, Rebol, Ruby, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Reverse</code></td>
      <td>C#, Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">reversed</code></td>
      <td>Python, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">reverse_copy</code></td>
      <td>C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rev</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Reverse_Elements</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">lreverse</code></td>
      <td>Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array_reverse</code></td>
      <td>PHP</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ListTools[Reverse]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fliplr flipud...</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">l[::-1]</code></td>
      <td>Python</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>list of couples from 2 lists</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">combine</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">zip</code></td>
      <td>F#, Haskell, Maple, merd, Perl6, Python, Ruby, Scheme-SRFI1, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pairlis(108)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">transpose</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Transpose</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[a b]</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>2 lists from a list of couples</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">split</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unzip</code></td>
      <td>F#, Haskell, merd, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unzip2</code></td>
      <td>Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">transpose</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Transpose</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">zip(*l)</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a(1,:), a(2,:)</code></td>
      <td>Matlab</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>lookup an element in a association list</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">lookup</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">assoc</code></td>
      <td>Common Lisp, Emacs Lisp, F#, OCaml, Ruby, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">assq</code></td>
      <td>Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">assv</code></td>
      <td>Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">get_assoc</code></td>
      <td>Prolog</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">select</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a.(e)</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a[e]</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">gprop</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/.</code></td>
      <td>Mathematica</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>list out of a bag</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">to_a</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">toArray</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">asArray</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_list</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">list</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">map-as(&lt;list&gt;, bag)</code></td>
      <td>Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[a.(:)]</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">array get</code></td>
      <td>Tcl</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>f(… f(f(init, e1), e2) …, en)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">foldl</code></td>
      <td>Haskell, Maple, Mercury, merd, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FoldL</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fold_left</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fold</code></td>
      <td>F#, Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Fold</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">reduce(109)</code></td>
      <td>Common Lisp, Dylan, Io, Perl, Perl6, Pike, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inject</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">inject into</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>f(e1, f(e2, … f(en, init) …))</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">foldr</code></td>
      <td>Haskell, Maple, Mercury, merd, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">FoldR</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fold-right</code></td>
      <td>Scheme-SRFI1</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fold_right</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">foldBack</code></td>
      <td>F#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">rreduce</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(reduce f '(e1 e2 ... en) :from-right t :initial-value init)</code></td>
      <td>Common Lisp</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">reverseReduce</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="various-data-types">Various Data Types</h2>

<ul>
  <li>tuple type</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">typ1 * ... * typn</code></td>
      <td>F#, OCaml, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(typ1, ..., typn)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">typ1, ..., typn</code></td>
      <td>merd</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">tuple</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">tuple!</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Tuple[Typ1, Typ2, Typ3]</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">tuple&lt; typ1, ..., typn &gt;</code></td>
      <td>C++-0x</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>tuple constructor</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">a, b, c</code></td>
      <td>F#, Lua, merd, OCaml, Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">( a, b, c )</code></td>
      <td>Ada, C++-0x, Haskell, Perl, Prolog, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ a. b. c }</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">{ a, b, c }</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[ a, b, c ]</code></td>
      <td>E</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">a . b . c</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(cons a b)</code></td>
      <td>Common Lisp</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>computable tuple (these are a kind of immutable lists playing a special role in parameter passing)</p>

    <p>empty tuple
|规则 | 语言 |
| ——— | ————————- |
| <code class="highlighter-rouge">()</code>      | merd, Perl, Perl6, Python |
| <code class="highlighter-rouge">[]</code>      | Ruby                      |
| <code class="highlighter-rouge">{}</code>      | Matlab, Smalltalk         |
| <code class="highlighter-rouge">#()</code>     | Smalltalk                 |
| <code class="highlighter-rouge">Nothing</code> | Prolog                    |</p>

    <p>1-uple
|规则 | 语言 |
| ———— | ————- |
| <code class="highlighter-rouge">a or [a]</code>   | Ruby          |
| <code class="highlighter-rouge">a,</code>         | Perl6, Python |
| <code class="highlighter-rouge">tuple([a])</code> | Python        |
| <code class="highlighter-rouge">(a)</code>        | Perl          |
| <code class="highlighter-rouge">((a))</code>      | merd          |
| <code class="highlighter-rouge">{a}</code>        | Smalltalk     |</p>

    <p>using a tuple for a function call
|规则 | 语言 |
| —————————– | ———— |
| <code class="highlighter-rouge">t</code>                           | merd, Perl   |
| <code class="highlighter-rouge">*t</code>                          | Python, Ruby |
| <code class="highlighter-rouge">t{:}</code>                        | Matlab       |
| <code class="highlighter-rouge">f @@ t</code>                      | Mathematica  |
| <code class="highlighter-rouge">L =.. [ F | Args ], call(L)</code> | Prolog       |</p>
  </li>
  <li>
    <p>reference (pointer)</p>

    <p>creation
|规则 | 语言 |
| ———– | —————— |
| <code class="highlighter-rouge">&amp;</code>         | B, C, C#, C++, Go  |
| <code class="highlighter-rouge">\</code>         | Perl               |
| <code class="highlighter-rouge">AddressOf</code> | Visual Basic       |
| <code class="highlighter-rouge">addr(110)</code> | Pascal             |
| <code class="highlighter-rouge">@(110)</code>    | Pascal             |
| <code class="highlighter-rouge">lv</code>        | BCPL               |
| <code class="highlighter-rouge">ref</code>       | C#, F#, OCaml, SML |
| <code class="highlighter-rouge">newSTRef</code>  | Haskell            |
| <code class="highlighter-rouge">NewCell</code>   | Oz                 |
| <code class="highlighter-rouge">variable</code>  | Forth              |
| <code class="highlighter-rouge">'access</code>   | Ada                |
| <code class="highlighter-rouge">:&gt; :&gt;&gt;</code>    | Pliant             |
| <code class="highlighter-rouge">''</code>        | Maple              |</p>

    <p>dereference
|规则 | 语言 |
| —————————— | —————– |
| <code class="highlighter-rouge">*(111)</code>                       | B, C, C#, C++, Go |
| <code class="highlighter-rouge">$ @ % &amp;(111)</code>                 | Perl              |
| <code class="highlighter-rouge">-&gt;[...] -&gt;{...} -&gt;(...)(112)</code> | Perl              |
| <code class="highlighter-rouge">-&gt;(113)</code>                      | C, C++            |
| <code class="highlighter-rouge">^(112)</code>                       | Modula-3, Pascal  |
| <code class="highlighter-rouge">!(111)</code>                       | F#, OCaml, SML    |
| <code class="highlighter-rouge">rv</code>                           | BCPL              |
| <code class="highlighter-rouge">readSTRef</code>                    | Haskell           |
| <code class="highlighter-rouge">Access</code>                       | Oz                |
| <code class="highlighter-rouge">.[all]</code>                       | Ada               |
| <code class="highlighter-rouge">@</code>                            | Forth             |
| <code class="highlighter-rouge">eval</code>                         | Maple             |
| <code class="highlighter-rouge">(reg)</code>                        | Assembler         |</p>

    <p>assigning (when dereferencing doesn’t give a lvalue)
|规则 | 语言 |
| ———— | ————– |
| <code class="highlighter-rouge">writeSTRef</code> | Haskell        |
| <code class="highlighter-rouge">Assign</code>     | Oz             |
| <code class="highlighter-rouge">:=</code>         | F#, OCaml, SML |
| <code class="highlighter-rouge">!</code>          | Forth          |</p>
  </li>
  <li>
    <p>optional value</p>

    <p>null value
|规则 | 语言 |
| ——————– | ———————————————————— |
| <code class="highlighter-rouge">0(114)</code>             | C++, Forth                                                   |
| <code class="highlighter-rouge">0 nullptr(114)</code>     | C++-0x                                                       |
| <code class="highlighter-rouge">NULL</code>               | C, Maple, SQL92                                              |
| <code class="highlighter-rouge">nil</code>                | Common Lisp, Emacs Lisp, Io, Lua, Objective-C, Ruby, Smalltalk |
| <code class="highlighter-rouge">null</code>               | C#, CoffeeScript, Java, JavaScript                           |
| <code class="highlighter-rouge">Null(115)</code>          | Ada, Mathematica                                             |
| <code class="highlighter-rouge">undef</code>              | Perl                                                         |
| <code class="highlighter-rouge">None</code>               | F#, OCaml, Python                                            |
| <code class="highlighter-rouge">NONE</code>               | SML                                                          |
| <code class="highlighter-rouge">Nothing</code>            | Haskell                                                      |
| <code class="highlighter-rouge">Void</code>               | Eiffel                                                       |
| <code class="highlighter-rouge">#f ()</code>              | Emacs Lisp                                                   |
| <code class="highlighter-rouge">(empty) / ~ / null</code> | YAML                                                         |</p>

    <p>value
|规则 | 语言 |
| ——— | ———————————————————— |
| <code class="highlighter-rouge">v</code>       | Ada, C#, CoffeeScript, Common Lisp, Eiffel, Emacs Lisp, Java, JavaScript, Lua, Perl, Perl, Python, Ruby, Scheme, Smalltalk |
| <code class="highlighter-rouge">*v(114)</code> | C, C++                                                       |
| <code class="highlighter-rouge">Just v</code>  | Haskell                                                      |
| <code class="highlighter-rouge">Some v</code>  | F#, OCaml                                                    |
| <code class="highlighter-rouge">SOME v</code>  | SML                                                          |</p>

    <p>type name
|规则 | 语言 |
| ——– | ————– |
| <code class="highlighter-rouge">option</code> | F#, OCaml, SML |
| <code class="highlighter-rouge">Maybe</code>  | Haskell        |</p>

    <p>null coalescing
|规则 | 语言 |
| ———- | ———————- |
| <code class="highlighter-rouge">COALESCE</code> | SQL92                  |
| <code class="highlighter-rouge">?:</code>       | PHP                    |
| <code class="highlighter-rouge">||</code>       | JavaScript, Perl, Ruby |
| <code class="highlighter-rouge">//(116)</code>  | Perl                   |
| <code class="highlighter-rouge">??</code>       | C#                     |
| <code class="highlighter-rouge">if(a, b)</code> | Visual Basic           |
| <code class="highlighter-rouge">or</code>       | Python, Scheme         |</p>
  </li>
  <li>
    <p>record</p>

    <p>type declaration
|规则 | 语言 |
| ———————————————————— | ———- |
| <code class="highlighter-rouge">struct { typ1 n1; typ2 n2; ... }</code>                           | C, C++     |
| <code class="highlighter-rouge">type typ = { n1 : typ1; n2 : typ2 }</code>                        | OCaml, SML |
| <code class="highlighter-rouge">data Typ = N0 { n1, n2 :: typ1, n3 :: typ3, ... }</code>          | Haskell    |
| <code class="highlighter-rouge">type Typ is record   N1 : Typ1;   N2 : Typ2 := default_val;   ... end record;</code> | Ada        |
| <code class="highlighter-rouge">type typ struct{ n1 typ1; n2 typ2; }</code>                       | Go         |</p>

    <p>selector
|规则 | 语言 |
| ———————- | ———————————————————— |
| <code class="highlighter-rouge">.</code>                    | Ada, Beta, C, C#, C++, CoffeeScript, E, Eiffel, F#, Go, Java, JavaScript, Lua, Matlab, Modula-2, Modula-3, OCaml, Oz, Pascal, Python, Ruby |
| <code class="highlighter-rouge">::</code>                   | XPath                                                        |
| <code class="highlighter-rouge">%</code>                    | Fortran90                                                    |
| <code class="highlighter-rouge">'(117)</code>               | Ada                                                          |
| <code class="highlighter-rouge">^</code>                    | Mercury                                                      |
| <code class="highlighter-rouge">r { field }</code>          | merd                                                         |
| <code class="highlighter-rouge">r:field</code>              | Pliant                                                       |
| <code class="highlighter-rouge">field r</code>              | Haskell                                                      |
| <code class="highlighter-rouge">-&gt;</code>                   | C, C++                                                       |
| <code class="highlighter-rouge">r[field]</code>             | Maple                                                        |
| <code class="highlighter-rouge">r["field"]</code>           | JavaScript                                                   |
| <code class="highlighter-rouge">#field r</code>             | SML                                                          |
| <code class="highlighter-rouge">normal function call</code> | Common Lisp, Dylan, Haskell, Io, Smalltalk                   |</p>
  </li>
  <li>
    <p>union type declaration</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">union { typ1 n1; typ2 n2; ... }</code></td>
      <td>C, C++</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">data Typ = N1 typ1 | N2 typ2 | ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type typ = N1 of typ1 | N2 of typ2 | ...</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">datatype typ = N1 of typ1 | N2 of typ2 | ...</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type Typ (Choice : Discrete_Type) is record   case Choice is      when Choice_1 =&gt;          N1 : Typ1;          ...      when Choice_2 | Choice_3 =&gt;          ...      when others =&gt;         ...   end case; end record;</code></td>
      <td>Ada</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>enumerated type declaration</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">enum typ { n1; n2; ... }(118)</code></td>
      <td>C, C#, C++, Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Enum typ    n1    n2 End Enum</code></td>
      <td>Visual Basic</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">(n1, n2, ...)</code></td>
      <td>Pascal</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type typ is(119)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">data Typ = N1 | N2 | ...</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">type typ = N1 | N2 | ...</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">datatype typ = N1 | N2 | ...</code></td>
      <td>SML</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>dictionary</p>

    <p>type name
|规则 | 语言 |
| —————————– | —————– |
| <code class="highlighter-rouge">map</code>                         | Go, YAML          |
| <code class="highlighter-rouge">Map</code>                         | F#, Io            |
| <code class="highlighter-rouge">std::map</code>                    | C++               |
| <code class="highlighter-rouge">dict</code>                        | Python            |
| <code class="highlighter-rouge">Dictionary</code>                  | Pliant, Smalltalk |
| <code class="highlighter-rouge">dictionary</code>                  | Vimscript         |
| <code class="highlighter-rouge">Hash</code>                        | Perl6, Ruby       |
| <code class="highlighter-rouge">HASH</code>                        | Perl              |
| <code class="highlighter-rouge">HASH_TABLE</code>                  | Eiffel            |
| <code class="highlighter-rouge">HashTable</code>                   | Java              |
| <code class="highlighter-rouge">Hashtbl</code>                     | F#                |
| <code class="highlighter-rouge">Hashtbl.t</code>                   | OCaml             |
| <code class="highlighter-rouge">struct</code>                      | Matlab            |
| <code class="highlighter-rouge">table</code>                       | Maple             |
| <code class="highlighter-rouge">array</code>                       | PHP               |
| <code class="highlighter-rouge">Data.Map, Data.HashTable</code>    | Haskell           |
| <code class="highlighter-rouge">Containers.Ordered_Maps.Map</code> | Ada               |</p>

    <p>constructor
|规则 | 语言 |
| ———————————————————— | ————————————————- |
| <code class="highlighter-rouge">[ a =&gt; b, c =&gt; d ]</code>                                         | E                                                 |
| <code class="highlighter-rouge">array( a =&gt; b, c =&gt; d )</code>                                    | PHP                                               |
| <code class="highlighter-rouge">{ a =&gt; b, c =&gt; d }</code>                                         | Perl, Perl6, Ruby                                 |
| <code class="highlighter-rouge">{ a, b, c, d }</code>                                             | Perl, Ruby                                        |
| <code class="highlighter-rouge">{ a: b, c: d }</code>                                             | CoffeeScript, JavaScript, Python, Vimscript, YAML |
| <code class="highlighter-rouge">{ a: b; c: d }</code>                                             | CSS                                               |
| <code class="highlighter-rouge">$[ a: b, c: d ]</code>                                            | YCP                                               |
| <code class="highlighter-rouge">{ a-&gt;b. c-&gt;d }</code>                                             | Squeak                                            |
| <code class="highlighter-rouge">{ a = b, c = d }</code>                                           | Lua                                               |
| <code class="highlighter-rouge">@{ a = b; c = d }</code>                                          | MSH                                               |
| <code class="highlighter-rouge">([ a:b, c:d ])</code>                                             | Pike                                              |
| <code class="highlighter-rouge">([a]=b [c]=d)</code>                                              | KornShell                                         |
| <code class="highlighter-rouge">&lt;&lt; a b c d &gt;&gt;</code>                                              | PostScript                                        |
| <code class="highlighter-rouge">struct(a, b, c, d)</code>                                         | Matlab                                            |
| <code class="highlighter-rouge">Hash[ a, b, c, d ]</code>                                         | Ruby                                              |
| <code class="highlighter-rouge">Map.of_list [a, b; c, d]</code>                                   | F#                                                |
| <code class="highlighter-rouge">Hashtbl.of_list [a, b; c, d]</code>                               | F#                                                |
| <code class="highlighter-rouge">table([a=b, c=d])</code>                                          | Maple                                             |
| <code class="highlighter-rouge">define table foo a =&gt; b; c =&gt; d end</code>                        | Dylan                                             |
| <code class="highlighter-rouge">dict create a b c d</code>                                        | Tcl8.5                                            |
| <code class="highlighter-rouge">new t { {a, b}, {c, d} }</code>                                   | C#                                                |
| <code class="highlighter-rouge">fromList</code>                                                   | Haskell                                           |
| <code class="highlighter-rouge">[NSDictionary dictionaryWithObjectsAndKeys:b, a, d, c, nil]</code> | Objective-C                                       |
| `  a: b   c: d<code class="highlighter-rouge">                                              | YAML                                              |
| </code>map[typ0]typ1{ a: b, c: d }`                                | Go                                                |</p>

    <p>access: read/write
|规则 | 语言 |
| —————- | ———————————————————— |
| <code class="highlighter-rouge">h[k]</code>           | Awk, C#, C++, CoffeeScript, Dylan, E, Go, JavaScript, Lua, Maple, MSH, PHP, Python, Ruby, Vimscript |
| <code class="highlighter-rouge">$h{k}</code>          | Perl                                                         |
| <code class="highlighter-rouge">%h{k} or %h&lt;s&gt;</code> | Perl6                                                        |
| <code class="highlighter-rouge">h(k)</code>           | Tcl                                                          |
| <code class="highlighter-rouge">h.[k]</code>          | F#                                                           |
| <code class="highlighter-rouge">h.k</code>            | CoffeeScript, JavaScript, Lua, Matlab                        |
| <code class="highlighter-rouge">h:k</code>            | Pliant                                                       |
| <code class="highlighter-rouge">h["k"] or h-&gt;k</code> | Pike                                                         |
| <code class="highlighter-rouge">(gethash k h)</code>  | Common Lisp                                                  |</p>

    <p>access: read
|规则 | 语言 |
| —————————————– | ————- |
| <code class="highlighter-rouge">h k get</code>                                 | PostScript    |
| <code class="highlighter-rouge">find</code>                                    | F#, OCaml     |
| <code class="highlighter-rouge">fetch</code>                                   | Ruby          |
| <code class="highlighter-rouge">get</code>                                     | Java          |
| <code class="highlighter-rouge">dict get</code>                                | Tcl8.5        |
| <code class="highlighter-rouge">at</code>                                      | Io, Smalltalk |
| <code class="highlighter-rouge">h@k or h.at(k)</code>                          | Eiffel        |
| <code class="highlighter-rouge">h[k]:default</code>                            | YCP           |
| <code class="highlighter-rouge">${h[k]}</code>                                 | KornShell     |
| <code class="highlighter-rouge">h.get(k, returned_value_when_k_unfound)</code> | Python        |
| <code class="highlighter-rouge">objectForKey</code>                            | Objective-C   |
| <code class="highlighter-rouge">lookup</code>                                  | Haskell       |
| <code class="highlighter-rouge">Element</code>                                 | Ada           |</p>

    <p>access: write
|规则 | 语言 |
| ————————– | ————– |
| <code class="highlighter-rouge">h k o put</code>                | PostScript     |
| <code class="highlighter-rouge">put</code>                      | Eiffel, Java   |
| <code class="highlighter-rouge">add, replace</code>             | F#, OCaml      |
| <code class="highlighter-rouge">store</code>                    | Ruby           |
| <code class="highlighter-rouge">dict set</code>                 | Tcl8.5         |
| <code class="highlighter-rouge">h[k]</code>                     | KornShell, YCP |
| <code class="highlighter-rouge">atPut</code>                    | Io             |
| <code class="highlighter-rouge">h at: k put: o</code>           | Smalltalk      |
| <code class="highlighter-rouge">[h setObject:o forKey:k]</code> | Objective-C    |
| <code class="highlighter-rouge">insert</code>                   | Haskell        |
| <code class="highlighter-rouge">Replace_Element</code>          | Ada            |</p>

    <p>has the key ?
|规则 | 语言 |
| ————————————- | ——————————– |
| <code class="highlighter-rouge">exists $h{k}</code>                        | Perl                             |
| <code class="highlighter-rouge">exists</code>                              | Perl6, Pliant                    |
| <code class="highlighter-rouge">dict exists</code>                         | Tcl8.5                           |
| <code class="highlighter-rouge">has</code>                                 | Eiffel                           |
| <code class="highlighter-rouge">haskey</code>                              | YCP                              |
| <code class="highlighter-rouge">hasKey</code>                              | Io                               |
| <code class="highlighter-rouge">has_key</code>                             | Python, Vimscript                |
| <code class="highlighter-rouge">has_key?, include?, key?, member?</code>   | Ruby                             |
| <code class="highlighter-rouge">Contains</code>                            | Ada, C#, F#                      |
| <code class="highlighter-rouge">containsKey</code>                         | Java                             |
| <code class="highlighter-rouge">includesKey</code>                         | Smalltalk                        |
| <code class="highlighter-rouge">k in h</code>                              | CoffeeScript, JavaScript, Python |
| <code class="highlighter-rouge">k not in h</code>                          | Python                           |
| <code class="highlighter-rouge">in</code>                                  | Awk                              |
| <code class="highlighter-rouge">mem</code>                                 | F#, OCaml                        |
| <code class="highlighter-rouge">member</code>                              | Haskell                          |
| <code class="highlighter-rouge">isfield</code>                             | Matlab                           |
| <code class="highlighter-rouge">find(120)</code>                           | C++                              |
| <code class="highlighter-rouge">h[k]</code>                                | Pike                             |
| <code class="highlighter-rouge">(gethash k h)</code>                       | Common Lisp                      |
| <code class="highlighter-rouge">maps</code>                                | E                                |
| <code class="highlighter-rouge">known</code>                               | PostScript                       |
| <code class="highlighter-rouge">isset(h[k]), array_key_exists(k, h)</code> | PHP                              |
| <code class="highlighter-rouge">v, exists := h[k]</code>                   | Go                               |</p>

    <p>remove by key
|规则 | 语言 |
| ——————– | ———————————————- |
| <code class="highlighter-rouge">delete $h{k}</code>       | Perl                                           |
| <code class="highlighter-rouge">del h[k]</code>           | Python                                         |
| <code class="highlighter-rouge">unset(h[k])</code>        | PHP                                            |
| <code class="highlighter-rouge">remove</code>             | Eiffel, F#, Java, OCaml, YCP                   |
| <code class="highlighter-rouge">Remove</code>             | C#, F#                                         |
| <code class="highlighter-rouge">dict remove</code>        | Tcl8.5                                         |
| <code class="highlighter-rouge">removeAt</code>           | Io                                             |
| <code class="highlighter-rouge">removeKey</code>          | E, Smalltalk                                   |
| <code class="highlighter-rouge">remhash</code>            | Common Lisp                                    |
| <code class="highlighter-rouge">delete</code>             | CoffeeScript, Haskell, JavaScript, Perl6, Ruby |
| <code class="highlighter-rouge">Delete</code>             | Ada                                            |
| <code class="highlighter-rouge">erase</code>              | C++                                            |
| <code class="highlighter-rouge">m_delete</code>           | Pike                                           |
| <code class="highlighter-rouge">removeObjectForKey</code> | Objective-C                                    |
| <code class="highlighter-rouge">undef</code>              | PostScript                                     |
| <code class="highlighter-rouge">rmfield</code>            | Matlab                                         |
| <code class="highlighter-rouge">delete(h, k)</code>       | Go                                             |</p>

    <p>list of keys
|规则 | 语言 |
| ———————————- | ———————————————————— |
| <code class="highlighter-rouge">keys</code>                             | Haskell, Io, Maple, MSH, Perl, Perl6, Python, Ruby, Smalltalk |
| <code class="highlighter-rouge">dict keys</code>                        | Tcl8.5                                                       |
| <code class="highlighter-rouge">keySet</code>                           | Java                                                         |
| <code class="highlighter-rouge">allKeys</code>                          | Objective-C                                                  |
| <code class="highlighter-rouge">AllKeys</code>                          | C#                                                           |
| <code class="highlighter-rouge">indices</code>                          | Pike                                                         |
| <code class="highlighter-rouge">current_keys</code>                     | Eiffel                                                       |
| <code class="highlighter-rouge">getKeys</code>                          | E                                                            |
| <code class="highlighter-rouge">array_keys</code>                       | PHP                                                          |
| <code class="highlighter-rouge">fieldnames</code>                       | Matlab                                                       |
| <code class="highlighter-rouge">findall(Key, item(Key, _), Keys)</code> | Prolog                                                       |
| <code class="highlighter-rouge">${!h[@]}</code>                         | KornShell                                                    |</p>

    <p>list of values
|规则 | 语言 |
| ————– | —————————————————- |
| <code class="highlighter-rouge">values</code>       | Io, Java, Perl, Perl6, Pike, Python, Ruby, Smalltalk |
| <code class="highlighter-rouge">dict values</code>  | Tcl8.5                                               |
| <code class="highlighter-rouge">getValues</code>    | E                                                    |
| <code class="highlighter-rouge">content</code>      | Eiffel                                               |
| <code class="highlighter-rouge">array_values</code> | PHP                                                  |
| <code class="highlighter-rouge">struct2cell</code>  | Matlab                                               |
| <code class="highlighter-rouge">entries</code>      | Maple                                                |
| <code class="highlighter-rouge">elems</code>        | Haskell                                              |
| <code class="highlighter-rouge">${h[@]}</code>      | KornShell                                            |</p>

    <p>merge
|规则 | 语言 |
| —————— | ———— |
| <code class="highlighter-rouge">merge(121)</code>       | Ruby         |
| <code class="highlighter-rouge">array_merge(121)</code> | PHP          |
| <code class="highlighter-rouge">union(122)</code>       | Haskell      |
| <code class="highlighter-rouge">update(121)</code>      | Python, Ruby |
| <code class="highlighter-rouge">putAll(121)</code>      | Java         |
| <code class="highlighter-rouge">insert(122)</code>      | C++          |
| <code class="highlighter-rouge">(%h1, %h2)(121)</code>  | Perl         |</p>
  </li>
  <li>
    <p>range</p>

    <p>inclusive .. inclusive
|规则 | 语言 |
| ——————————— | ————————————- |
| <code class="highlighter-rouge">a .. b</code>                          | Ada, E, merd, MSH, Pascal, Perl, Ruby |
| <code class="highlighter-rouge">a:b</code>                             | Matlab                                |
| <code class="highlighter-rouge">[ a .. b ]</code>                      | CoffeeScript, F#, Haskell             |
| <code class="highlighter-rouge">to</code>                              | Io, Smalltalk                         |
| <code class="highlighter-rouge">seq a b / jot - a b(123)</code>        | BourneShell, FishShell                |
| <code class="highlighter-rouge">{a..b}</code>                          | KornShell                             |
| <code class="highlighter-rouge">range</code>                           | PHP                                   |
| <code class="highlighter-rouge">range(from: a, to: b, by: step)</code> | Dylan                                 |
| <code class="highlighter-rouge">Range</code>                           | Mathematica                           |
| <code class="highlighter-rouge">Range with</code>                      | Io                                    |
| <code class="highlighter-rouge">List.number A B Step</code>            | Oz                                    |
| <code class="highlighter-rouge">numlist / between</code>               | Prolog                                |
| <code class="highlighter-rouge">iseq</code>                            | Logo                                  |
| <code class="highlighter-rouge">k, v := range h</code>                 | Go                                    |</p>

    <p>inclusive .. exclusive
|规则 | 语言 |
| ——— | —————— |
| <code class="highlighter-rouge">a ... b</code> | CoffeeScript, Ruby |
| <code class="highlighter-rouge">a ..! b</code> | E                  |
| <code class="highlighter-rouge">range</code>   | Python             |</p>
  </li>
</ul>

<hr />

<h2 id="mathematics">Mathematics</h2>

<ul>
  <li>
    <p>type name</p>

    <p>integers
|规则 | 语言 |
| ———————————————————— | ——————— |
| <code class="highlighter-rouge">short, int, long</code>                                           | C, C#                 |
| <code class="highlighter-rouge">int</code>                                                        | OCaml, PHP, SML, YAML |
| <code class="highlighter-rouge">Int</code>                                                        | Perl6                 |
| <code class="highlighter-rouge">Int, uInt, Int8, Int16...</code>                                  | Pliant                |
| <code class="highlighter-rouge">int, long(124)</code>                                             | Python                |
| <code class="highlighter-rouge">integer</code>                                                    | Maple, PHP            |
| <code class="highlighter-rouge">INTEGER, INT, SMALLINT</code>                                     | SQL92                 |
| <code class="highlighter-rouge">INTEGER, INTEGER_8, NATURAL_8...</code>                           | Eiffel                |
| <code class="highlighter-rouge">int8, uint8, int16, uint16, ...64</code>                          | Go, Matlab            |
| <code class="highlighter-rouge">int8_t, uint8_t, int16_t, uint16_t, ...64</code>                  | C99                   |
| <code class="highlighter-rouge">int, int8, uint8, int16, uint16, int32, uint32, int64, uint64, bigint, bignum</code> | F#                    |
| <code class="highlighter-rouge">Int, Integer, Int8, Int16, Int32, Int64</code>                    | Haskell               |
| <code class="highlighter-rouge">Integer, FixNum, BigNum</code>                                    | Ruby                  |
| <code class="highlighter-rouge">Integer, SmallInteger, LargeInteger</code>                        | Smalltalk             |
| <code class="highlighter-rouge">Integer</code>                                                    | Mathematica           |
| <code class="highlighter-rouge">type T is range Low...High;</code>                                | Ada                   |
| <code class="highlighter-rouge">number</code>                                                     | Vimscript             |</p>

    <p>floating point
|规则 | 语言 |
| ————————————————– | ————————————— |
| <code class="highlighter-rouge">float, double, long double</code>                       | C                                       |
| <code class="highlighter-rouge">float, double</code>                                    | C#                                      |
| <code class="highlighter-rouge">float</code>                                            | Maple, OCaml, PHP, SML, Vimscript, YAML |
| <code class="highlighter-rouge">Float</code>                                            | Ruby                                    |
| <code class="highlighter-rouge">float, float32</code>                                   | F#                                      |
| <code class="highlighter-rouge">Float, Float32, Float64</code>                          | Pliant                                  |
| <code class="highlighter-rouge">NUMERIC, DECIMAL, DOUBLE PRECISION</code>               | SQL92                                   |
| <code class="highlighter-rouge">Rat</code>                                              | Perl6                                   |
| <code class="highlighter-rouge">DOUBLE, REAL</code>                                     | Eiffel                                  |
| <code class="highlighter-rouge">single, double</code>                                   | Matlab                                  |
| <code class="highlighter-rouge">Float, Double, Ratio</code>                             | Haskell                                 |
| <code class="highlighter-rouge">Float, Double, Fraction, FixedPoint</code>              | Smalltalk                               |
| <code class="highlighter-rouge">float, decimal.Decimal</code>                           | Python                                  |
| <code class="highlighter-rouge">Real, Rational</code>                                   | Mathematica                             |
| <code class="highlighter-rouge">Number</code>                                           | Io                                      |
| <code class="highlighter-rouge">type T is digits N range Low..High;</code>              | Ada                                     |
| <code class="highlighter-rouge">type T is delta S digits N range Low..High;(125)</code> | Ada                                     |
| <code class="highlighter-rouge">float32, float64</code>                                 | Go                                      |</p>
  </li>
  <li>
    <p>numbers syntax</p>

    <p>integers
|规则 | 语言 |
| ——————— | ———————————————————— |
| <code class="highlighter-rouge">1000</code>                | Awk, B, BourneShell, C, C#, C++, CoffeeScript, E, Eiffel, F#, Forth, Go, Haskell, Io, Java, JavaScript, Logo, Maple, Mathematica, merd, OCaml, Oz, Pascal, Perl, Perl6, PHP, Pike, Pliant, Prolog, Python, Rebol, Ruby, Scheme, Smalltalk, SQL92, Tcl, Yorick |
| <code class="highlighter-rouge">1000, 1000.</code>         | Common Lisp, Emacs Lisp                                      |
| <code class="highlighter-rouge">1000, 1000., 1000.0</code> | Awk, Matlab                                                  |
| <code class="highlighter-rouge">1000, '1000'D</code>       | Classic REXX                                                 |
| <code class="highlighter-rouge">1000, 1E3</code>           | Ada                                                          |</p>

    <p>integers in base 2, octal and hexadecimal
|规则 | 语言 |
| ——————- | —————————————- |
| <code class="highlighter-rouge">0b1, 07, 0xf(126)</code> | CoffeeScript, Oz, Perl, PHP5, Pike, Ruby |
| <code class="highlighter-rouge">0b1, 0o7, 0xf</code>     | F#, OCaml, Perl6                         |
| <code class="highlighter-rouge">07, 0xf</code>           | Awk, C, C++, JavaScript, Python, Tcl     |
| <code class="highlighter-rouge">0xf</code>               | C#, E, Go, Io, Yorick                    |
| <code class="highlighter-rouge">07</code>                | B                                        |
| <code class="highlighter-rouge">0o7, 0xf</code>          | Haskell                                  |
| <code class="highlighter-rouge">1b</code>                | Eiffel                                   |
| <code class="highlighter-rouge">2#1#, 8#7#, 16#f#</code> | Ada                                      |
| <code class="highlighter-rouge">2#{1}, #{F}</code>       | Rebol                                    |
| <code class="highlighter-rouge">#b1, #o7, #xf</code>     | Common Lisp, Emacs Lisp, Scheme          |
| <code class="highlighter-rouge">2^^1, 8^^7, 16^^f</code> | Mathematica                              |
| <code class="highlighter-rouge">2r1, 8r7, 16rf</code>    | Smalltalk                                |
| <code class="highlighter-rouge">#2r1, #8r7, #16rf</code> | Common Lisp, Emacs Lisp                  |
| <code class="highlighter-rouge">1b, Fh</code>            | Pliant                                   |
| <code class="highlighter-rouge">'1'B, 'F'X</code>        | Classic REXX                             |
| <code class="highlighter-rouge">B'1', X'F'</code>        | SQL92                                    |
| <code class="highlighter-rouge">$f</code>                | Forth                                    |</p>

    <p>integer thousand-separator
|规则 | 语言 |
| ——————— | —————————————- |
| <code class="highlighter-rouge">1_000, 10_00, 100_0</code> | Ada, E, Eiffel, OCaml, Perl, Perl6, Ruby |
| <code class="highlighter-rouge">1'000, 10'00, 100'0</code> | Rebol                                    |
| <code class="highlighter-rouge">1_000</code>               | merd                                     |</p>

    <p>floating point
|规则 | 语言 |
| ———————— | ———————————————————— |
| <code class="highlighter-rouge">1000., 1E3</code>             | C, C++, Classic REXX, CoffeeScript, E, F#, Go, Java, JavaScript, Logo, Maple, OCaml, Python, Scheme, SQL92, Tcl |
| <code class="highlighter-rouge">1000., 1E3, 1,0</code>        | Rebol                                                        |
| <code class="highlighter-rouge">1000., 1.E3</code>            | Eiffel, Oz                                                   |
| <code class="highlighter-rouge">1000.0, 1E3</code>            | C#, Common Lisp, Emacs Lisp, PHP, Pike, Prolog, Ruby, Smalltalk |
| <code class="highlighter-rouge">1000.0, 1.0E3</code>          | Ada, Haskell                                                 |
| <code class="highlighter-rouge">1000, 1000.0, 1E3(127)</code> | Awk, merd, Perl, Perl6                                       |
| <code class="highlighter-rouge">1000., 1*^3, 1000</code><code class="highlighter-rouge">     | Mathematica                                                  |
| </code>1000e, 1e3`             | Forth                                                        |</p>
  </li>
  <li>
    <p>addition / subtraction / multiplication / division</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">+ / - / * / /</code></td>
      <td>BourneShell, C, C#, C++, Classic REXX, CoffeeScript, Common Lisp, D, Eiffel, Emacs Lisp, F#, Forth, Go, Haskell, Io, Java, JavaScript, Logo, Maple, Matlab, merd, MUMPS, Perl, Perl6, PHP, Pliant, Prolog, Python, Ruby, Scheme, Smalltalk, SQL92, Tcl, Vimscript, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">+ / - / * or nothing / /</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">+ +. / - -. / * *. / / /.(128)</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sum / difference / product / quotient</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">add / sub / mul / idiv div</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f+ / f- / f* / f/</code></td>
      <td>Forth</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>exponentiation (power)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">**</code></td>
      <td>Ada, Classic REXX, E, F#, Fortran, Io, merd, OCaml, Perl, Perl6, PL/I, Prolog, Python, Rebol, Ruby, Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">^</code></td>
      <td>Awk, Dylan, Eiffel, Lua, Mathematica, Matlab, Pliant, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">*(129)</code></td>
      <td>APL</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">**, ^</code></td>
      <td>Maple</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">^^</code></td>
      <td>D</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">**, ^ and ^^(130)</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">f**</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">pow</code></td>
      <td>C, C++, CoffeeScript, Java, JavaScript, PHP, Pike, Python, SML, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Pow</code></td>
      <td>C#, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">power</code></td>
      <td>Delphi-Kylix, Logo, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">exp</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">expt</code></td>
      <td>Common Lisp, Emacs Lisp, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">raisedTo</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">math.Pow</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>negation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">-</code></td>
      <td>Ada, Awk, B, BCPL, BourneShell, C, C#, C++, Classic REXX, CoffeeScript, Common Lisp, D, E, Eiffel, Emacs Lisp, F#, Go, Haskell, Io, Java, JavaScript, Logo, Maple, Mathematica, Matlab, merd, MUMPS, Perl, Perl6, PHP, Pike, Pliant, Prolog, Python, Rebol, Ruby, Scheme, Smalltalk, Tcl, Vimscript, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">- -.</code></td>
      <td>OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">~</code></td>
      <td>Oz, SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">neg</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">negate</code></td>
      <td>Forth, Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fnegate</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">minus</code></td>
      <td>Logo</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>random</p>

    <p>random number
|规则 | 语言 |
| ——————————————- | ——————————————— |
| <code class="highlighter-rouge">rand</code>                                      | C, Maple, Matlab, Perl, Perl6, PHP, Ruby, Tcl |
| <code class="highlighter-rouge">random</code>                                    | Common Lisp, Logo, Prolog, Python, Yorick     |
| <code class="highlighter-rouge">$RANDOM</code>                                   | MUMPS                                         |
| <code class="highlighter-rouge">randomR</code>                                   | Haskell                                       |
| <code class="highlighter-rouge">Random(131)</code>                               | Ada                                           |
| <code class="highlighter-rouge">Random.int</code>                                | OCaml                                         |
| <code class="highlighter-rouge">Random, RandomReal, RandomInteger</code>         | Mathematica                                   |
| <code class="highlighter-rouge">Random value</code>                              | Io                                            |
| <code class="highlighter-rouge">Random new nextInteger</code>                    | Smalltalk                                     |
| <code class="highlighter-rouge">r: RANDOM create r.make r.start r.item</code>    | Eiffel                                        |
| <code class="highlighter-rouge">Random ran = new Random(); ran.Next(...);</code> | C#                                            |
| <code class="highlighter-rouge">let r = System.Random() r.Next()</code>          | F#                                            |
| <code class="highlighter-rouge">mt_rand</code>                                   | PHP                                           |
| <code class="highlighter-rouge">rand.Read(132)</code>                            | Go                                            |</p>

    <p>seed the pseudo random generator
|规则 | 语言 |
| —————————————- | —————————— |
| <code class="highlighter-rouge">srand</code>                                  | C, Perl, Perl6, PHP, Ruby, Tcl |
| <code class="highlighter-rouge">set_seed</code>                               | Eiffel                         |
| <code class="highlighter-rouge">random.seed</code>                            | Python                         |
| <code class="highlighter-rouge">Random setSeed</code>                         | Io                             |
| <code class="highlighter-rouge">Random.init, Random.self_init</code>          | OCaml                          |
| <code class="highlighter-rouge">rand('state',...)</code>                      | Matlab                         |
| <code class="highlighter-rouge">rerandom</code>                               | Logo                           |
| <code class="highlighter-rouge">RandomTools[MersenneTwister][SetState]</code> | Maple                          |
| <code class="highlighter-rouge">Random new setSeed</code>                     | Smalltalk                      |
| <code class="highlighter-rouge">SeedRandom</code>                             | Mathematica                    |
| <code class="highlighter-rouge">mkStdGen</code>                               | Haskell                        |
| <code class="highlighter-rouge">make-random-state</code>                      | Common Lisp                    |
| <code class="highlighter-rouge">Reset</code>                                  | Ada                            |
| <code class="highlighter-rouge">rand.Seed(133)</code>                         | Go                             |</p>
  </li>
  <li>
    <p>operator priorities and associativities</p>

    <p>addition vs multiplication
|规则 | 语言 |
| —————– | ———————————————————— |
| <code class="highlighter-rouge">mathematical</code>    | BourneShell, C, C#, C++, Classic REXX, Eiffel, F#, Go, Haskell, Io, Java, Maple, Mathematica, Matlab, merd, Perl, Perl6, PHP, Python, Ruby, Tcl, Yorick |
| <code class="highlighter-rouge">same priorities</code> | MUMPS, Smalltalk                                             |</p>

    <p>exponentiation vs negation (is -3^2 equal to 9 or -9)
|规则 | 语言 |
| —————- | ———————————————————— |
| <code class="highlighter-rouge">mathematical</code>   | Classic REXX, Eiffel, Haskell, Io, Maple, Mathematica, Matlab, Perl, Perl6, Python, Ruby |
| <code class="highlighter-rouge">negation first</code> | F#, OCaml                                                    |</p>
  </li>
  <li>
    <p>square root / e-exponential / absolute value</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">sqrt / exp / abs</code></td>
      <td>Ada, C, C++, CoffeeScript, Common Lisp,<br /> E, Eiffel, Emacs Lisp, F#, Haskell, Io, Java,<br /> JavaScript, Lua, Maple, OCaml, Pascal,<br /> Perl, Perl6, PHP, Prolog, Python, Ruby,<br /> Scheme, Smalltalk, SML, Tcl, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sqrt realsqrt / exp / abs</code></td>
      <td>Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sqrt / exp /</code></td>
      <td>Awk, Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Sqrt / Exp / Abs</code></td>
      <td>C#, Mathematica, Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sqrt / / abs</code></td>
      <td>PostScript</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Sqrt / / ABS</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ exp / abs</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sqrt / /</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">square-root / exp / abs or absolute</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Sqrt / Exp / ABS</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">sqrt,isqrt / exp / abs</code></td>
      <td>Tcl8.5</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">fsqrt / fexp / abs,fabs</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">math.Sqrt</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>trigonometry</p>

    <p>basic
|规则 | 语言 |
| ——————————– | ———————————————————— |
| <code class="highlighter-rouge">sin / cos / tan</code>                | Ada, C, C++, CoffeeScript, Common Lisp,<br /> E, Emacs Lisp, F#, Haskell, Io, Java, JavaScript,<br /> Lua, Maple, Matlab, OCaml, Pascal, Perl,<br /> Perl6, PHP, Pike, Pliant, Prolog, Python, Ruby,<br /> Scheme, Smalltalk, SML, Tcl, Yorick |
| <code class="highlighter-rouge">Sin / Cos / Tan</code>                | C#, Classic REXX, Mathematica, Oz                            |
| <code class="highlighter-rouge">sin / cos /</code>                    | Awk, PostScript                                              |
| <code class="highlighter-rouge">sine / cosine / tangent</code>        | Eiffel, Rebol                                                |
| <code class="highlighter-rouge">radsin / radcos / radtan</code>       | Logo                                                         |
| <code class="highlighter-rouge">fsin / fcos / ftan</code>             | Forth                                                        |
| <code class="highlighter-rouge">math.Sin / math.Cos / math.Tan</code> | Go                                                           |</p>

    <p>inverse
|规则 | 语言 |
| ————————————- | ———————————————————— |
| <code class="highlighter-rouge">asin / acos / atan(134)</code>             | Ada, C, C++, CoffeeScript,<br /> Common Lisp, F#, Haskell,<br /> Io, JavaScript, Matlab, OCaml, <br />Perl, Perl6, Pike, Pliant, Prolog, <br />Python, Ruby, Scheme, Tcl, Yorick |
| <code class="highlighter-rouge">Asin / Acos / Atan</code>                  | C#, Oz                                                       |
| <code class="highlighter-rouge">ASin / ACos / ATan</code>                  | Classic REXX                                                 |
| <code class="highlighter-rouge">arcsin / arccos / arctan</code>            | Maple                                                        |
| <code class="highlighter-rouge">arcSin / arcCos / arcTan</code>            | Smalltalk                                                    |
| <code class="highlighter-rouge">ArcSin / ArcCos / ArcTan</code>            | Mathematica                                                  |
| <code class="highlighter-rouge">arcsine / arccosine / arctangent</code>    | Rebol                                                        |
| <code class="highlighter-rouge">arc_sine / arc_cosine / arc_tangent</code> | Eiffel                                                       |
| <code class="highlighter-rouge">/ / atan</code>                            | PostScript                                                   |
| <code class="highlighter-rouge">/ / radarctan</code>                       | Logo                                                         |
| <code class="highlighter-rouge">fasin / facos / fatan</code>               | Forth                                                        |
| <code class="highlighter-rouge">math.Asin / math.Acos / math.Atan</code>   | Go                                                           |</p>
  </li>
  <li>
    <p>logarithm</p>

    <p>base e
|规则 | 语言 |
| ———- | ———————————————————— |
| <code class="highlighter-rouge">ln</code>       | Delphi-Kylix, Logo, Maple, Pascal, PostScript, Smalltalk, SML |
| <code class="highlighter-rouge">log</code>      | Awk, C, C++, CoffeeScript, Common Lisp,<br /> E, Eiffel, Emacs Lisp, F#, Io, Java, JavaScript,<br /> Lua, Maple, Matlab, OCaml, Perl, Perl6, PHP, <br />Pike, Pliant, Prolog, Python, Ruby, Scheme, Tcl, Yorick |
| <code class="highlighter-rouge">Log</code>      | Ada, C#, Classic REXX, Mathematica, Oz                       |
| <code class="highlighter-rouge">log 10</code>   | Haskell                                                      |
| <code class="highlighter-rouge">log-e</code>    | Rebol                                                        |
| <code class="highlighter-rouge">fln</code>      | Forth                                                        |
| <code class="highlighter-rouge">math.Log</code> | Go                                                           |</p>

    <p>base 10
|规则 | 语言 |
| —————————– | ———————————————————— |
| <code class="highlighter-rouge">log10</code>                       | C, C++, Delphi-Kylix, Eiffel, F#, Io, <br />Logo, Lua, Matlab, OCaml, Perl, Perl6, PHP, Pliant, Prolog, Python, Ruby, Tcl, Yorick |
| <code class="highlighter-rouge">Log10</code>                       | C#, Classic REXX                                             |
| <code class="highlighter-rouge">log</code>                         | PostScript, SML                                              |
| <code class="highlighter-rouge">log: 10</code>                     | Smalltalk                                                    |
| <code class="highlighter-rouge">log-10</code>                      | Rebol                                                        |
| <code class="highlighter-rouge">log[10]</code>                     | Maple                                                        |
| <code class="highlighter-rouge">Log[10, val]</code>                | Mathematica                                                  |
| <code class="highlighter-rouge">logBase 10</code>                  | Haskell                                                      |
| <code class="highlighter-rouge">Log(X =&gt; val, Base =&gt; 10.0)</code> | Ada                                                          |
| <code class="highlighter-rouge">(log x 10)</code>                  | Common Lisp                                                  |
| <code class="highlighter-rouge">flog</code>                        | Forth                                                        |
| <code class="highlighter-rouge">math.Log10</code>                  | Go                                                           |</p>

    <p>base 2
|规则 | 语言 |
| —————————- | ———– |
| <code class="highlighter-rouge">log2</code>                       | Matlab      |
| <code class="highlighter-rouge">log-10 / log-2</code>             | Rebol       |
| <code class="highlighter-rouge">Log(X =&gt; val, Base =&gt; 2.0)</code> | Ada         |
| <code class="highlighter-rouge">log(val, 2)</code>                | Python      |
| <code class="highlighter-rouge">Log[2, val]</code>                | Mathematica |
| <code class="highlighter-rouge">frexp</code>                      | C           |
| <code class="highlighter-rouge">math.Log2</code>                  | Go          |</p>
  </li>
  <li>
    <p>euclidean division (both quotient and modulo)</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">divmod</code></td>
      <td>Python, Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">divMod</code></td>
      <td>Haskell</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">div ldiv lldiv</code></td>
      <td>C</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IntInf.quotrem</code></td>
      <td>SML</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">floor</code></td>
      <td>Common Lisp, Dylan</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/mod</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Div(135)</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>modulo</p>

    <p>modulo of -3 / 2 is 1
|规则 | 语言 |
| ——– | ———————————————————- |
| <code class="highlighter-rouge">%</code>      | Classic REXX, Perl, Perl6, Pike, Python, Ruby, Tcl         |
| <code class="highlighter-rouge">%%</code>     | E                                                          |
| <code class="highlighter-rouge">\\</code>     | Smalltalk                                                  |
| <code class="highlighter-rouge">mod</code>    | Ada, Common Lisp, Emacs Lisp, Haskell, Matlab, Prolog, SML |
| <code class="highlighter-rouge">Mod</code>    | Mathematica                                                |
| <code class="highlighter-rouge">MOD</code>    | Modula-3                                                   |
| <code class="highlighter-rouge">modulo</code> | Dylan, Logo, Ruby                                          |
| <code class="highlighter-rouge">rem</code>    | Prolog                                                     |</p>

    <p>modulo of -3 / 2 is -1
|规则 | 语言 |
| ———– | ———————————————————— |
| <code class="highlighter-rouge">%</code>         | Awk, B, C, C#, C++, CoffeeScript, E, F#, Go, Io, Java, JavaScript, PHP, Pliant, Yorick |
| <code class="highlighter-rouge">#</code>         | MUMPS                                                        |
| <code class="highlighter-rouge">mod</code>       | F#, Forth, Lua, OCaml, Oz, Pascal, PostScript, Prolog, XPath |
| <code class="highlighter-rouge">remainder</code> | Logo, Ruby, Scheme                                           |
| <code class="highlighter-rouge">rem</code>       | Ada, BCPL, Haskell, Matlab, Smalltalk                        |
| <code class="highlighter-rouge">//</code>        | Classic REXX, Rebol                                          |
| <code class="highlighter-rouge">\\</code>        | Eiffel                                                       |</p>
  </li>
  <li>
    <p>truncate / round / floor / ceil</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">trunc / round / floor / ceil</code></td>
      <td>C, C++, Maple, Matlab</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">truncate / round / floor / ceiling</code></td>
      <td>Common Lisp, Haskell, Perl6, PostScript, Prolog, Scheme</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">int / round / floor / ceil</code></td>
      <td>CoffeeScript, JavaScript, Pike, Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">int / round / /</code></td>
      <td>Logo</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to_i, Integer() / round / floor / ceil</code></td>
      <td>Ruby</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">TRUNC / FORMAT / Floor / Ceil</code></td>
      <td>Classic REXX</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Float'Truncation / Float'Rounding / Float'Floor / Float'Ceiling(136)</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ round / floor / ceil</code></td>
      <td>E, Io, Java, Lua, PHP, SML, Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ Round / Floor / Ceiling</code></td>
      <td>C#</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ Round / Floor / Ceil</code></td>
      <td>Oz</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ round / floor / ceiling</code></td>
      <td>Dylan, Emacs Lisp, PostScript, XPath</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ ROUND / FLOOR / CEILING</code></td>
      <td>Modula-3</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ rounded / floor / ceiling</code></td>
      <td>Eiffel, Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">int / / floor / ceil</code></td>
      <td>F#, Perl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">int_of_float / / floor / ceil</code></td>
      <td>F#, OCaml</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ / floor / ceil</code></td>
      <td>Lua, Yorick</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">IntegerPart / Round / Floor / Ceiling</code></td>
      <td>Mathematica</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ Rounding / Floor / Ceiling</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">to-integer / / /</code></td>
      <td>Rebol</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/ fround / /</code></td>
      <td>Forth</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">math.Trunc / / math.Floor / math.Ceil</code></td>
      <td>Go</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>bitwise operators</p>

    <p>and / or / xor
|规则 | 语言 |
| ————————————- | ———————————————————— |
| <code class="highlighter-rouge">&amp; / | / ^</code>                           | C, C#, C++, CoffeeScript, E, Eiffel, Go, Java, JavaScript, Perl, PHP, Pike, Python, Ruby, Tcl |
| <code class="highlighter-rouge">&amp; / | / ~</code>                           | Yorick                                                       |
| <code class="highlighter-rouge">&amp; / |</code>                               | YCP                                                          |
| <code class="highlighter-rouge">+&amp; / +| / +^</code>                        | Perl6                                                        |
| <code class="highlighter-rouge">.&amp;. / .|. / xor(137)</code>                | Haskell                                                      |
| <code class="highlighter-rouge">&amp;&amp;&amp; / ||| / ^^^</code>                     | F#                                                           |
| <code class="highlighter-rouge">and / or / xor</code>                      | Ada, Forth, PostScript, Rebol                                |
| <code class="highlighter-rouge">land / lor / lxor</code>                   | F#, OCaml                                                    |
| <code class="highlighter-rouge">logand / logior / logxor(138)</code>       | Common Lisp                                                  |
| <code class="highlighter-rouge">bitand / bitor / bitxor</code>             | Logo, Matlab                                                 |
| <code class="highlighter-rouge">BITAND / BITOR / BITXOR</code>             | Classic REXX                                                 |
| <code class="highlighter-rouge">BitAnd / BitOr / BitXor</code>             | Mathematica                                                  |
| <code class="highlighter-rouge">bitAnd / bitOr / bitXor</code>             | Smalltalk                                                    |
| <code class="highlighter-rouge">bitwiseAnd / bitwiseOr / bitwiseXor</code> | Io                                                           |
| <code class="highlighter-rouge">/\ / \/ / xor</code>                       | Prolog                                                       |</p>

    <p>bitwise inversion
|规则 | 语言 |
| ——————- | ———————————————————— |
| <code class="highlighter-rouge">~</code>                 | C, C#, C++, CoffeeScript, Java, JavaScript, Perl, PHP, Pike, Python, Ruby, SML, Tcl, YCP |
| <code class="highlighter-rouge">~~~</code>               | F#                                                           |
| <code class="highlighter-rouge">not</code>               | Ada, Eiffel, PostScript                                      |
| <code class="highlighter-rouge">lnot</code>              | F#, OCaml                                                    |
| <code class="highlighter-rouge">lognot(139)</code>       | Common Lisp                                                  |
| <code class="highlighter-rouge">bitnot</code>            | Eiffel, Logo                                                 |
| <code class="highlighter-rouge">BitNot</code>            | Mathematica                                                  |
| <code class="highlighter-rouge">complement</code>        | Haskell, Rebol                                               |
| <code class="highlighter-rouge">bitcmp</code>            | Matlab                                                       |
| <code class="highlighter-rouge">bitInvert</code>         | Smalltalk                                                    |
| <code class="highlighter-rouge">bitwiseComplement</code> | Io                                                           |
| <code class="highlighter-rouge">invert</code>            | Forth                                                        |
| <code class="highlighter-rouge">\</code>                 | Prolog                                                       |</p>

    <p>left shift / right shift / unsigned right shift
|规则 | 语言 |
| ———————————————————— | ———————————————————— |
| <code class="highlighter-rouge">&lt;&lt; / &gt;&gt; / &gt;&gt;&gt;</code>                                              | CoffeeScript, Java, JavaScript                               |
| <code class="highlighter-rouge">&lt;&lt; / &gt;&gt;</code>                                                    | C, C#, C++, Go, Perl, PHP, Pike, Prolog, Python, Ruby, Tcl, YCP |
| <code class="highlighter-rouge">&lt;&lt;&lt; / &gt;&gt;&gt;</code>                                                  | F#                                                           |
| <code class="highlighter-rouge">|&lt;&lt; / |&gt;&gt;</code>                                                  | Eiffel                                                       |
| <code class="highlighter-rouge">lsl / lsr or asr</code>                                           | F#, OCaml                                                    |
| <code class="highlighter-rouge">bitshift</code>                                                   | Matlab, PostScript                                           |
| <code class="highlighter-rouge">bitShift</code>                                                   | Smalltalk                                                    |
| <code class="highlighter-rouge">ashift lshift</code>                                              | Logo                                                         |
| <code class="highlighter-rouge">lshift / rshift</code>                                            | Forth                                                        |
| <code class="highlighter-rouge">shiftL / / shiftR</code>                                          | Haskell                                                      |
| <code class="highlighter-rouge">shiftLeft / shiftRight</code>                                     | Io                                                           |
| <code class="highlighter-rouge">Shift_Left / Shift_Right / Shift_Right_Arithmetic / Rotate_Left / Rotate_Right</code> | Ada                                                          |
| <code class="highlighter-rouge">(ash x positive-integer) / (ash x negative-integer) /</code>      | Common Lisp                                                  |</p>
  </li>
</ul>

<hr />

<h2 id="threads">Threads</h2>

<ul>
  <li>thread definition</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">class class_name(threading.Thread) {[override run method] }</code></td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">task task_name is [entry entry_name[(parameter ...)]...] end task_name</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">task type task_type_name is [entry entry_name[(parameter ...)]...] end task_type_name</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class class_name extends Thread {[override run method] }</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">thread ...</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parallel [threads nb_threads] [mini mini_threshold] [maxi maxi_threshold] [active]    ...    task      parallel_instructions    [post      sequential_instructions]    ...</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">[NSThread detachNewThreadSelector:mainFunction toTarget:target withObject:obj]</code></td>
      <td>Objective-C</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>thread creation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">object t=Thread.Thread(f)</code></td>
      <td>Pike</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">set t [thread create {code}]</code></td>
      <td>Tcl</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Thread createThread(...)</code></td>
      <td>Io</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>thread object creation</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">MyTask : task_type_name;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class_name MyThread = new class_name()</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">p := [ ... ] newProcess.</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">p := [ ... ] fork.(140)</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>starting / stopping threads</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">start() / stop()(141)</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">resume / suspend / terminate</code></td>
      <td>Smalltalk</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Tasks are started when created / call Stop entry or "abort task-object-name"</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">thread send $t {script}</code></td>
      <td>Tcl</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>passing data directly between threads</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">call an entry with parameters</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">call any public method</code></td>
      <td>Java</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">common variables are copied at thread creation, in abscence of a "share" statement</code></td>
      <td>Pliant</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">use messages, parameters or shared variables(142)</code></td>
      <td>Smalltalk</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>terminating thread communication due to a time-out</li>
</ul>

<table>
  <thead>
    <tr>
      <th>规则</th>
      <th>语言</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">select task_entry_call; or delay timeout_limit; end select;</code></td>
      <td>Ada</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>Thread Synchronization</p>

    <p>Defining a Synchronized Shared Resource
|规则 | 语言 |
| ———————————————————— | ——— |
| <code class="highlighter-rouge">thread::mutex</code>                                              | Tcl       |
| <code class="highlighter-rouge">protected Object_Name is [entry entry_name(Parameter : [in out] is type [...]); procedure procedure_name(Parameter : [in out] is type [...]); function function_name return type; private shared data declaration end Object_Name;</code> | Ada       |
| <code class="highlighter-rouge">synchronize (this){ ... }</code>                                  | Java      |
| <code class="highlighter-rouge">SharedQueue, Semaphore critical: [...], Future, LazyValue</code>  | Smalltalk |</p>

    <p>Synchronized Writing to a shared resource
|规则 | 语言 |
| ———————————————————— | —- |
| <code class="highlighter-rouge">Object_Name.Entry_Name(Parms)Object_Name.Procedure_Name(Parms)</code> | Ada  |
| <code class="highlighter-rouge">Object_Name.SetMethod(Parms)</code>                               | Java |</p>

    <p>Synchronized Reading of a Shared Resource
|规则 | 语言 |
| ————————— | —- |
| <code class="highlighter-rouge">Object_Name.Function_Name</code> | Ada  |
| <code class="highlighter-rouge">Object_Name.GetMethod()</code>   | Java |</p>

    <p>Monitor Syntax
|规则 | 语言 |
| ——————————– | —- |
| <code class="highlighter-rouge">Objectg_Name.Entry_Name(Parms)</code> | Ada  |
|                                  |      |</p>
  </li>
  <li>
    <p>Joining Another Thread</p>

    <p>Suspending a thread until another thread completes
|规则 | 语言 |
| ——————————————————- | ———— |
| <code class="highlighter-rouge">Call task entry serviced just before task termination</code> | Ada          |
| <code class="highlighter-rouge">OtherThread.join()</code>                                    | Java, Python |</p>

    <p>Suspending a Thread Until Another Thread Establishes An Internal State
|规则 | 语言 |
| ————————————— | —- |
| <code class="highlighter-rouge">Call a task entry on the other thread</code> | Ada  |
|                                         |      |</p>
  </li>
  <li>
    <p>Thread Prioritization</p>

    <p>Selecting a Prioritization Model
|规则 | 语言 |
| —————————————– | —- |
| <code class="highlighter-rouge">pragma Locking_Policy(Ceiling_Locking);</code> | Ada  |
|                                           |      |</p>

    <p>Establishing a base thread priority
|规则 | 语言 |
| —————————— | —- |
| <code class="highlighter-rouge">pragma Priority(expression);</code> | Ada  |
|                                |      |</p>

    <p>Changing Thead Priority
|规则 | 语言 |
| ——————————- | ——— |
| <code class="highlighter-rouge">Set_Priority(Priority_Value);</code> | Ada       |
| <code class="highlighter-rouge">setPriority(newPriority);</code>     | Java      |
| <code class="highlighter-rouge">p priority: n</code>                 | Smalltalk |</p>
  </li>
  <li>
    <p>Thread-safe sharing of data without synchronization</p>

    <p>Ensuring access is atomic
|规则 | 语言 |
| —————————– | —- |
| <code class="highlighter-rouge">pragma Atomic(Object_Name);</code> | Ada  |
|                               |      |</p>

    <p>Ensuring access is always via a local copy of the shared data
|规则 | 语言 |
| ——————————- | —- |
| <code class="highlighter-rouge">pragma Volatile(Object_Name);</code> | Ada  |
|                                 |      |</p>
  </li>
</ul>

<hr />

<h2 id="remarks">Remarks</h2>

<ul>
  <li>
    <p>(1) introduced in Scheme in R6RS</p>
  </li>
  <li>
    <p>(2) when unused</p>
  </li>
  <li>
    <p>(3) for C, it is not a standard convention, but it is the more widespread</p>
  </li>
  <li>
    <p>(4) any string literal would work</p>
  </li>
  <li>
    <p>(5) see also =head1, =head2, =over, etc</p>
  </li>
  <li>
    <p>(6) need “file: %script-header.r” in file header</p>
  </li>
  <li>
    <p>(7) for user defined functions only</p>
  </li>
  <li>
    <p>(8) displayed &lt;- with a special character</p>
  </li>
  <li>
    <p>(9) variable on the right</p>
  </li>
  <li>
    <p>(10) F#: with indentation</p>
  </li>
  <li>
    <p>(11) the variable behaves like a pointer</p>
  </li>
  <li>
    <p>(12) cf <a href="http://merd.net/choices_syntax.html#horizontal_layout">horizontal layout</a></p>
  </li>
  <li>
    <p>(13) introduce scope</p>
  </li>
  <li>
    <p>(14) Smalltalk: introduce scope</p>
  </li>
  <li>
    <p>(15) ascii representation, original uses a special charset</p>
  </li>
  <li>
    <p>(16) in Modula-2, &lt;&gt; and # are synonyms</p>
  </li>
  <li>
    <p>(17) === and !== differ from == and != when the objects’ type differ</p>
  </li>
  <li>
    <p>(18) for objects</p>
  </li>
  <li>
    <p>(19) normal / structural / unification / arithmetic</p>
  </li>
  <li>
    <p>(20) structural / mathematical</p>
  </li>
  <li>
    <p>(21) deep comparison</p>
  </li>
  <li>
    <p>(22) in List::Util</p>
  </li>
  <li>
    <p>(23) just ‘eval’ evaluates JavaScript</p>
  </li>
  <li>
    <p>(24) Univ operator</p>
  </li>
  <li>
    <p>(25) starting with PHP 5.3</p>
  </li>
  <li>
    <p>(26) procedure call</p>
  </li>
  <li>
    <p>(27) in Pliant, special sugar for only one parameter</p>
  </li>
  <li>
    <p>(28) only for one parameter</p>
  </li>
  <li>
    <p>(29) only for two parameters</p>
  </li>
  <li>
    <p>(30) f is a block</p>
  </li>
  <li>
    <p>(31) Python &gt;= 2.5</p>
  </li>
  <li>
    <p>(32) it does not scale to 3rd argument</p>
  </li>
  <li>
    <p>(33) lambda (x . y) …</p>
  </li>
  <li>
    <p>(34) only final parameter may be variadic and accepts zero or more arguments</p>
  </li>
  <li>
    <p>(35) when callee has special “&amp;” prototype</p>
  </li>
  <li>
    <p>(36) this is a block, not precisely a function, but it’s alike</p>
  </li>
  <li>
    <p>(37) manual declaration of local variables wanted in the closure</p>
  </li>
  <li>
    <p>(38) see also: #1 + #2 &amp;</p>
  </li>
  <li>
    <p>(39) also works for procedures: proc {$ A B} … end</p>
  </li>
  <li>
    <p>(40) x, y, z are the parameters</p>
  </li>
  <li>
    <p>(41) method is optional</p>
  </li>
  <li>
    <p>(42) in Lua, “return xxx” can only appear before a block end. in Matlab, only in inline(‘…’)</p>
  </li>
  <li>
    <p>(43) “return” is used when there is no value to return</p>
  </li>
  <li>
    <p>(44) in Matlab, only for anonymous function</p>
  </li>
  <li>
    <p>(45) firefox</p>
  </li>
  <li>
    <p>(46) C#4, only for “dynamic” objects</p>
  </li>
  <li>
    <p>(47) the result goes to “e”</p>
  </li>
  <li>
    <p>(48) “break”s are mandatory, even for “default”!</p>
  </li>
  <li>
    <p>(49) Perl &gt;= 5.8.0</p>
  </li>
  <li>
    <p>(50) 1 is optional in this example, since min is 1 by default</p>
  </li>
  <li>
    <p>(51) in Ruby, see also catch/throw</p>
  </li>
  <li>
    <p>(52) often provided in the abbreviated form call/cc</p>
  </li>
  <li>
    <p>(53) matches an expression of type t</p>
  </li>
  <li>
    <p>(54) type is infered</p>
  </li>
  <li>
    <p>(55) expression “e” is cast to the type of “v”</p>
  </li>
  <li>
    <p>(56) for parameters</p>
  </li>
  <li>
    <p>(57) quite bad: only the reference is non-mutable whereas the object is still mutable</p>
  </li>
  <li>
    <p>(58) eventual send</p>
  </li>
  <li>
    <p>(59) properties are something alike attributes, but really are methods</p>
  </li>
  <li>
    <p>(60) one level depth</p>
  </li>
  <li>
    <p>(61) general deep copy function</p>
  </li>
  <li>
    <p>(62) object cloning is the default, uses the copy constructor in C++</p>
  </li>
  <li>
    <p>(63) or simply o_ := o for non-polymorphic objects</p>
  </li>
  <li>
    <p>(64) c’Class is the class rooted in c</p>
  </li>
  <li>
    <p>(65) see also isMemberOf</p>
  </li>
  <li>
    <p>(66) assignment attempt</p>
  </li>
  <li>
    <p>(67) see also callable(obj.meth) for <a href="http://www.python.org/doc/current/ref/types.html">unbound methods</a></p>
  </li>
  <li>
    <p>(68) in Python, usually called self</p>
  </li>
  <li>
    <p>(69) “:” is for external symbols only, recommended</p>
  </li>
  <li>
    <p>(70) directory name is package name</p>
  </li>
  <li>
    <p>(71) if names are exported using @EXPORT</p>
  </li>
  <li>
    <p>(72) if names are not exported or are exported using @EXPORT_OK</p>
  </li>
  <li>
    <p>(73) deprecated in ANSI Common Lisp, but used in ASDF</p>
  </li>
  <li>
    <p>(74) using a correspondance from the package name to the file name</p>
  </li>
  <li>
    <p>(75) inside a function</p>
  </li>
  <li>
    <p>(76) since PHP 5.3</p>
  </li>
  <li>
    <p>(77) no spaces</p>
  </li>
  <li>
    <p>(78) when using format</p>
  </li>
  <li>
    <p>(79) need expandMacros</p>
  </li>
  <li>
    <p>(80) where T is the type of the value</p>
  </li>
  <li>
    <p>(81) see also cPickle</p>
  </li>
  <li>
    <p>(82) but not using the C-like %-syntax</p>
  </li>
  <li>
    <p>(83) adding an end-of-line</p>
  </li>
  <li>
    <p>(84) in BourneShell, adding an end-of-line</p>
  </li>
  <li>
    <p>(85) adding an end-of-line unless already newline-terminated</p>
  </li>
  <li>
    <p>(86) Always case insensitive</p>
  </li>
  <li>
    <p>(87) Always case sensitive</p>
  </li>
  <li>
    <p>(88) faster than isEqual</p>
  </li>
  <li>
    <p>(89) the string is represented on the stack as (addr len)</p>
  </li>
  <li>
    <p>(90) in Lua &gt;= 5.0</p>
  </li>
  <li>
    <p>(91) in C++, is range-checked whereas a[i] is not</p>
  </li>
  <li>
    <p>(92) ESI dialect</p>
  </li>
  <li>
    <p>(93) beware of 0.0 which is true in Pike!</p>
  </li>
  <li>
    <p>(94) Smalltalk: postfix operator</p>
  </li>
  <li>
    <p>(95) in Modula-2, “&amp;” and “and” are synonyms</p>
  </li>
  <li>
    <p>(96) in Oz, simple functions, not operators</p>
  </li>
  <li>
    <p>(97) new in PHP 5.4</p>
  </li>
  <li>
    <p>(98) restricted to initialisation of a local variable in C and C++</p>
  </li>
  <li>
    <p>(99) a b c must be constants</p>
  </li>
  <li>
    <p>(100) beware, if you give only one integer argument, it is the size!</p>
  </li>
  <li>
    <p>(101) for write access: a i o put</p>
  </li>
  <li>
    <p>(102) in C++, it is range-checked whereas a[i] is not. in Smalltalk, for write access: a :at i :put o</p>
  </li>
  <li>
    <p>(103) see also Head</p>
  </li>
  <li>
    <p>(104) list comprehension</p>
  </li>
  <li>
    <p>(105) not in standard</p>
  </li>
  <li>
    <p>(106) in C++, it is done in place</p>
  </li>
  <li>
    <p>(107) in Scheme, not standard, but nearly standard</p>
  </li>
  <li>
    <p>(108) the result is not guaranteed to be the same as the order in the input</p>
  </li>
  <li>
    <p>(109) in Perl, in List::Util</p>
  </li>
  <li>
    <p>(110) Borland extension in Pascal</p>
  </li>
  <li>
    <p>(111) prefix</p>
  </li>
  <li>
    <p>(112) postfix</p>
  </li>
  <li>
    <p>(113) infix</p>
  </li>
  <li>
    <p>(114) optional value is only for pointers</p>
  </li>
  <li>
    <p>(115) only for “access” types in Ada</p>
  </li>
  <li>
    <p>(116) introduced in Perl 5.10</p>
  </li>
  <li>
    <p>(117) attribute selector</p>
  </li>
  <li>
    <p>(118) Java: introduced in 1.5</p>
  </li>
  <li>
    <p>(119) n1, n2, …</p>
  </li>
  <li>
    <p>(120) returns an iterator</p>
  </li>
  <li>
    <p>(121) right-bias</p>
  </li>
  <li>
    <p>(122) left-bias</p>
  </li>
  <li>
    <p>(123) jot on BSD</p>
  </li>
  <li>
    <p>(124) long is a big integer</p>
  </li>
  <li>
    <p>(125) fixed point</p>
  </li>
  <li>
    <p>(126) 0b1 new in PHP 5.4</p>
  </li>
  <li>
    <p>(127) integers are decimals</p>
  </li>
  <li>
    <p>(128) with mathematical priorities</p>
  </li>
  <li>
    <p>(129) APL uses a real multiplication sign for multiplication from a special character set</p>
  </li>
  <li>
    <p>(130) for each various types</p>
  </li>
  <li>
    <p>(131) from instances of Ada.Numerics.Float_Random or Ada.Numerics.Discrete_Random</p>
  </li>
  <li>
    <p>(132) “math/rand” is pseudo random whereas “crypto/rand” is cryptographically random</p>
  </li>
  <li>
    <p>(133) only applies to “math/rand”</p>
  </li>
  <li>
    <p>(134) Ruby &gt;= 1.7</p>
  </li>
  <li>
    <p>(135) method on big.Int</p>
  </li>
  <li>
    <p>(136) replace Float with whatever type you are using</p>
  </li>
  <li>
    <p>(137) in module Data.Bits</p>
  </li>
  <li>
    <p>(138) see also bit-and / bit-or / bit-xor</p>
  </li>
  <li>
    <p>(139) see also bit-not</p>
  </li>
  <li>
    <p>(140) equivalent to newProcess + resume</p>
  </li>
  <li>
    <p>(141) “stop” is now deprecated</p>
  </li>
  <li>
    <p>(142) a thread is created from a block, which is a closure on the variables as seen by the block</p>
  </li>
</ul>
:ET